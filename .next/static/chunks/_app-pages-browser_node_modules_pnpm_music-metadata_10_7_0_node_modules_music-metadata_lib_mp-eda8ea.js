"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_pnpm_music-metadata_10_7_0_node_modules_music-metadata_lib_mp-eda8ea"],{

/***/ "(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mp4/Atom.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mp4/Atom.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Atom: () => (/* binding */ Atom)\n/* harmony export */ });\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! debug */ \"(app-pages-browser)/./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/browser.js\");\n/* harmony import */ var _AtomToken_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AtomToken.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mp4/AtomToken.js\");\n\n\n\nconst debug = debug__WEBPACK_IMPORTED_MODULE_0__('music-metadata:parser:MP4:Atom');\nclass Atom {\n    static async readAtom(tokenizer, dataHandler, parent, remaining) {\n        // Parse atom header\n        const offset = tokenizer.position;\n        debug(`Reading next token on offset=${offset}...`); //  buf.toString('ascii')\n        const header = await tokenizer.readToken(_AtomToken_js__WEBPACK_IMPORTED_MODULE_1__.Header);\n        const extended = header.length === 1n;\n        if (extended) {\n            header.length = await tokenizer.readToken(_AtomToken_js__WEBPACK_IMPORTED_MODULE_1__.ExtendedSize);\n        }\n        const atomBean = new Atom(header, extended, parent);\n        const payloadLength = atomBean.getPayloadLength(remaining);\n        debug(`parse atom name=${atomBean.atomPath}, extended=${atomBean.extended}, offset=${offset}, len=${atomBean.header.length}`); //  buf.toString('ascii')\n        await atomBean.readData(tokenizer, dataHandler, payloadLength);\n        return atomBean;\n    }\n    constructor(header, extended, parent) {\n        this.header = header;\n        this.extended = extended;\n        this.parent = parent;\n        this.children = [];\n        this.atomPath = (this.parent ? `${this.parent.atomPath}.` : '') + this.header.name;\n    }\n    getHeaderLength() {\n        return this.extended ? 16 : 8;\n    }\n    getPayloadLength(remaining) {\n        return (this.header.length === 0n ? remaining : Number(this.header.length)) - this.getHeaderLength();\n    }\n    async readAtoms(tokenizer, dataHandler, size) {\n        while (size > 0) {\n            const atomBean = await Atom.readAtom(tokenizer, dataHandler, this, size);\n            this.children.push(atomBean);\n            size -= atomBean.header.length === 0n ? size : Number(atomBean.header.length);\n        }\n    }\n    async readData(tokenizer, dataHandler, remaining) {\n        switch (this.header.name) {\n            // \"Container\" atoms, contains nested atoms\n            case 'moov': // The Movie Atom: contains other atoms\n            case 'udta': // User defined atom\n            case 'trak':\n            case 'mdia': // Media atom\n            case 'minf': // Media Information Atom\n            case 'stbl': // The Sample Table Atom\n            case '<id>':\n            case 'ilst':\n            case 'tref':\n                return this.readAtoms(tokenizer, dataHandler, this.getPayloadLength(remaining));\n            case 'meta': { // Metadata Atom, ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW8\n                // meta has 4 bytes of padding, ignore\n                const peekHeader = await tokenizer.peekToken(_AtomToken_js__WEBPACK_IMPORTED_MODULE_1__.Header);\n                const paddingLength = peekHeader.name === 'hdlr' ? 0 : 4;\n                await tokenizer.ignore(paddingLength);\n                return this.readAtoms(tokenizer, dataHandler, this.getPayloadLength(remaining) - paddingLength);\n            }\n            default:\n                return dataHandler(this, remaining);\n        }\n    }\n}\n//# sourceMappingURL=Atom.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tdXNpYy1tZXRhZGF0YUAxMC43LjAvbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9tcDQvQXRvbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBOEI7QUFDYztBQUNKO0FBQ3hDLGNBQWMsa0NBQVM7QUFDaEI7QUFDUDtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsT0FBTyxPQUFPO0FBQzVELGlEQUFpRCxpREFBZ0I7QUFDakU7QUFDQTtBQUNBLHNEQUFzRCx1REFBc0I7QUFDNUU7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGtCQUFrQixhQUFhLGtCQUFrQixXQUFXLE9BQU8sUUFBUSx1QkFBdUIsSUFBSTtBQUN2STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHFCQUFxQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQSw2REFBNkQsaURBQU07QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2xpbGFzL0J1cmVhdS9EZXYvTE1QL25vZGVfbW9kdWxlcy8ucG5wbS9tdXNpYy1tZXRhZGF0YUAxMC43LjAvbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9tcDQvQXRvbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaW5pdERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCAqIGFzIEF0b21Ub2tlbiBmcm9tICcuL0F0b21Ub2tlbi5qcyc7XG5pbXBvcnQgeyBIZWFkZXIgfSBmcm9tICcuL0F0b21Ub2tlbi5qcyc7XG5jb25zdCBkZWJ1ZyA9IGluaXREZWJ1ZygnbXVzaWMtbWV0YWRhdGE6cGFyc2VyOk1QNDpBdG9tJyk7XG5leHBvcnQgY2xhc3MgQXRvbSB7XG4gICAgc3RhdGljIGFzeW5jIHJlYWRBdG9tKHRva2VuaXplciwgZGF0YUhhbmRsZXIsIHBhcmVudCwgcmVtYWluaW5nKSB7XG4gICAgICAgIC8vIFBhcnNlIGF0b20gaGVhZGVyXG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHRva2VuaXplci5wb3NpdGlvbjtcbiAgICAgICAgZGVidWcoYFJlYWRpbmcgbmV4dCB0b2tlbiBvbiBvZmZzZXQ9JHtvZmZzZXR9Li4uYCk7IC8vICBidWYudG9TdHJpbmcoJ2FzY2lpJylcbiAgICAgICAgY29uc3QgaGVhZGVyID0gYXdhaXQgdG9rZW5pemVyLnJlYWRUb2tlbihBdG9tVG9rZW4uSGVhZGVyKTtcbiAgICAgICAgY29uc3QgZXh0ZW5kZWQgPSBoZWFkZXIubGVuZ3RoID09PSAxbjtcbiAgICAgICAgaWYgKGV4dGVuZGVkKSB7XG4gICAgICAgICAgICBoZWFkZXIubGVuZ3RoID0gYXdhaXQgdG9rZW5pemVyLnJlYWRUb2tlbihBdG9tVG9rZW4uRXh0ZW5kZWRTaXplKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhdG9tQmVhbiA9IG5ldyBBdG9tKGhlYWRlciwgZXh0ZW5kZWQsIHBhcmVudCk7XG4gICAgICAgIGNvbnN0IHBheWxvYWRMZW5ndGggPSBhdG9tQmVhbi5nZXRQYXlsb2FkTGVuZ3RoKHJlbWFpbmluZyk7XG4gICAgICAgIGRlYnVnKGBwYXJzZSBhdG9tIG5hbWU9JHthdG9tQmVhbi5hdG9tUGF0aH0sIGV4dGVuZGVkPSR7YXRvbUJlYW4uZXh0ZW5kZWR9LCBvZmZzZXQ9JHtvZmZzZXR9LCBsZW49JHthdG9tQmVhbi5oZWFkZXIubGVuZ3RofWApOyAvLyAgYnVmLnRvU3RyaW5nKCdhc2NpaScpXG4gICAgICAgIGF3YWl0IGF0b21CZWFuLnJlYWREYXRhKHRva2VuaXplciwgZGF0YUhhbmRsZXIsIHBheWxvYWRMZW5ndGgpO1xuICAgICAgICByZXR1cm4gYXRvbUJlYW47XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGhlYWRlciwgZXh0ZW5kZWQsIHBhcmVudCkge1xuICAgICAgICB0aGlzLmhlYWRlciA9IGhlYWRlcjtcbiAgICAgICAgdGhpcy5leHRlbmRlZCA9IGV4dGVuZGVkO1xuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgICAgICB0aGlzLmF0b21QYXRoID0gKHRoaXMucGFyZW50ID8gYCR7dGhpcy5wYXJlbnQuYXRvbVBhdGh9LmAgOiAnJykgKyB0aGlzLmhlYWRlci5uYW1lO1xuICAgIH1cbiAgICBnZXRIZWFkZXJMZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4dGVuZGVkID8gMTYgOiA4O1xuICAgIH1cbiAgICBnZXRQYXlsb2FkTGVuZ3RoKHJlbWFpbmluZykge1xuICAgICAgICByZXR1cm4gKHRoaXMuaGVhZGVyLmxlbmd0aCA9PT0gMG4gPyByZW1haW5pbmcgOiBOdW1iZXIodGhpcy5oZWFkZXIubGVuZ3RoKSkgLSB0aGlzLmdldEhlYWRlckxlbmd0aCgpO1xuICAgIH1cbiAgICBhc3luYyByZWFkQXRvbXModG9rZW5pemVyLCBkYXRhSGFuZGxlciwgc2l6ZSkge1xuICAgICAgICB3aGlsZSAoc2l6ZSA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGF0b21CZWFuID0gYXdhaXQgQXRvbS5yZWFkQXRvbSh0b2tlbml6ZXIsIGRhdGFIYW5kbGVyLCB0aGlzLCBzaXplKTtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChhdG9tQmVhbik7XG4gICAgICAgICAgICBzaXplIC09IGF0b21CZWFuLmhlYWRlci5sZW5ndGggPT09IDBuID8gc2l6ZSA6IE51bWJlcihhdG9tQmVhbi5oZWFkZXIubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyByZWFkRGF0YSh0b2tlbml6ZXIsIGRhdGFIYW5kbGVyLCByZW1haW5pbmcpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLmhlYWRlci5uYW1lKSB7XG4gICAgICAgICAgICAvLyBcIkNvbnRhaW5lclwiIGF0b21zLCBjb250YWlucyBuZXN0ZWQgYXRvbXNcbiAgICAgICAgICAgIGNhc2UgJ21vb3YnOiAvLyBUaGUgTW92aWUgQXRvbTogY29udGFpbnMgb3RoZXIgYXRvbXNcbiAgICAgICAgICAgIGNhc2UgJ3VkdGEnOiAvLyBVc2VyIGRlZmluZWQgYXRvbVxuICAgICAgICAgICAgY2FzZSAndHJhayc6XG4gICAgICAgICAgICBjYXNlICdtZGlhJzogLy8gTWVkaWEgYXRvbVxuICAgICAgICAgICAgY2FzZSAnbWluZic6IC8vIE1lZGlhIEluZm9ybWF0aW9uIEF0b21cbiAgICAgICAgICAgIGNhc2UgJ3N0YmwnOiAvLyBUaGUgU2FtcGxlIFRhYmxlIEF0b21cbiAgICAgICAgICAgIGNhc2UgJzxpZD4nOlxuICAgICAgICAgICAgY2FzZSAnaWxzdCc6XG4gICAgICAgICAgICBjYXNlICd0cmVmJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWFkQXRvbXModG9rZW5pemVyLCBkYXRhSGFuZGxlciwgdGhpcy5nZXRQYXlsb2FkTGVuZ3RoKHJlbWFpbmluZykpO1xuICAgICAgICAgICAgY2FzZSAnbWV0YSc6IHsgLy8gTWV0YWRhdGEgQXRvbSwgcmVmOiBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vbGlicmFyeS9jb250ZW50L2RvY3VtZW50YXRpb24vUXVpY2tUaW1lL1FURkYvTWV0YWRhdGEvTWV0YWRhdGEuaHRtbCMvL2FwcGxlX3JlZi9kb2MvdWlkL1RQNDAwMDA5MzktQ0gxLVNXOFxuICAgICAgICAgICAgICAgIC8vIG1ldGEgaGFzIDQgYnl0ZXMgb2YgcGFkZGluZywgaWdub3JlXG4gICAgICAgICAgICAgICAgY29uc3QgcGVla0hlYWRlciA9IGF3YWl0IHRva2VuaXplci5wZWVrVG9rZW4oSGVhZGVyKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYWRkaW5nTGVuZ3RoID0gcGVla0hlYWRlci5uYW1lID09PSAnaGRscicgPyAwIDogNDtcbiAgICAgICAgICAgICAgICBhd2FpdCB0b2tlbml6ZXIuaWdub3JlKHBhZGRpbmdMZW5ndGgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlYWRBdG9tcyh0b2tlbml6ZXIsIGRhdGFIYW5kbGVyLCB0aGlzLmdldFBheWxvYWRMZW5ndGgocmVtYWluaW5nKSAtIHBhZGRpbmdMZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YUhhbmRsZXIodGhpcywgcmVtYWluaW5nKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUF0b20uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mp4/Atom.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mp4/AtomToken.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mp4/AtomToken.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChapterText: () => (/* binding */ ChapterText),\n/* harmony export */   DataAtom: () => (/* binding */ DataAtom),\n/* harmony export */   ExtendedSize: () => (/* binding */ ExtendedSize),\n/* harmony export */   FixedLengthAtom: () => (/* binding */ FixedLengthAtom),\n/* harmony export */   Header: () => (/* binding */ Header),\n/* harmony export */   MdhdAtom: () => (/* binding */ MdhdAtom),\n/* harmony export */   Mp4ContentError: () => (/* binding */ Mp4ContentError),\n/* harmony export */   MvhdAtom: () => (/* binding */ MvhdAtom),\n/* harmony export */   NameAtom: () => (/* binding */ NameAtom),\n/* harmony export */   SampleToChunkToken: () => (/* binding */ SampleToChunkToken),\n/* harmony export */   SoundSampleDescriptionV0: () => (/* binding */ SoundSampleDescriptionV0),\n/* harmony export */   SoundSampleDescriptionVersion: () => (/* binding */ SoundSampleDescriptionVersion),\n/* harmony export */   StcoAtom: () => (/* binding */ StcoAtom),\n/* harmony export */   StscAtom: () => (/* binding */ StscAtom),\n/* harmony export */   StsdAtom: () => (/* binding */ StsdAtom),\n/* harmony export */   StszAtom: () => (/* binding */ StszAtom),\n/* harmony export */   SttsAtom: () => (/* binding */ SttsAtom),\n/* harmony export */   TimeToSampleToken: () => (/* binding */ TimeToSampleToken),\n/* harmony export */   TrackHeaderAtom: () => (/* binding */ TrackHeaderAtom),\n/* harmony export */   ftyp: () => (/* binding */ ftyp),\n/* harmony export */   mhdr: () => (/* binding */ mhdr),\n/* harmony export */   tkhd: () => (/* binding */ tkhd)\n/* harmony export */ });\n/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! token-types */ \"(app-pages-browser)/./node_modules/.pnpm/token-types@6.0.0/node_modules/token-types/lib/index.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! debug */ \"(app-pages-browser)/./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/browser.js\");\n/* harmony import */ var _common_FourCC_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/FourCC.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/common/FourCC.js\");\n/* harmony import */ var _ParseError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ParseError.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/ParseError.js\");\n\n\n\n\nconst debug = debug__WEBPACK_IMPORTED_MODULE_1__('music-metadata:parser:MP4:atom');\nclass Mp4ContentError extends (0,_ParseError_js__WEBPACK_IMPORTED_MODULE_3__.makeUnexpectedFileContentError)('MP4') {\n}\nconst Header = {\n    len: 8,\n    get: (buf, off) => {\n        const length = token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buf, off);\n        if (length < 0)\n            throw new Mp4ContentError('Invalid atom header length');\n        return {\n            length: BigInt(length),\n            name: new token_types__WEBPACK_IMPORTED_MODULE_0__.StringType(4, 'latin1').get(buf, off + 4)\n        };\n    },\n    put: (buf, off, hdr) => {\n        token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.put(buf, off, Number(hdr.length));\n        return _common_FourCC_js__WEBPACK_IMPORTED_MODULE_2__.FourCcToken.put(buf, off + 4, hdr.name);\n    }\n};\n/**\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap1/qtff1.html#//apple_ref/doc/uid/TP40000939-CH203-38190\n */\nconst ExtendedSize = token_types__WEBPACK_IMPORTED_MODULE_0__.UINT64_BE;\nconst ftyp = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            type: new token_types__WEBPACK_IMPORTED_MODULE_0__.StringType(4, 'ascii').get(buf, off)\n        };\n    }\n};\nconst tkhd = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            type: new token_types__WEBPACK_IMPORTED_MODULE_0__.StringType(4, 'ascii').get(buf, off)\n        };\n    }\n};\n/**\n * Token: Movie Header Atom\n */\nconst mhdr = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            version: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8.get(buf, off),\n            flags: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT24_BE.get(buf, off + 1),\n            nextItemID: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Base class for 'fixed' length atoms.\n * In some cases these atoms are longer then the sum of the described fields.\n * Issue: https://github.com/Borewit/music-metadata/issues/120\n */\nclass FixedLengthAtom {\n    /**\n     *\n     * @param {number} len Length as specified in the size field\n     * @param {number} expLen Total length of sum of specified fields in the standard\n     * @param atomId Atom ID\n     */\n    constructor(len, expLen, atomId) {\n        this.len = len;\n        if (len < expLen) {\n            throw new Mp4ContentError(`Atom ${atomId} expected to be ${expLen}, but specifies ${len} bytes long.`);\n        }\n        if (len > expLen) {\n            debug(`Warning: atom ${atomId} expected to be ${expLen}, but was actually ${len} bytes long.`);\n        }\n    }\n}\n/**\n * Timestamp stored in seconds since Mac Epoch (1 January 1904)\n */\nconst SecondsSinceMacEpoch = {\n    len: 4,\n    get: (buf, off) => {\n        const secondsSinceUnixEpoch = token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buf, off) - 2082844800;\n        return new Date(secondsSinceUnixEpoch * 1000);\n    }\n};\n/**\n * Token: Media Header Atom\n * Ref:\n * - https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-SW34\n * - https://wiki.multimedia.cx/index.php/QuickTime_container#mdhd\n */\nclass MdhdAtom extends FixedLengthAtom {\n    constructor(len) {\n        super(len, 24, 'mdhd');\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            version: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8.get(buf, off + 0),\n            flags: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT24_BE.get(buf, off + 1),\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\n            timeScale: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buf, off + 12),\n            duration: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buf, off + 16),\n            language: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_BE.get(buf, off + 20),\n            quality: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_BE.get(buf, off + 22)\n        };\n    }\n}\n/**\n * Token: Movie Header Atom\n */\nclass MvhdAtom extends FixedLengthAtom {\n    constructor(len) {\n        super(len, 100, 'mvhd');\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            version: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8.get(buf, off),\n            flags: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT24_BE.get(buf, off + 1),\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\n            timeScale: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buf, off + 12),\n            duration: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buf, off + 16),\n            preferredRate: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buf, off + 20),\n            preferredVolume: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_BE.get(buf, off + 24),\n            // ignore reserver: 10 bytes\n            // ignore matrix structure: 36 bytes\n            previewTime: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buf, off + 72),\n            previewDuration: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buf, off + 76),\n            posterTime: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buf, off + 80),\n            selectionTime: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buf, off + 84),\n            selectionDuration: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buf, off + 88),\n            currentTime: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buf, off + 92),\n            nextTrackID: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buf, off + 96)\n        };\n    }\n}\n/**\n * Data Atom Structure\n */\nclass DataAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            type: {\n                set: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8.get(buf, off + 0),\n                type: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT24_BE.get(buf, off + 1)\n            },\n            locale: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT24_BE.get(buf, off + 4),\n            value: new token_types__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayType(this.len - 8).get(buf, off + 8)\n        };\n    }\n}\n/**\n * Data Atom Structure\n * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW31\n */\nclass NameAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            version: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8.get(buf, off),\n            flags: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT24_BE.get(buf, off + 1),\n            name: new token_types__WEBPACK_IMPORTED_MODULE_0__.StringType(this.len - 4, 'utf-8').get(buf, off + 4)\n        };\n    }\n}\n/**\n * Track Header Atoms structure\n * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25550\n */\nclass TrackHeaderAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            version: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8.get(buf, off),\n            flags: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT24_BE.get(buf, off + 1),\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\n            trackId: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buf, off + 12),\n            // reserved 4 bytes\n            duration: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buf, off + 20),\n            layer: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_BE.get(buf, off + 24),\n            alternateGroup: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_BE.get(buf, off + 26),\n            volume: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_BE.get(buf, off + 28) // ToDo: fixed point\n            // ToDo: add remaining fields\n        };\n    }\n}\n/**\n * Atom: Sample Description Atom ('stsd')\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691\n */\nconst stsdHeader = {\n    len: 8,\n    get: (buf, off) => {\n        return {\n            version: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8.get(buf, off),\n            flags: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT24_BE.get(buf, off + 1),\n            numberOfEntries: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Atom: Sample Description Atom ('stsd')\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691\n */\nclass SampleDescriptionTable {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            dataFormat: _common_FourCC_js__WEBPACK_IMPORTED_MODULE_2__.FourCcToken.get(buf, off),\n            dataReferenceIndex: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_BE.get(buf, off + 10),\n            description: new token_types__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayType(this.len - 12).get(buf, off + 12)\n        };\n    }\n}\n/**\n * Atom: Sample-description Atom ('stsd')\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691\n */\nclass StsdAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const header = stsdHeader.get(buf, off);\n        off += stsdHeader.len;\n        const table = [];\n        for (let n = 0; n < header.numberOfEntries; ++n) {\n            const size = token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buf, off); // Sample description size\n            off += token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.len;\n            table.push(new SampleDescriptionTable(size).get(buf, off));\n            off += size;\n        }\n        return {\n            header,\n            table\n        };\n    }\n}\n/**\n * Common Sound Sample Description (version & revision)\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-57317\n */\nconst SoundSampleDescriptionVersion = {\n    len: 8,\n    get(buf, off) {\n        return {\n            version: token_types__WEBPACK_IMPORTED_MODULE_0__.INT16_BE.get(buf, off),\n            revision: token_types__WEBPACK_IMPORTED_MODULE_0__.INT16_BE.get(buf, off + 2),\n            vendor: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Sound Sample Description (Version 0)\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-130736\n */\nconst SoundSampleDescriptionV0 = {\n    len: 12,\n    get(buf, off) {\n        return {\n            numAudioChannels: token_types__WEBPACK_IMPORTED_MODULE_0__.INT16_BE.get(buf, off + 0),\n            sampleSize: token_types__WEBPACK_IMPORTED_MODULE_0__.INT16_BE.get(buf, off + 2),\n            compressionId: token_types__WEBPACK_IMPORTED_MODULE_0__.INT16_BE.get(buf, off + 4),\n            packetSize: token_types__WEBPACK_IMPORTED_MODULE_0__.INT16_BE.get(buf, off + 6),\n            sampleRate: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_BE.get(buf, off + 8) + token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_BE.get(buf, off + 10) / 10000\n        };\n    }\n};\nclass SimpleTableAtom {\n    constructor(len, token) {\n        this.len = len;\n        this.token = token;\n    }\n    get(buf, off) {\n        const nrOfEntries = token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_BE.get(buf, off + 4);\n        return {\n            version: token_types__WEBPACK_IMPORTED_MODULE_0__.INT8.get(buf, off + 0),\n            flags: token_types__WEBPACK_IMPORTED_MODULE_0__.INT24_BE.get(buf, off + 1),\n            numberOfEntries: nrOfEntries,\n            entries: readTokenTable(buf, this.token, off + 8, this.len - 8, nrOfEntries)\n        };\n    }\n}\nconst TimeToSampleToken = {\n    len: 8,\n    get(buf, off) {\n        return {\n            count: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_BE.get(buf, off + 0),\n            duration: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_BE.get(buf, off + 4)\n        };\n    }\n};\n/**\n * Time-to-sample('stts') atom.\n * Store duration information for a media’s samples.\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25696\n */\nclass SttsAtom extends SimpleTableAtom {\n    constructor(len) {\n        super(len, TimeToSampleToken);\n        this.len = len;\n    }\n}\nconst SampleToChunkToken = {\n    len: 12,\n    get(buf, off) {\n        return {\n            firstChunk: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_BE.get(buf, off),\n            samplesPerChunk: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_BE.get(buf, off + 4),\n            sampleDescriptionId: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_BE.get(buf, off + 8)\n        };\n    }\n};\n/**\n * Sample-to-Chunk ('stsc') atom interface\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25706\n */\nclass StscAtom extends SimpleTableAtom {\n    constructor(len) {\n        super(len, SampleToChunkToken);\n        this.len = len;\n    }\n}\n/**\n * Sample-size ('stsz') atom\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25710\n */\nclass StszAtom {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const nrOfEntries = token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_BE.get(buf, off + 8);\n        return {\n            version: token_types__WEBPACK_IMPORTED_MODULE_0__.INT8.get(buf, off),\n            flags: token_types__WEBPACK_IMPORTED_MODULE_0__.INT24_BE.get(buf, off + 1),\n            sampleSize: token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_BE.get(buf, off + 4),\n            numberOfEntries: nrOfEntries,\n            entries: readTokenTable(buf, token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_BE, off + 12, this.len - 12, nrOfEntries)\n        };\n    }\n}\n/**\n * Chunk offset atom, 'stco'\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25715\n */\nclass StcoAtom extends SimpleTableAtom {\n    constructor(len) {\n        super(len, token_types__WEBPACK_IMPORTED_MODULE_0__.INT32_BE);\n        this.len = len;\n    }\n}\n/**\n * Token used to decode text-track from 'mdat' atom (raw data stream)\n */\nclass ChapterText {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        const titleLen = token_types__WEBPACK_IMPORTED_MODULE_0__.INT16_BE.get(buf, off + 0);\n        const str = new token_types__WEBPACK_IMPORTED_MODULE_0__.StringType(titleLen, 'utf-8');\n        return str.get(buf, off + 2);\n    }\n}\nfunction readTokenTable(buf, token, off, remainingLen, numberOfEntries) {\n    debug(`remainingLen=${remainingLen}, numberOfEntries=${numberOfEntries} * token-len=${token.len}`);\n    if (remainingLen === 0)\n        return [];\n    if (remainingLen !== numberOfEntries * token.len)\n        throw new Mp4ContentError('mismatch number-of-entries with remaining atom-length');\n    const entries = [];\n    // parse offset-table\n    for (let n = 0; n < numberOfEntries; ++n) {\n        entries.push(token.get(buf, off));\n        off += token.len;\n    }\n    return entries;\n}\n//# sourceMappingURL=AtomToken.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tdXNpYy1tZXRhZGF0YUAxMC43LjAvbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9tcDQvQXRvbVRva2VuLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXFDO0FBQ1A7QUFDb0I7QUFDZ0I7QUFDbEUsY0FBYyxrQ0FBUztBQUNoQiw4QkFBOEIsOEVBQThCO0FBQ25FO0FBQ087QUFDUDtBQUNBO0FBQ0EsdUJBQXVCLGtEQUFlO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLG1EQUFnQjtBQUN0QztBQUNBLEtBQUs7QUFDTDtBQUNBLFFBQVEsa0RBQWU7QUFDdkIsZUFBZSwwREFBVztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08scUJBQXFCLGtEQUFlO0FBQ3BDO0FBQ1A7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLG1EQUFnQjtBQUN0QztBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixtREFBZ0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsOENBQVc7QUFDaEMsbUJBQW1CLGtEQUFlO0FBQ2xDLHdCQUF3QixrREFBZTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLFFBQVEsaUJBQWlCLE9BQU8sa0JBQWtCLEtBQUs7QUFDckc7QUFDQTtBQUNBLG1DQUFtQyxRQUFRLGlCQUFpQixPQUFPLHFCQUFxQixLQUFLO0FBQzdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxrREFBZTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw4Q0FBVztBQUNoQyxtQkFBbUIsa0RBQWU7QUFDbEM7QUFDQTtBQUNBLHVCQUF1QixrREFBZTtBQUN0QyxzQkFBc0Isa0RBQWU7QUFDckMsc0JBQXNCLGtEQUFlO0FBQ3JDLHFCQUFxQixrREFBZTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw4Q0FBVztBQUNoQyxtQkFBbUIsa0RBQWU7QUFDbEM7QUFDQTtBQUNBLHVCQUF1QixrREFBZTtBQUN0QyxzQkFBc0Isa0RBQWU7QUFDckMsMkJBQTJCLGtEQUFlO0FBQzFDLDZCQUE2QixrREFBZTtBQUM1QztBQUNBO0FBQ0EseUJBQXlCLGtEQUFlO0FBQ3hDLDZCQUE2QixrREFBZTtBQUM1Qyx3QkFBd0Isa0RBQWU7QUFDdkMsMkJBQTJCLGtEQUFlO0FBQzFDLCtCQUErQixrREFBZTtBQUM5Qyx5QkFBeUIsa0RBQWU7QUFDeEMseUJBQXlCLGtEQUFlO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDhDQUFXO0FBQ2hDLHNCQUFzQixrREFBZTtBQUNyQyxhQUFhO0FBQ2Isb0JBQW9CLGtEQUFlO0FBQ25DLHVCQUF1Qix1REFBb0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsOENBQVc7QUFDaEMsbUJBQW1CLGtEQUFlO0FBQ2xDLHNCQUFzQixtREFBZ0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsOENBQVc7QUFDaEMsbUJBQW1CLGtEQUFlO0FBQ2xDO0FBQ0E7QUFDQSxxQkFBcUIsa0RBQWU7QUFDcEM7QUFDQSxzQkFBc0Isa0RBQWU7QUFDckMsbUJBQW1CLGtEQUFlO0FBQ2xDLDRCQUE0QixrREFBZTtBQUMzQyxvQkFBb0Isa0RBQWU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDhDQUFXO0FBQ2hDLG1CQUFtQixrREFBZTtBQUNsQyw2QkFBNkIsa0RBQWU7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsMERBQVc7QUFDbkMsZ0NBQWdDLGtEQUFlO0FBQy9DLDZCQUE2Qix1REFBb0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDRCQUE0QjtBQUNwRCx5QkFBeUIsa0RBQWUsZ0JBQWdCO0FBQ3hELG1CQUFtQixrREFBZTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGlEQUFjO0FBQ25DLHNCQUFzQixpREFBYztBQUNwQyxvQkFBb0IsaURBQWM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixpREFBYztBQUM1Qyx3QkFBd0IsaURBQWM7QUFDdEMsMkJBQTJCLGlEQUFjO0FBQ3pDLHdCQUF3QixpREFBYztBQUN0Qyx3QkFBd0Isa0RBQWUscUJBQXFCLGtEQUFlO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixpREFBYztBQUMxQztBQUNBLHFCQUFxQiw2Q0FBVTtBQUMvQixtQkFBbUIsaURBQWM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGlEQUFjO0FBQ2pDLHNCQUFzQixpREFBYztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsaURBQWM7QUFDdEMsNkJBQTZCLGlEQUFjO0FBQzNDLGlDQUFpQyxpREFBYztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixpREFBYztBQUMxQztBQUNBLHFCQUFxQiw2Q0FBVTtBQUMvQixtQkFBbUIsaURBQWM7QUFDakMsd0JBQXdCLGlEQUFjO0FBQ3RDO0FBQ0EseUNBQXlDLGlEQUFjO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG1CQUFtQixpREFBYztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGlEQUFjO0FBQ3ZDLHdCQUF3QixtREFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsYUFBYSxvQkFBb0IsaUJBQWlCLGNBQWMsVUFBVTtBQUNwRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IscUJBQXFCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvbGlsYXMvQnVyZWF1L0Rldi9MTVAvbm9kZV9tb2R1bGVzLy5wbnBtL211c2ljLW1ldGFkYXRhQDEwLjcuMC9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL21wNC9BdG9tVG9rZW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVG9rZW4gZnJvbSAndG9rZW4tdHlwZXMnO1xuaW1wb3J0IGluaXREZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyBGb3VyQ2NUb2tlbiB9IGZyb20gJy4uL2NvbW1vbi9Gb3VyQ0MuanMnO1xuaW1wb3J0IHsgbWFrZVVuZXhwZWN0ZWRGaWxlQ29udGVudEVycm9yIH0gZnJvbSAnLi4vUGFyc2VFcnJvci5qcyc7XG5jb25zdCBkZWJ1ZyA9IGluaXREZWJ1ZygnbXVzaWMtbWV0YWRhdGE6cGFyc2VyOk1QNDphdG9tJyk7XG5leHBvcnQgY2xhc3MgTXA0Q29udGVudEVycm9yIGV4dGVuZHMgbWFrZVVuZXhwZWN0ZWRGaWxlQ29udGVudEVycm9yKCdNUDQnKSB7XG59XG5leHBvcnQgY29uc3QgSGVhZGVyID0ge1xuICAgIGxlbjogOCxcbiAgICBnZXQ6IChidWYsIG9mZikgPT4ge1xuICAgICAgICBjb25zdCBsZW5ndGggPSBUb2tlbi5VSU5UMzJfQkUuZ2V0KGJ1Ziwgb2ZmKTtcbiAgICAgICAgaWYgKGxlbmd0aCA8IDApXG4gICAgICAgICAgICB0aHJvdyBuZXcgTXA0Q29udGVudEVycm9yKCdJbnZhbGlkIGF0b20gaGVhZGVyIGxlbmd0aCcpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGVuZ3RoOiBCaWdJbnQobGVuZ3RoKSxcbiAgICAgICAgICAgIG5hbWU6IG5ldyBUb2tlbi5TdHJpbmdUeXBlKDQsICdsYXRpbjEnKS5nZXQoYnVmLCBvZmYgKyA0KVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgcHV0OiAoYnVmLCBvZmYsIGhkcikgPT4ge1xuICAgICAgICBUb2tlbi5VSU5UMzJfQkUucHV0KGJ1Ziwgb2ZmLCBOdW1iZXIoaGRyLmxlbmd0aCkpO1xuICAgICAgICByZXR1cm4gRm91ckNjVG9rZW4ucHV0KGJ1Ziwgb2ZmICsgNCwgaGRyLm5hbWUpO1xuICAgIH1cbn07XG4vKipcbiAqIFJlZjogaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvYXJjaGl2ZS9kb2N1bWVudGF0aW9uL1F1aWNrVGltZS9RVEZGL1FURkZDaGFwMS9xdGZmMS5odG1sIy8vYXBwbGVfcmVmL2RvYy91aWQvVFA0MDAwMDkzOS1DSDIwMy0zODE5MFxuICovXG5leHBvcnQgY29uc3QgRXh0ZW5kZWRTaXplID0gVG9rZW4uVUlOVDY0X0JFO1xuZXhwb3J0IGNvbnN0IGZ0eXAgPSB7XG4gICAgbGVuOiA0LFxuICAgIGdldDogKGJ1Ziwgb2ZmKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBuZXcgVG9rZW4uU3RyaW5nVHlwZSg0LCAnYXNjaWknKS5nZXQoYnVmLCBvZmYpXG4gICAgICAgIH07XG4gICAgfVxufTtcbmV4cG9ydCBjb25zdCB0a2hkID0ge1xuICAgIGxlbjogNCxcbiAgICBnZXQ6IChidWYsIG9mZikgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogbmV3IFRva2VuLlN0cmluZ1R5cGUoNCwgJ2FzY2lpJykuZ2V0KGJ1Ziwgb2ZmKVxuICAgICAgICB9O1xuICAgIH1cbn07XG4vKipcbiAqIFRva2VuOiBNb3ZpZSBIZWFkZXIgQXRvbVxuICovXG5leHBvcnQgY29uc3QgbWhkciA9IHtcbiAgICBsZW46IDgsXG4gICAgZ2V0OiAoYnVmLCBvZmYpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZlcnNpb246IFRva2VuLlVJTlQ4LmdldChidWYsIG9mZiksXG4gICAgICAgICAgICBmbGFnczogVG9rZW4uVUlOVDI0X0JFLmdldChidWYsIG9mZiArIDEpLFxuICAgICAgICAgICAgbmV4dEl0ZW1JRDogVG9rZW4uVUlOVDMyX0JFLmdldChidWYsIG9mZiArIDQpXG4gICAgICAgIH07XG4gICAgfVxufTtcbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgJ2ZpeGVkJyBsZW5ndGggYXRvbXMuXG4gKiBJbiBzb21lIGNhc2VzIHRoZXNlIGF0b21zIGFyZSBsb25nZXIgdGhlbiB0aGUgc3VtIG9mIHRoZSBkZXNjcmliZWQgZmllbGRzLlxuICogSXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9Cb3Jld2l0L211c2ljLW1ldGFkYXRhL2lzc3Vlcy8xMjBcbiAqL1xuZXhwb3J0IGNsYXNzIEZpeGVkTGVuZ3RoQXRvbSB7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuIExlbmd0aCBhcyBzcGVjaWZpZWQgaW4gdGhlIHNpemUgZmllbGRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZXhwTGVuIFRvdGFsIGxlbmd0aCBvZiBzdW0gb2Ygc3BlY2lmaWVkIGZpZWxkcyBpbiB0aGUgc3RhbmRhcmRcbiAgICAgKiBAcGFyYW0gYXRvbUlkIEF0b20gSURcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihsZW4sIGV4cExlbiwgYXRvbUlkKSB7XG4gICAgICAgIHRoaXMubGVuID0gbGVuO1xuICAgICAgICBpZiAobGVuIDwgZXhwTGVuKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTXA0Q29udGVudEVycm9yKGBBdG9tICR7YXRvbUlkfSBleHBlY3RlZCB0byBiZSAke2V4cExlbn0sIGJ1dCBzcGVjaWZpZXMgJHtsZW59IGJ5dGVzIGxvbmcuYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlbiA+IGV4cExlbikge1xuICAgICAgICAgICAgZGVidWcoYFdhcm5pbmc6IGF0b20gJHthdG9tSWR9IGV4cGVjdGVkIHRvIGJlICR7ZXhwTGVufSwgYnV0IHdhcyBhY3R1YWxseSAke2xlbn0gYnl0ZXMgbG9uZy5gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogVGltZXN0YW1wIHN0b3JlZCBpbiBzZWNvbmRzIHNpbmNlIE1hYyBFcG9jaCAoMSBKYW51YXJ5IDE5MDQpXG4gKi9cbmNvbnN0IFNlY29uZHNTaW5jZU1hY0Vwb2NoID0ge1xuICAgIGxlbjogNCxcbiAgICBnZXQ6IChidWYsIG9mZikgPT4ge1xuICAgICAgICBjb25zdCBzZWNvbmRzU2luY2VVbml4RXBvY2ggPSBUb2tlbi5VSU5UMzJfQkUuZ2V0KGJ1Ziwgb2ZmKSAtIDIwODI4NDQ4MDA7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShzZWNvbmRzU2luY2VVbml4RXBvY2ggKiAxMDAwKTtcbiAgICB9XG59O1xuLyoqXG4gKiBUb2tlbjogTWVkaWEgSGVhZGVyIEF0b21cbiAqIFJlZjpcbiAqIC0gaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvYXJjaGl2ZS9kb2N1bWVudGF0aW9uL1F1aWNrVGltZS9RVEZGL1FURkZDaGFwMi9xdGZmMi5odG1sIy8vYXBwbGVfcmVmL2RvYy91aWQvVFA0MDAwMDkzOS1DSDIwNC1TVzM0XG4gKiAtIGh0dHBzOi8vd2lraS5tdWx0aW1lZGlhLmN4L2luZGV4LnBocC9RdWlja1RpbWVfY29udGFpbmVyI21kaGRcbiAqL1xuZXhwb3J0IGNsYXNzIE1kaGRBdG9tIGV4dGVuZHMgRml4ZWRMZW5ndGhBdG9tIHtcbiAgICBjb25zdHJ1Y3RvcihsZW4pIHtcbiAgICAgICAgc3VwZXIobGVuLCAyNCwgJ21kaGQnKTtcbiAgICAgICAgdGhpcy5sZW4gPSBsZW47XG4gICAgfVxuICAgIGdldChidWYsIG9mZikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmVyc2lvbjogVG9rZW4uVUlOVDguZ2V0KGJ1Ziwgb2ZmICsgMCksXG4gICAgICAgICAgICBmbGFnczogVG9rZW4uVUlOVDI0X0JFLmdldChidWYsIG9mZiArIDEpLFxuICAgICAgICAgICAgY3JlYXRpb25UaW1lOiBTZWNvbmRzU2luY2VNYWNFcG9jaC5nZXQoYnVmLCBvZmYgKyA0KSxcbiAgICAgICAgICAgIG1vZGlmaWNhdGlvblRpbWU6IFNlY29uZHNTaW5jZU1hY0Vwb2NoLmdldChidWYsIG9mZiArIDgpLFxuICAgICAgICAgICAgdGltZVNjYWxlOiBUb2tlbi5VSU5UMzJfQkUuZ2V0KGJ1Ziwgb2ZmICsgMTIpLFxuICAgICAgICAgICAgZHVyYXRpb246IFRva2VuLlVJTlQzMl9CRS5nZXQoYnVmLCBvZmYgKyAxNiksXG4gICAgICAgICAgICBsYW5ndWFnZTogVG9rZW4uVUlOVDE2X0JFLmdldChidWYsIG9mZiArIDIwKSxcbiAgICAgICAgICAgIHF1YWxpdHk6IFRva2VuLlVJTlQxNl9CRS5nZXQoYnVmLCBvZmYgKyAyMilcbiAgICAgICAgfTtcbiAgICB9XG59XG4vKipcbiAqIFRva2VuOiBNb3ZpZSBIZWFkZXIgQXRvbVxuICovXG5leHBvcnQgY2xhc3MgTXZoZEF0b20gZXh0ZW5kcyBGaXhlZExlbmd0aEF0b20ge1xuICAgIGNvbnN0cnVjdG9yKGxlbikge1xuICAgICAgICBzdXBlcihsZW4sIDEwMCwgJ212aGQnKTtcbiAgICAgICAgdGhpcy5sZW4gPSBsZW47XG4gICAgfVxuICAgIGdldChidWYsIG9mZikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmVyc2lvbjogVG9rZW4uVUlOVDguZ2V0KGJ1Ziwgb2ZmKSxcbiAgICAgICAgICAgIGZsYWdzOiBUb2tlbi5VSU5UMjRfQkUuZ2V0KGJ1Ziwgb2ZmICsgMSksXG4gICAgICAgICAgICBjcmVhdGlvblRpbWU6IFNlY29uZHNTaW5jZU1hY0Vwb2NoLmdldChidWYsIG9mZiArIDQpLFxuICAgICAgICAgICAgbW9kaWZpY2F0aW9uVGltZTogU2Vjb25kc1NpbmNlTWFjRXBvY2guZ2V0KGJ1Ziwgb2ZmICsgOCksXG4gICAgICAgICAgICB0aW1lU2NhbGU6IFRva2VuLlVJTlQzMl9CRS5nZXQoYnVmLCBvZmYgKyAxMiksXG4gICAgICAgICAgICBkdXJhdGlvbjogVG9rZW4uVUlOVDMyX0JFLmdldChidWYsIG9mZiArIDE2KSxcbiAgICAgICAgICAgIHByZWZlcnJlZFJhdGU6IFRva2VuLlVJTlQzMl9CRS5nZXQoYnVmLCBvZmYgKyAyMCksXG4gICAgICAgICAgICBwcmVmZXJyZWRWb2x1bWU6IFRva2VuLlVJTlQxNl9CRS5nZXQoYnVmLCBvZmYgKyAyNCksXG4gICAgICAgICAgICAvLyBpZ25vcmUgcmVzZXJ2ZXI6IDEwIGJ5dGVzXG4gICAgICAgICAgICAvLyBpZ25vcmUgbWF0cml4IHN0cnVjdHVyZTogMzYgYnl0ZXNcbiAgICAgICAgICAgIHByZXZpZXdUaW1lOiBUb2tlbi5VSU5UMzJfQkUuZ2V0KGJ1Ziwgb2ZmICsgNzIpLFxuICAgICAgICAgICAgcHJldmlld0R1cmF0aW9uOiBUb2tlbi5VSU5UMzJfQkUuZ2V0KGJ1Ziwgb2ZmICsgNzYpLFxuICAgICAgICAgICAgcG9zdGVyVGltZTogVG9rZW4uVUlOVDMyX0JFLmdldChidWYsIG9mZiArIDgwKSxcbiAgICAgICAgICAgIHNlbGVjdGlvblRpbWU6IFRva2VuLlVJTlQzMl9CRS5nZXQoYnVmLCBvZmYgKyA4NCksXG4gICAgICAgICAgICBzZWxlY3Rpb25EdXJhdGlvbjogVG9rZW4uVUlOVDMyX0JFLmdldChidWYsIG9mZiArIDg4KSxcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lOiBUb2tlbi5VSU5UMzJfQkUuZ2V0KGJ1Ziwgb2ZmICsgOTIpLFxuICAgICAgICAgICAgbmV4dFRyYWNrSUQ6IFRva2VuLlVJTlQzMl9CRS5nZXQoYnVmLCBvZmYgKyA5NilcbiAgICAgICAgfTtcbiAgICB9XG59XG4vKipcbiAqIERhdGEgQXRvbSBTdHJ1Y3R1cmVcbiAqL1xuZXhwb3J0IGNsYXNzIERhdGFBdG9tIHtcbiAgICBjb25zdHJ1Y3RvcihsZW4pIHtcbiAgICAgICAgdGhpcy5sZW4gPSBsZW47XG4gICAgfVxuICAgIGdldChidWYsIG9mZikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgIHNldDogVG9rZW4uVUlOVDguZ2V0KGJ1Ziwgb2ZmICsgMCksXG4gICAgICAgICAgICAgICAgdHlwZTogVG9rZW4uVUlOVDI0X0JFLmdldChidWYsIG9mZiArIDEpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbG9jYWxlOiBUb2tlbi5VSU5UMjRfQkUuZ2V0KGJ1Ziwgb2ZmICsgNCksXG4gICAgICAgICAgICB2YWx1ZTogbmV3IFRva2VuLlVpbnQ4QXJyYXlUeXBlKHRoaXMubGVuIC0gOCkuZ2V0KGJ1Ziwgb2ZmICsgOClcbiAgICAgICAgfTtcbiAgICB9XG59XG4vKipcbiAqIERhdGEgQXRvbSBTdHJ1Y3R1cmVcbiAqIFJlZjogaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvY29udGVudC9kb2N1bWVudGF0aW9uL1F1aWNrVGltZS9RVEZGL01ldGFkYXRhL01ldGFkYXRhLmh0bWwjLy9hcHBsZV9yZWYvZG9jL3VpZC9UUDQwMDAwOTM5LUNIMS1TVzMxXG4gKi9cbmV4cG9ydCBjbGFzcyBOYW1lQXRvbSB7XG4gICAgY29uc3RydWN0b3IobGVuKSB7XG4gICAgICAgIHRoaXMubGVuID0gbGVuO1xuICAgIH1cbiAgICBnZXQoYnVmLCBvZmYpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZlcnNpb246IFRva2VuLlVJTlQ4LmdldChidWYsIG9mZiksXG4gICAgICAgICAgICBmbGFnczogVG9rZW4uVUlOVDI0X0JFLmdldChidWYsIG9mZiArIDEpLFxuICAgICAgICAgICAgbmFtZTogbmV3IFRva2VuLlN0cmluZ1R5cGUodGhpcy5sZW4gLSA0LCAndXRmLTgnKS5nZXQoYnVmLCBvZmYgKyA0KVxuICAgICAgICB9O1xuICAgIH1cbn1cbi8qKlxuICogVHJhY2sgSGVhZGVyIEF0b21zIHN0cnVjdHVyZVxuICogUmVmOiBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vbGlicmFyeS9jb250ZW50L2RvY3VtZW50YXRpb24vUXVpY2tUaW1lL1FURkYvUVRGRkNoYXAyL3F0ZmYyLmh0bWwjLy9hcHBsZV9yZWYvZG9jL3VpZC9UUDQwMDAwOTM5LUNIMjA0LTI1NTUwXG4gKi9cbmV4cG9ydCBjbGFzcyBUcmFja0hlYWRlckF0b20ge1xuICAgIGNvbnN0cnVjdG9yKGxlbikge1xuICAgICAgICB0aGlzLmxlbiA9IGxlbjtcbiAgICB9XG4gICAgZ2V0KGJ1Ziwgb2ZmKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2ZXJzaW9uOiBUb2tlbi5VSU5UOC5nZXQoYnVmLCBvZmYpLFxuICAgICAgICAgICAgZmxhZ3M6IFRva2VuLlVJTlQyNF9CRS5nZXQoYnVmLCBvZmYgKyAxKSxcbiAgICAgICAgICAgIGNyZWF0aW9uVGltZTogU2Vjb25kc1NpbmNlTWFjRXBvY2guZ2V0KGJ1Ziwgb2ZmICsgNCksXG4gICAgICAgICAgICBtb2RpZmljYXRpb25UaW1lOiBTZWNvbmRzU2luY2VNYWNFcG9jaC5nZXQoYnVmLCBvZmYgKyA4KSxcbiAgICAgICAgICAgIHRyYWNrSWQ6IFRva2VuLlVJTlQzMl9CRS5nZXQoYnVmLCBvZmYgKyAxMiksXG4gICAgICAgICAgICAvLyByZXNlcnZlZCA0IGJ5dGVzXG4gICAgICAgICAgICBkdXJhdGlvbjogVG9rZW4uVUlOVDMyX0JFLmdldChidWYsIG9mZiArIDIwKSxcbiAgICAgICAgICAgIGxheWVyOiBUb2tlbi5VSU5UMTZfQkUuZ2V0KGJ1Ziwgb2ZmICsgMjQpLFxuICAgICAgICAgICAgYWx0ZXJuYXRlR3JvdXA6IFRva2VuLlVJTlQxNl9CRS5nZXQoYnVmLCBvZmYgKyAyNiksXG4gICAgICAgICAgICB2b2x1bWU6IFRva2VuLlVJTlQxNl9CRS5nZXQoYnVmLCBvZmYgKyAyOCkgLy8gVG9EbzogZml4ZWQgcG9pbnRcbiAgICAgICAgICAgIC8vIFRvRG86IGFkZCByZW1haW5pbmcgZmllbGRzXG4gICAgICAgIH07XG4gICAgfVxufVxuLyoqXG4gKiBBdG9tOiBTYW1wbGUgRGVzY3JpcHRpb24gQXRvbSAoJ3N0c2QnKVxuICogUmVmOiBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vbGlicmFyeS9hcmNoaXZlL2RvY3VtZW50YXRpb24vUXVpY2tUaW1lL1FURkYvUVRGRkNoYXAyL3F0ZmYyLmh0bWwjLy9hcHBsZV9yZWYvZG9jL3VpZC9UUDQwMDAwOTM5LUNIMjA0LTI1NjkxXG4gKi9cbmNvbnN0IHN0c2RIZWFkZXIgPSB7XG4gICAgbGVuOiA4LFxuICAgIGdldDogKGJ1Ziwgb2ZmKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2ZXJzaW9uOiBUb2tlbi5VSU5UOC5nZXQoYnVmLCBvZmYpLFxuICAgICAgICAgICAgZmxhZ3M6IFRva2VuLlVJTlQyNF9CRS5nZXQoYnVmLCBvZmYgKyAxKSxcbiAgICAgICAgICAgIG51bWJlck9mRW50cmllczogVG9rZW4uVUlOVDMyX0JFLmdldChidWYsIG9mZiArIDQpXG4gICAgICAgIH07XG4gICAgfVxufTtcbi8qKlxuICogQXRvbTogU2FtcGxlIERlc2NyaXB0aW9uIEF0b20gKCdzdHNkJylcbiAqIFJlZjogaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvYXJjaGl2ZS9kb2N1bWVudGF0aW9uL1F1aWNrVGltZS9RVEZGL1FURkZDaGFwMi9xdGZmMi5odG1sIy8vYXBwbGVfcmVmL2RvYy91aWQvVFA0MDAwMDkzOS1DSDIwNC0yNTY5MVxuICovXG5jbGFzcyBTYW1wbGVEZXNjcmlwdGlvblRhYmxlIHtcbiAgICBjb25zdHJ1Y3RvcihsZW4pIHtcbiAgICAgICAgdGhpcy5sZW4gPSBsZW47XG4gICAgfVxuICAgIGdldChidWYsIG9mZikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YUZvcm1hdDogRm91ckNjVG9rZW4uZ2V0KGJ1Ziwgb2ZmKSxcbiAgICAgICAgICAgIGRhdGFSZWZlcmVuY2VJbmRleDogVG9rZW4uVUlOVDE2X0JFLmdldChidWYsIG9mZiArIDEwKSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBuZXcgVG9rZW4uVWludDhBcnJheVR5cGUodGhpcy5sZW4gLSAxMikuZ2V0KGJ1Ziwgb2ZmICsgMTIpXG4gICAgICAgIH07XG4gICAgfVxufVxuLyoqXG4gKiBBdG9tOiBTYW1wbGUtZGVzY3JpcHRpb24gQXRvbSAoJ3N0c2QnKVxuICogUmVmOiBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vbGlicmFyeS9hcmNoaXZlL2RvY3VtZW50YXRpb24vUXVpY2tUaW1lL1FURkYvUVRGRkNoYXAyL3F0ZmYyLmh0bWwjLy9hcHBsZV9yZWYvZG9jL3VpZC9UUDQwMDAwOTM5LUNIMjA0LTI1NjkxXG4gKi9cbmV4cG9ydCBjbGFzcyBTdHNkQXRvbSB7XG4gICAgY29uc3RydWN0b3IobGVuKSB7XG4gICAgICAgIHRoaXMubGVuID0gbGVuO1xuICAgIH1cbiAgICBnZXQoYnVmLCBvZmYpIHtcbiAgICAgICAgY29uc3QgaGVhZGVyID0gc3RzZEhlYWRlci5nZXQoYnVmLCBvZmYpO1xuICAgICAgICBvZmYgKz0gc3RzZEhlYWRlci5sZW47XG4gICAgICAgIGNvbnN0IHRhYmxlID0gW107XG4gICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgaGVhZGVyLm51bWJlck9mRW50cmllczsgKytuKSB7XG4gICAgICAgICAgICBjb25zdCBzaXplID0gVG9rZW4uVUlOVDMyX0JFLmdldChidWYsIG9mZik7IC8vIFNhbXBsZSBkZXNjcmlwdGlvbiBzaXplXG4gICAgICAgICAgICBvZmYgKz0gVG9rZW4uVUlOVDMyX0JFLmxlbjtcbiAgICAgICAgICAgIHRhYmxlLnB1c2gobmV3IFNhbXBsZURlc2NyaXB0aW9uVGFibGUoc2l6ZSkuZ2V0KGJ1Ziwgb2ZmKSk7XG4gICAgICAgICAgICBvZmYgKz0gc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGVhZGVyLFxuICAgICAgICAgICAgdGFibGVcbiAgICAgICAgfTtcbiAgICB9XG59XG4vKipcbiAqIENvbW1vbiBTb3VuZCBTYW1wbGUgRGVzY3JpcHRpb24gKHZlcnNpb24gJiByZXZpc2lvbilcbiAqIFJlZjogaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvYXJjaGl2ZS9kb2N1bWVudGF0aW9uL1F1aWNrVGltZS9RVEZGL1FURkZDaGFwMy9xdGZmMy5odG1sIy8vYXBwbGVfcmVmL2RvYy91aWQvVFA0MDAwMDkzOS1DSDIwNS01NzMxN1xuICovXG5leHBvcnQgY29uc3QgU291bmRTYW1wbGVEZXNjcmlwdGlvblZlcnNpb24gPSB7XG4gICAgbGVuOiA4LFxuICAgIGdldChidWYsIG9mZikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmVyc2lvbjogVG9rZW4uSU5UMTZfQkUuZ2V0KGJ1Ziwgb2ZmKSxcbiAgICAgICAgICAgIHJldmlzaW9uOiBUb2tlbi5JTlQxNl9CRS5nZXQoYnVmLCBvZmYgKyAyKSxcbiAgICAgICAgICAgIHZlbmRvcjogVG9rZW4uSU5UMzJfQkUuZ2V0KGJ1Ziwgb2ZmICsgNClcbiAgICAgICAgfTtcbiAgICB9XG59O1xuLyoqXG4gKiBTb3VuZCBTYW1wbGUgRGVzY3JpcHRpb24gKFZlcnNpb24gMClcbiAqIFJlZjogaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvYXJjaGl2ZS9kb2N1bWVudGF0aW9uL1F1aWNrVGltZS9RVEZGL1FURkZDaGFwMy9xdGZmMy5odG1sIy8vYXBwbGVfcmVmL2RvYy91aWQvVFA0MDAwMDkzOS1DSDIwNS0xMzA3MzZcbiAqL1xuZXhwb3J0IGNvbnN0IFNvdW5kU2FtcGxlRGVzY3JpcHRpb25WMCA9IHtcbiAgICBsZW46IDEyLFxuICAgIGdldChidWYsIG9mZikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbnVtQXVkaW9DaGFubmVsczogVG9rZW4uSU5UMTZfQkUuZ2V0KGJ1Ziwgb2ZmICsgMCksXG4gICAgICAgICAgICBzYW1wbGVTaXplOiBUb2tlbi5JTlQxNl9CRS5nZXQoYnVmLCBvZmYgKyAyKSxcbiAgICAgICAgICAgIGNvbXByZXNzaW9uSWQ6IFRva2VuLklOVDE2X0JFLmdldChidWYsIG9mZiArIDQpLFxuICAgICAgICAgICAgcGFja2V0U2l6ZTogVG9rZW4uSU5UMTZfQkUuZ2V0KGJ1Ziwgb2ZmICsgNiksXG4gICAgICAgICAgICBzYW1wbGVSYXRlOiBUb2tlbi5VSU5UMTZfQkUuZ2V0KGJ1Ziwgb2ZmICsgOCkgKyBUb2tlbi5VSU5UMTZfQkUuZ2V0KGJ1Ziwgb2ZmICsgMTApIC8gMTAwMDBcbiAgICAgICAgfTtcbiAgICB9XG59O1xuY2xhc3MgU2ltcGxlVGFibGVBdG9tIHtcbiAgICBjb25zdHJ1Y3RvcihsZW4sIHRva2VuKSB7XG4gICAgICAgIHRoaXMubGVuID0gbGVuO1xuICAgICAgICB0aGlzLnRva2VuID0gdG9rZW47XG4gICAgfVxuICAgIGdldChidWYsIG9mZikge1xuICAgICAgICBjb25zdCBuck9mRW50cmllcyA9IFRva2VuLklOVDMyX0JFLmdldChidWYsIG9mZiArIDQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmVyc2lvbjogVG9rZW4uSU5UOC5nZXQoYnVmLCBvZmYgKyAwKSxcbiAgICAgICAgICAgIGZsYWdzOiBUb2tlbi5JTlQyNF9CRS5nZXQoYnVmLCBvZmYgKyAxKSxcbiAgICAgICAgICAgIG51bWJlck9mRW50cmllczogbnJPZkVudHJpZXMsXG4gICAgICAgICAgICBlbnRyaWVzOiByZWFkVG9rZW5UYWJsZShidWYsIHRoaXMudG9rZW4sIG9mZiArIDgsIHRoaXMubGVuIC0gOCwgbnJPZkVudHJpZXMpXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IFRpbWVUb1NhbXBsZVRva2VuID0ge1xuICAgIGxlbjogOCxcbiAgICBnZXQoYnVmLCBvZmYpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvdW50OiBUb2tlbi5JTlQzMl9CRS5nZXQoYnVmLCBvZmYgKyAwKSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiBUb2tlbi5JTlQzMl9CRS5nZXQoYnVmLCBvZmYgKyA0KVxuICAgICAgICB9O1xuICAgIH1cbn07XG4vKipcbiAqIFRpbWUtdG8tc2FtcGxlKCdzdHRzJykgYXRvbS5cbiAqIFN0b3JlIGR1cmF0aW9uIGluZm9ybWF0aW9uIGZvciBhIG1lZGlh4oCZcyBzYW1wbGVzLlxuICogUmVmOiBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vbGlicmFyeS9hcmNoaXZlL2RvY3VtZW50YXRpb24vUXVpY2tUaW1lL1FURkYvUVRGRkNoYXAyL3F0ZmYyLmh0bWwjLy9hcHBsZV9yZWYvZG9jL3VpZC9UUDQwMDAwOTM5LUNIMjA0LTI1Njk2XG4gKi9cbmV4cG9ydCBjbGFzcyBTdHRzQXRvbSBleHRlbmRzIFNpbXBsZVRhYmxlQXRvbSB7XG4gICAgY29uc3RydWN0b3IobGVuKSB7XG4gICAgICAgIHN1cGVyKGxlbiwgVGltZVRvU2FtcGxlVG9rZW4pO1xuICAgICAgICB0aGlzLmxlbiA9IGxlbjtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgU2FtcGxlVG9DaHVua1Rva2VuID0ge1xuICAgIGxlbjogMTIsXG4gICAgZ2V0KGJ1Ziwgb2ZmKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmaXJzdENodW5rOiBUb2tlbi5JTlQzMl9CRS5nZXQoYnVmLCBvZmYpLFxuICAgICAgICAgICAgc2FtcGxlc1BlckNodW5rOiBUb2tlbi5JTlQzMl9CRS5nZXQoYnVmLCBvZmYgKyA0KSxcbiAgICAgICAgICAgIHNhbXBsZURlc2NyaXB0aW9uSWQ6IFRva2VuLklOVDMyX0JFLmdldChidWYsIG9mZiArIDgpXG4gICAgICAgIH07XG4gICAgfVxufTtcbi8qKlxuICogU2FtcGxlLXRvLUNodW5rICgnc3RzYycpIGF0b20gaW50ZXJmYWNlXG4gKiBSZWY6IGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9saWJyYXJ5L2FyY2hpdmUvZG9jdW1lbnRhdGlvbi9RdWlja1RpbWUvUVRGRi9RVEZGQ2hhcDIvcXRmZjIuaHRtbCMvL2FwcGxlX3JlZi9kb2MvdWlkL1RQNDAwMDA5MzktQ0gyMDQtMjU3MDZcbiAqL1xuZXhwb3J0IGNsYXNzIFN0c2NBdG9tIGV4dGVuZHMgU2ltcGxlVGFibGVBdG9tIHtcbiAgICBjb25zdHJ1Y3RvcihsZW4pIHtcbiAgICAgICAgc3VwZXIobGVuLCBTYW1wbGVUb0NodW5rVG9rZW4pO1xuICAgICAgICB0aGlzLmxlbiA9IGxlbjtcbiAgICB9XG59XG4vKipcbiAqIFNhbXBsZS1zaXplICgnc3RzeicpIGF0b21cbiAqIFJlZjogaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvYXJjaGl2ZS9kb2N1bWVudGF0aW9uL1F1aWNrVGltZS9RVEZGL1FURkZDaGFwMi9xdGZmMi5odG1sIy8vYXBwbGVfcmVmL2RvYy91aWQvVFA0MDAwMDkzOS1DSDIwNC0yNTcxMFxuICovXG5leHBvcnQgY2xhc3MgU3RzekF0b20ge1xuICAgIGNvbnN0cnVjdG9yKGxlbikge1xuICAgICAgICB0aGlzLmxlbiA9IGxlbjtcbiAgICB9XG4gICAgZ2V0KGJ1Ziwgb2ZmKSB7XG4gICAgICAgIGNvbnN0IG5yT2ZFbnRyaWVzID0gVG9rZW4uSU5UMzJfQkUuZ2V0KGJ1Ziwgb2ZmICsgOCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2ZXJzaW9uOiBUb2tlbi5JTlQ4LmdldChidWYsIG9mZiksXG4gICAgICAgICAgICBmbGFnczogVG9rZW4uSU5UMjRfQkUuZ2V0KGJ1Ziwgb2ZmICsgMSksXG4gICAgICAgICAgICBzYW1wbGVTaXplOiBUb2tlbi5JTlQzMl9CRS5nZXQoYnVmLCBvZmYgKyA0KSxcbiAgICAgICAgICAgIG51bWJlck9mRW50cmllczogbnJPZkVudHJpZXMsXG4gICAgICAgICAgICBlbnRyaWVzOiByZWFkVG9rZW5UYWJsZShidWYsIFRva2VuLklOVDMyX0JFLCBvZmYgKyAxMiwgdGhpcy5sZW4gLSAxMiwgbnJPZkVudHJpZXMpXG4gICAgICAgIH07XG4gICAgfVxufVxuLyoqXG4gKiBDaHVuayBvZmZzZXQgYXRvbSwgJ3N0Y28nXG4gKiBSZWY6IGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9saWJyYXJ5L2FyY2hpdmUvZG9jdW1lbnRhdGlvbi9RdWlja1RpbWUvUVRGRi9RVEZGQ2hhcDIvcXRmZjIuaHRtbCMvL2FwcGxlX3JlZi9kb2MvdWlkL1RQNDAwMDA5MzktQ0gyMDQtMjU3MTVcbiAqL1xuZXhwb3J0IGNsYXNzIFN0Y29BdG9tIGV4dGVuZHMgU2ltcGxlVGFibGVBdG9tIHtcbiAgICBjb25zdHJ1Y3RvcihsZW4pIHtcbiAgICAgICAgc3VwZXIobGVuLCBUb2tlbi5JTlQzMl9CRSk7XG4gICAgICAgIHRoaXMubGVuID0gbGVuO1xuICAgIH1cbn1cbi8qKlxuICogVG9rZW4gdXNlZCB0byBkZWNvZGUgdGV4dC10cmFjayBmcm9tICdtZGF0JyBhdG9tIChyYXcgZGF0YSBzdHJlYW0pXG4gKi9cbmV4cG9ydCBjbGFzcyBDaGFwdGVyVGV4dCB7XG4gICAgY29uc3RydWN0b3IobGVuKSB7XG4gICAgICAgIHRoaXMubGVuID0gbGVuO1xuICAgIH1cbiAgICBnZXQoYnVmLCBvZmYpIHtcbiAgICAgICAgY29uc3QgdGl0bGVMZW4gPSBUb2tlbi5JTlQxNl9CRS5nZXQoYnVmLCBvZmYgKyAwKTtcbiAgICAgICAgY29uc3Qgc3RyID0gbmV3IFRva2VuLlN0cmluZ1R5cGUodGl0bGVMZW4sICd1dGYtOCcpO1xuICAgICAgICByZXR1cm4gc3RyLmdldChidWYsIG9mZiArIDIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlYWRUb2tlblRhYmxlKGJ1ZiwgdG9rZW4sIG9mZiwgcmVtYWluaW5nTGVuLCBudW1iZXJPZkVudHJpZXMpIHtcbiAgICBkZWJ1ZyhgcmVtYWluaW5nTGVuPSR7cmVtYWluaW5nTGVufSwgbnVtYmVyT2ZFbnRyaWVzPSR7bnVtYmVyT2ZFbnRyaWVzfSAqIHRva2VuLWxlbj0ke3Rva2VuLmxlbn1gKTtcbiAgICBpZiAocmVtYWluaW5nTGVuID09PSAwKVxuICAgICAgICByZXR1cm4gW107XG4gICAgaWYgKHJlbWFpbmluZ0xlbiAhPT0gbnVtYmVyT2ZFbnRyaWVzICogdG9rZW4ubGVuKVxuICAgICAgICB0aHJvdyBuZXcgTXA0Q29udGVudEVycm9yKCdtaXNtYXRjaCBudW1iZXItb2YtZW50cmllcyB3aXRoIHJlbWFpbmluZyBhdG9tLWxlbmd0aCcpO1xuICAgIGNvbnN0IGVudHJpZXMgPSBbXTtcbiAgICAvLyBwYXJzZSBvZmZzZXQtdGFibGVcbiAgICBmb3IgKGxldCBuID0gMDsgbiA8IG51bWJlck9mRW50cmllczsgKytuKSB7XG4gICAgICAgIGVudHJpZXMucHVzaCh0b2tlbi5nZXQoYnVmLCBvZmYpKTtcbiAgICAgICAgb2ZmICs9IHRva2VuLmxlbjtcbiAgICB9XG4gICAgcmV0dXJuIGVudHJpZXM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdG9tVG9rZW4uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mp4/AtomToken.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mp4/MP4Parser.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mp4/MP4Parser.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MP4Parser: () => (/* binding */ MP4Parser)\n/* harmony export */ });\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! debug */ \"(app-pages-browser)/./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/browser.js\");\n/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! token-types */ \"(app-pages-browser)/./node_modules/.pnpm/token-types@6.0.0/node_modules/token-types/lib/index.js\");\n/* harmony import */ var _common_BasicParser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/BasicParser.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/common/BasicParser.js\");\n/* harmony import */ var _id3v1_ID3v1Parser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../id3v1/ID3v1Parser.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/id3v1/ID3v1Parser.js\");\n/* harmony import */ var _Atom_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Atom.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mp4/Atom.js\");\n/* harmony import */ var _AtomToken_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./AtomToken.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mp4/AtomToken.js\");\n/* harmony import */ var _type_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../type.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/type.js\");\n/* harmony import */ var uint8array_extras__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! uint8array-extras */ \"(app-pages-browser)/./node_modules/.pnpm/uint8array-extras@1.4.0/node_modules/uint8array-extras/index.js\");\n\n\n\n\n\n\n\n\n\nconst debug = debug__WEBPACK_IMPORTED_MODULE_0__('music-metadata:parser:MP4');\nconst tagFormat = 'iTunes';\nconst encoderDict = {\n    raw: {\n        lossy: false,\n        format: 'raw'\n    },\n    MAC3: {\n        lossy: true,\n        format: 'MACE 3:1'\n    },\n    MAC6: {\n        lossy: true,\n        format: 'MACE 6:1'\n    },\n    ima4: {\n        lossy: true,\n        format: 'IMA 4:1'\n    },\n    ulaw: {\n        lossy: true,\n        format: 'uLaw 2:1'\n    },\n    alaw: {\n        lossy: true,\n        format: 'uLaw 2:1'\n    },\n    Qclp: {\n        lossy: true,\n        format: 'QUALCOMM PureVoice'\n    },\n    '.mp3': {\n        lossy: true,\n        format: 'MPEG-1 layer 3'\n    },\n    alac: {\n        lossy: false,\n        format: 'ALAC'\n    },\n    'ac-3': {\n        lossy: true,\n        format: 'AC-3'\n    },\n    mp4a: {\n        lossy: true,\n        format: 'MPEG-4/AAC'\n    },\n    mp4s: {\n        lossy: true,\n        format: 'MP4S'\n    },\n    // Closed Captioning Media, https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-SW87\n    c608: {\n        lossy: true,\n        format: 'CEA-608'\n    },\n    c708: {\n        lossy: true,\n        format: 'CEA-708'\n    }\n};\nfunction distinct(value, index, self) {\n    return self.indexOf(value) === index;\n}\n/*\n * Parser for the MP4 (MPEG-4 Part 14) container format\n * Standard: ISO/IEC 14496-14\n * supporting:\n * - QuickTime container\n * - MP4 File Format\n * - 3GPP file format\n * - 3GPP2 file format\n *\n * MPEG-4 Audio / Part 3 (.m4a)& MPEG 4 Video (m4v, mp4) extension.\n * Support for Apple iTunes tags as found in a M4A/M4V files.\n * Ref:\n *   https://en.wikipedia.org/wiki/ISO_base_media_file_format\n *   https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/Metadata/Metadata.html\n *   http://atomicparsley.sourceforge.net/mpeg-4files.html\n *   https://github.com/sergiomb2/libmp4v2/wiki/iTunesMetadata\n *   https://wiki.multimedia.cx/index.php/QuickTime_container\n */\nclass MP4Parser extends _common_BasicParser_js__WEBPACK_IMPORTED_MODULE_2__.BasicParser {\n    constructor() {\n        super(...arguments);\n        this.tracks = [];\n        this.atomParsers = {\n            /**\n             * Parse movie header (mvhd) atom\n             * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-56313\n             */\n            mvhd: async (len) => {\n                const mvhd = await this.tokenizer.readToken(new _AtomToken_js__WEBPACK_IMPORTED_MODULE_5__.MvhdAtom(len));\n                this.metadata.setFormat('creationTime', mvhd.creationTime);\n                this.metadata.setFormat('modificationTime', mvhd.modificationTime);\n            },\n            /**\n             * Parse media header (mdhd) atom\n             * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25615\n             */\n            mdhd: async (len) => {\n                const mdhd_data = await this.tokenizer.readToken(new _AtomToken_js__WEBPACK_IMPORTED_MODULE_5__.MdhdAtom(len));\n                // this.parse_mxhd(mdhd_data, this.currentTrack);\n                const td = this.getTrackDescription();\n                td.creationTime = mdhd_data.creationTime;\n                td.modificationTime = mdhd_data.modificationTime;\n                td.timeScale = mdhd_data.timeScale;\n                td.duration = mdhd_data.duration;\n            },\n            chap: async (len) => {\n                const td = this.getTrackDescription();\n                const trackIds = [];\n                while (len >= token_types__WEBPACK_IMPORTED_MODULE_1__.UINT32_BE.len) {\n                    trackIds.push(await this.tokenizer.readNumber(token_types__WEBPACK_IMPORTED_MODULE_1__.UINT32_BE));\n                    len -= token_types__WEBPACK_IMPORTED_MODULE_1__.UINT32_BE.len;\n                }\n                td.chapterList = trackIds;\n            },\n            tkhd: async (len) => {\n                const track = (await this.tokenizer.readToken(new _AtomToken_js__WEBPACK_IMPORTED_MODULE_5__.TrackHeaderAtom(len)));\n                this.tracks.push(track);\n            },\n            /**\n             * Parse mdat atom.\n             * Will scan for chapters\n             */\n            mdat: async (len) => {\n                this.audioLengthInBytes = len;\n                this.calculateBitRate();\n                if (this.options.includeChapters) {\n                    const trackWithChapters = this.tracks.filter(track => track.chapterList);\n                    if (trackWithChapters.length === 1) {\n                        const chapterTrackIds = trackWithChapters[0].chapterList;\n                        const chapterTracks = this.tracks.filter(track => chapterTrackIds.indexOf(track.trackId) !== -1);\n                        if (chapterTracks.length === 1) {\n                            return this.parseChapterTrack(chapterTracks[0], trackWithChapters[0], len);\n                        }\n                    }\n                }\n                await this.tokenizer.ignore(len);\n            },\n            ftyp: async (len) => {\n                const types = [];\n                while (len > 0) {\n                    const ftype = await this.tokenizer.readToken(_AtomToken_js__WEBPACK_IMPORTED_MODULE_5__.ftyp);\n                    len -= _AtomToken_js__WEBPACK_IMPORTED_MODULE_5__.ftyp.len;\n                    const value = ftype.type.replace(/\\W/g, '');\n                    if (value.length > 0) {\n                        types.push(value); // unshift for backward compatibility\n                    }\n                }\n                debug(`ftyp: ${types.join('/')}`);\n                const x = types.filter(distinct).join('/');\n                this.metadata.setFormat('container', x);\n            },\n            /**\n             * Parse sample description atom\n             */\n            stsd: async (len) => {\n                const stsd = await this.tokenizer.readToken(new _AtomToken_js__WEBPACK_IMPORTED_MODULE_5__.StsdAtom(len));\n                const trackDescription = this.getTrackDescription();\n                trackDescription.soundSampleDescription = stsd.table.map(dfEntry => this.parseSoundSampleDescription(dfEntry));\n            },\n            /**\n             * sample-to-Chunk Atoms\n             */\n            stsc: async (len) => {\n                const stsc = await this.tokenizer.readToken(new _AtomToken_js__WEBPACK_IMPORTED_MODULE_5__.StscAtom(len));\n                this.getTrackDescription().sampleToChunkTable = stsc.entries;\n            },\n            /**\n             * time-to-sample table\n             */\n            stts: async (len) => {\n                const stts = await this.tokenizer.readToken(new _AtomToken_js__WEBPACK_IMPORTED_MODULE_5__.SttsAtom(len));\n                this.getTrackDescription().timeToSampleTable = stts.entries;\n            },\n            /**\n             * Parse sample-sizes atom ('stsz')\n             */\n            stsz: async (len) => {\n                const stsz = await this.tokenizer.readToken(new _AtomToken_js__WEBPACK_IMPORTED_MODULE_5__.StszAtom(len));\n                const td = this.getTrackDescription();\n                td.sampleSize = stsz.sampleSize;\n                td.sampleSizeTable = stsz.entries;\n            },\n            /**\n             * Parse chunk-offset atom ('stco')\n             */\n            stco: async (len) => {\n                const stco = await this.tokenizer.readToken(new _AtomToken_js__WEBPACK_IMPORTED_MODULE_5__.StcoAtom(len));\n                this.getTrackDescription().chunkOffsetTable = stco.entries; // remember chunk offsets\n            },\n            date: async (len) => {\n                const date = await this.tokenizer.readToken(new token_types__WEBPACK_IMPORTED_MODULE_1__.StringType(len, 'utf-8'));\n                await this.addTag('date', date);\n            }\n        };\n    }\n    static read_BE_Integer(array, signed) {\n        const integerType = (signed ? 'INT' : 'UINT') + array.length * 8 + (array.length > 1 ? '_BE' : '');\n        const token = token_types__WEBPACK_IMPORTED_MODULE_1__[integerType];\n        if (!token) {\n            throw new _AtomToken_js__WEBPACK_IMPORTED_MODULE_5__.Mp4ContentError(`Token for integer type not found: \"${integerType}\"`);\n        }\n        return Number(token.get(array, 0));\n    }\n    async parse() {\n        this.tracks = [];\n        let remainingFileSize = this.tokenizer.fileInfo.size || 0;\n        while (!this.tokenizer.fileInfo.size || remainingFileSize > 0) {\n            try {\n                const token = await this.tokenizer.peekToken(_AtomToken_js__WEBPACK_IMPORTED_MODULE_5__.Header);\n                if (token.name === '\\0\\0\\0\\0') {\n                    const errMsg = `Error at offset=${this.tokenizer.position}: box.id=0`;\n                    debug(errMsg);\n                    this.addWarning(errMsg);\n                    break;\n                }\n            }\n            catch (error) {\n                if (error instanceof Error) {\n                    const errMsg = `Error at offset=${this.tokenizer.position}: ${error.message}`;\n                    debug(errMsg);\n                    this.addWarning(errMsg);\n                }\n                else\n                    throw error;\n                break;\n            }\n            const rootAtom = await _Atom_js__WEBPACK_IMPORTED_MODULE_4__.Atom.readAtom(this.tokenizer, (atom, remaining) => this.handleAtom(atom, remaining), null, remainingFileSize);\n            remainingFileSize -= rootAtom.header.length === BigInt(0) ? remainingFileSize : Number(rootAtom.header.length);\n        }\n        // Post process metadata\n        const formatList = [];\n        this.tracks.forEach(track => {\n            const trackFormats = [];\n            track.soundSampleDescription.forEach(ssd => {\n                const streamInfo = {};\n                const encoderInfo = encoderDict[ssd.dataFormat];\n                if (encoderInfo) {\n                    trackFormats.push(encoderInfo.format);\n                    streamInfo.codecName = encoderInfo.format;\n                }\n                else {\n                    streamInfo.codecName = `<${ssd.dataFormat}>`;\n                }\n                if (ssd.description) {\n                    const { description } = ssd;\n                    if (description.sampleRate > 0) {\n                        streamInfo.type = _type_js__WEBPACK_IMPORTED_MODULE_6__.TrackType.audio;\n                        streamInfo.audio = {\n                            samplingFrequency: description.sampleRate,\n                            bitDepth: description.sampleSize,\n                            channels: description.numAudioChannels\n                        };\n                    }\n                }\n                this.metadata.addStreamInfo(streamInfo);\n            });\n            if (trackFormats.length >= 1) {\n                formatList.push(trackFormats.join('/'));\n            }\n        });\n        if (formatList.length > 0) {\n            this.metadata.setFormat('codec', formatList.filter(distinct).join('+'));\n        }\n        const audioTracks = this.tracks.filter(track => {\n            return track.soundSampleDescription.length >= 1 && track.soundSampleDescription[0].description && track.soundSampleDescription[0].description.numAudioChannels > 0;\n        });\n        if (audioTracks.length >= 1) {\n            const audioTrack = audioTracks[0];\n            if (audioTrack.timeScale > 0) {\n                const duration = audioTrack.duration / audioTrack.timeScale; // calculate duration in seconds\n                this.metadata.setFormat('duration', duration);\n            }\n            const ssd = audioTrack.soundSampleDescription[0];\n            if (ssd.description) {\n                this.metadata.setFormat('sampleRate', ssd.description.sampleRate);\n                this.metadata.setFormat('bitsPerSample', ssd.description.sampleSize);\n                this.metadata.setFormat('numberOfChannels', ssd.description.numAudioChannels);\n                if (audioTrack.timeScale === 0 && audioTrack.timeToSampleTable.length > 0) {\n                    const totalSampleSize = audioTrack.timeToSampleTable\n                        .map(ttstEntry => ttstEntry.count * ttstEntry.duration)\n                        .reduce((total, sampleSize) => total + sampleSize);\n                    const duration = totalSampleSize / ssd.description.sampleRate;\n                    this.metadata.setFormat('duration', duration);\n                }\n            }\n            const encoderInfo = encoderDict[ssd.dataFormat];\n            if (encoderInfo) {\n                this.metadata.setFormat('lossless', !encoderInfo.lossy);\n            }\n            this.calculateBitRate();\n        }\n    }\n    async handleAtom(atom, remaining) {\n        if (atom.parent) {\n            switch (atom.parent.header.name) {\n                case 'ilst':\n                case '<id>':\n                    return this.parseMetadataItemData(atom);\n            }\n        }\n        // const payloadLength = atom.getPayloadLength(remaining);\n        if (this.atomParsers[atom.header.name]) {\n            return this.atomParsers[atom.header.name](remaining);\n        }\n        debug(`No parser for atom path=${atom.atomPath}, payload-len=${remaining}, ignoring atom`);\n        await this.tokenizer.ignore(remaining);\n    }\n    getTrackDescription() {\n        return this.tracks[this.tracks.length - 1];\n    }\n    calculateBitRate() {\n        if (this.audioLengthInBytes && this.metadata.format.duration) {\n            this.metadata.setFormat('bitrate', 8 * this.audioLengthInBytes / this.metadata.format.duration);\n        }\n    }\n    async addTag(id, value) {\n        await this.metadata.addTag(tagFormat, id, value);\n    }\n    addWarning(message) {\n        debug(`Warning: ${message}`);\n        this.metadata.addWarning(message);\n    }\n    /**\n     * Parse data of Meta-item-list-atom (item of 'ilst' atom)\n     * @param metaAtom\n     * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW8\n     */\n    parseMetadataItemData(metaAtom) {\n        let tagKey = metaAtom.header.name;\n        return metaAtom.readAtoms(this.tokenizer, async (child, remaining) => {\n            const payLoadLength = child.getPayloadLength(remaining);\n            switch (child.header.name) {\n                case 'data': // value atom\n                    return this.parseValueAtom(tagKey, child);\n                case 'name': // name atom (optional)\n                case 'mean':\n                case 'rate': {\n                    const name = await this.tokenizer.readToken(new _AtomToken_js__WEBPACK_IMPORTED_MODULE_5__.NameAtom(payLoadLength));\n                    tagKey += `:${name.name}`;\n                    break;\n                }\n                default: {\n                    const uint8Array = await this.tokenizer.readToken(new token_types__WEBPACK_IMPORTED_MODULE_1__.Uint8ArrayType(payLoadLength));\n                    this.addWarning(`Unsupported meta-item: ${tagKey}[${child.header.name}] => value=${(0,uint8array_extras__WEBPACK_IMPORTED_MODULE_7__.uint8ArrayToHex)(uint8Array)} ascii=${(0,uint8array_extras__WEBPACK_IMPORTED_MODULE_7__.uint8ArrayToString)(uint8Array, 'ascii')}`);\n                }\n            }\n        }, metaAtom.getPayloadLength(0));\n    }\n    async parseValueAtom(tagKey, metaAtom) {\n        const dataAtom = await this.tokenizer.readToken(new _AtomToken_js__WEBPACK_IMPORTED_MODULE_5__.DataAtom(Number(metaAtom.header.length) - _AtomToken_js__WEBPACK_IMPORTED_MODULE_5__.Header.len));\n        if (dataAtom.type.set !== 0) {\n            throw new _AtomToken_js__WEBPACK_IMPORTED_MODULE_5__.Mp4ContentError(`Unsupported type-set != 0: ${dataAtom.type.set}`);\n        }\n        // Use well-known-type table\n        // Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW35\n        switch (dataAtom.type.type) {\n            case 0: // reserved: Reserved for use where no type needs to be indicated\n                switch (tagKey) {\n                    case 'trkn':\n                    case 'disk': {\n                        const num = token_types__WEBPACK_IMPORTED_MODULE_1__.UINT8.get(dataAtom.value, 3);\n                        const of = token_types__WEBPACK_IMPORTED_MODULE_1__.UINT8.get(dataAtom.value, 5);\n                        // console.log(\"  %s[data] = %s/%s\", tagKey, num, of);\n                        await this.addTag(tagKey, `${num}/${of}`);\n                        break;\n                    }\n                    case 'gnre': {\n                        const genreInt = token_types__WEBPACK_IMPORTED_MODULE_1__.UINT8.get(dataAtom.value, 1);\n                        const genreStr = _id3v1_ID3v1Parser_js__WEBPACK_IMPORTED_MODULE_3__.Genres[genreInt - 1];\n                        // console.log(\"  %s[data] = %s\", tagKey, genreStr);\n                        await this.addTag(tagKey, genreStr);\n                        break;\n                    }\n                    case 'rate': {\n                        const rate = new TextDecoder('ascii').decode(dataAtom.value);\n                        await this.addTag(tagKey, rate);\n                        break;\n                    }\n                    default:\n                        debug(`unknown proprietary value type for: ${metaAtom.atomPath}`);\n                }\n                break;\n            case 1: // UTF-8: Without any count or NULL terminator\n            case 18: // Unknown: Found in m4b in combination with a '©gen' tag\n                await this.addTag(tagKey, new TextDecoder('utf-8').decode(dataAtom.value));\n                break;\n            case 13: // JPEG\n                if (this.options.skipCovers)\n                    break;\n                await this.addTag(tagKey, {\n                    format: 'image/jpeg',\n                    data: Uint8Array.from(dataAtom.value)\n                });\n                break;\n            case 14: // PNG\n                if (this.options.skipCovers)\n                    break;\n                await this.addTag(tagKey, {\n                    format: 'image/png',\n                    data: Uint8Array.from(dataAtom.value)\n                });\n                break;\n            case 21: // BE Signed Integer\n                await this.addTag(tagKey, MP4Parser.read_BE_Integer(dataAtom.value, true));\n                break;\n            case 22: // BE Unsigned Integer\n                await this.addTag(tagKey, MP4Parser.read_BE_Integer(dataAtom.value, false));\n                break;\n            case 65: // An 8-bit signed integer\n                await this.addTag(tagKey, token_types__WEBPACK_IMPORTED_MODULE_1__.UINT8.get(dataAtom.value, 0));\n                break;\n            case 66: // A big-endian 16-bit signed integer\n                await this.addTag(tagKey, token_types__WEBPACK_IMPORTED_MODULE_1__.UINT16_BE.get(dataAtom.value, 0));\n                break;\n            case 67: // A big-endian 32-bit signed integer\n                await this.addTag(tagKey, token_types__WEBPACK_IMPORTED_MODULE_1__.UINT32_BE.get(dataAtom.value, 0));\n                break;\n            default:\n                this.addWarning(`atom key=${tagKey}, has unknown well-known-type (data-type): ${dataAtom.type.type}`);\n        }\n    }\n    /**\n     * @param sampleDescription\n     * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-128916\n     */\n    parseSoundSampleDescription(sampleDescription) {\n        const ssd = {\n            dataFormat: sampleDescription.dataFormat,\n            dataReferenceIndex: sampleDescription.dataReferenceIndex\n        };\n        let offset = 0;\n        const version = _AtomToken_js__WEBPACK_IMPORTED_MODULE_5__.SoundSampleDescriptionVersion.get(sampleDescription.description, offset);\n        offset += _AtomToken_js__WEBPACK_IMPORTED_MODULE_5__.SoundSampleDescriptionVersion.len;\n        if (version.version === 0 || version.version === 1) {\n            // Sound Sample Description (Version 0)\n            ssd.description = _AtomToken_js__WEBPACK_IMPORTED_MODULE_5__.SoundSampleDescriptionV0.get(sampleDescription.description, offset);\n        }\n        else {\n            debug(`Warning: sound-sample-description ${version} not implemented`);\n        }\n        return ssd;\n    }\n    async parseChapterTrack(chapterTrack, track, len) {\n        if (!chapterTrack.sampleSize) {\n            if (chapterTrack.chunkOffsetTable.length !== chapterTrack.sampleSizeTable.length)\n                throw new Error('Expected equal chunk-offset-table & sample-size-table length.');\n        }\n        const chapters = [];\n        for (let i = 0; i < chapterTrack.chunkOffsetTable.length && len > 0; ++i) {\n            const chunkOffset = chapterTrack.chunkOffsetTable[i];\n            const nextChunkLen = chunkOffset - this.tokenizer.position;\n            const sampleSize = chapterTrack.sampleSize > 0 ? chapterTrack.sampleSize : chapterTrack.sampleSizeTable[i];\n            len -= nextChunkLen + sampleSize;\n            if (len < 0)\n                throw new _AtomToken_js__WEBPACK_IMPORTED_MODULE_5__.Mp4ContentError('Chapter chunk exceeding token length');\n            await this.tokenizer.ignore(nextChunkLen);\n            const title = await this.tokenizer.readToken(new _AtomToken_js__WEBPACK_IMPORTED_MODULE_5__.ChapterText(sampleSize));\n            debug(`Chapter ${i + 1}: ${title}`);\n            const chapter = {\n                title,\n                sampleOffset: this.findSampleOffset(track, this.tokenizer.position)\n            };\n            debug(`Chapter title=${chapter.title}, offset=${chapter.sampleOffset}/${this.tracks[0].duration}`);\n            chapters.push(chapter);\n        }\n        this.metadata.setFormat('chapters', chapters);\n        await this.tokenizer.ignore(len);\n    }\n    findSampleOffset(track, chapterOffset) {\n        let totalDuration = 0;\n        track.timeToSampleTable.forEach(e => {\n            totalDuration += e.count * e.duration;\n        });\n        debug(`Total duration=${totalDuration}`);\n        let chunkIndex = 0;\n        while (chunkIndex < track.chunkOffsetTable.length && track.chunkOffsetTable[chunkIndex] < chapterOffset) {\n            ++chunkIndex;\n        }\n        return this.getChunkDuration(chunkIndex + 1, track);\n    }\n    getChunkDuration(chunkId, track) {\n        let ttsi = 0;\n        let ttsc = track.timeToSampleTable[ttsi].count;\n        let ttsd = track.timeToSampleTable[ttsi].duration;\n        let curChunkId = 1;\n        let samplesPerChunk = this.getSamplesPerChunk(curChunkId, track.sampleToChunkTable);\n        let totalDuration = 0;\n        while (curChunkId < chunkId) {\n            const nrOfSamples = Math.min(ttsc, samplesPerChunk);\n            totalDuration += nrOfSamples * ttsd;\n            ttsc -= nrOfSamples;\n            samplesPerChunk -= nrOfSamples;\n            if (samplesPerChunk === 0) {\n                ++curChunkId;\n                samplesPerChunk = this.getSamplesPerChunk(curChunkId, track.sampleToChunkTable);\n            }\n            else {\n                ++ttsi;\n                ttsc = track.timeToSampleTable[ttsi].count;\n                ttsd = track.timeToSampleTable[ttsi].duration;\n            }\n        }\n        return totalDuration;\n    }\n    getSamplesPerChunk(chunkId, stcTable) {\n        for (let i = 0; i < stcTable.length - 1; ++i) {\n            if (chunkId >= stcTable[i].firstChunk && chunkId < stcTable[i + 1].firstChunk) {\n                return stcTable[i].samplesPerChunk;\n            }\n        }\n        return stcTable[stcTable.length - 1].samplesPerChunk;\n    }\n}\n//# sourceMappingURL=MP4Parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mp4/MP4Parser.js\n"));

/***/ })

}]);