"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_pnpm_music-metadata_10_7_0_node_modules_music-metadata_lib_mp-daa78e"],{

/***/ "(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractID3Parser: () => (/* binding */ AbstractID3Parser)\n/* harmony export */ });\n/* harmony import */ var strtok3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! strtok3 */ \"(app-pages-browser)/./node_modules/.pnpm/strtok3@10.0.1/node_modules/strtok3/lib/core.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! debug */ \"(app-pages-browser)/./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/browser.js\");\n/* harmony import */ var _ID3v2Token_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ID3v2Token.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/id3v2/ID3v2Token.js\");\n/* harmony import */ var _ID3v2Parser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ID3v2Parser.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/id3v2/ID3v2Parser.js\");\n/* harmony import */ var _id3v1_ID3v1Parser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../id3v1/ID3v1Parser.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/id3v1/ID3v1Parser.js\");\n/* harmony import */ var _common_BasicParser_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/BasicParser.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/common/BasicParser.js\");\n\n\n\n\n\n\nconst debug = debug__WEBPACK_IMPORTED_MODULE_1__('music-metadata:parser:ID3');\n/**\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\n */\nclass AbstractID3Parser extends _common_BasicParser_js__WEBPACK_IMPORTED_MODULE_5__.BasicParser {\n    constructor() {\n        super(...arguments);\n        this.id3parser = new _ID3v2Parser_js__WEBPACK_IMPORTED_MODULE_3__.ID3v2Parser();\n    }\n    static async startsWithID3v2Header(tokenizer) {\n        return (await tokenizer.peekToken(_ID3v2Token_js__WEBPACK_IMPORTED_MODULE_2__.ID3v2Header)).fileIdentifier === 'ID3';\n    }\n    async parse() {\n        try {\n            await this.parseID3v2();\n        }\n        catch (err) {\n            if (err instanceof strtok3__WEBPACK_IMPORTED_MODULE_0__.EndOfStreamError) {\n                debug(\"End-of-stream\");\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    finalize() {\n        return;\n    }\n    async parseID3v2() {\n        await this.tryReadId3v2Headers();\n        debug('End of ID3v2 header, go to MPEG-parser: pos=%s', this.tokenizer.position);\n        await this.postId3v2Parse();\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\n            this.finalize();\n        }\n        else {\n            const id3v1parser = new _id3v1_ID3v1Parser_js__WEBPACK_IMPORTED_MODULE_4__.ID3v1Parser(this.metadata, this.tokenizer, this.options);\n            await id3v1parser.parse();\n            this.finalize();\n        }\n    }\n    async tryReadId3v2Headers() {\n        const id3Header = await this.tokenizer.peekToken(_ID3v2Token_js__WEBPACK_IMPORTED_MODULE_2__.ID3v2Header);\n        if (id3Header.fileIdentifier === 'ID3') {\n            debug('Found ID3v2 header, pos=%s', this.tokenizer.position);\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n            return this.tryReadId3v2Headers();\n        }\n    }\n}\n//# sourceMappingURL=AbstractID3Parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tdXNpYy1tZXRhZGF0YUAxMC43LjAvbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9pZDN2Mi9BYnN0cmFjdElEM1BhcnNlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQTJDO0FBQ2I7QUFDZ0I7QUFDQztBQUNPO0FBQ0M7QUFDdkQsY0FBYyxrQ0FBUztBQUN2QjtBQUNBO0FBQ0E7QUFDTyxnQ0FBZ0MsK0RBQVc7QUFDbEQ7QUFDQTtBQUNBLDZCQUE2Qix3REFBVztBQUN4QztBQUNBO0FBQ0EsMENBQTBDLHVEQUFXO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixxREFBZ0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDhEQUFXO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsdURBQVc7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvbGlsYXMvQnVyZWF1L0Rldi9MTVAvbm9kZV9tb2R1bGVzLy5wbnBtL211c2ljLW1ldGFkYXRhQDEwLjcuMC9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL2lkM3YyL0Fic3RyYWN0SUQzUGFyc2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVuZE9mU3RyZWFtRXJyb3IgfSBmcm9tICdzdHJ0b2szJztcbmltcG9ydCBpbml0RGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHsgSUQzdjJIZWFkZXIgfSBmcm9tICcuL0lEM3YyVG9rZW4uanMnO1xuaW1wb3J0IHsgSUQzdjJQYXJzZXIgfSBmcm9tICcuL0lEM3YyUGFyc2VyLmpzJztcbmltcG9ydCB7IElEM3YxUGFyc2VyIH0gZnJvbSAnLi4vaWQzdjEvSUQzdjFQYXJzZXIuanMnO1xuaW1wb3J0IHsgQmFzaWNQYXJzZXIgfSBmcm9tICcuLi9jb21tb24vQmFzaWNQYXJzZXIuanMnO1xuY29uc3QgZGVidWcgPSBpbml0RGVidWcoJ211c2ljLW1ldGFkYXRhOnBhcnNlcjpJRDMnKTtcbi8qKlxuICogQWJzdHJhY3QgcGFyc2VyIHdoaWNoIHRyaWVzIHRha2UgSUQzdjIgYW5kIElEM3YxIGhlYWRlcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBBYnN0cmFjdElEM1BhcnNlciBleHRlbmRzIEJhc2ljUGFyc2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5pZDNwYXJzZXIgPSBuZXcgSUQzdjJQYXJzZXIoKTtcbiAgICB9XG4gICAgc3RhdGljIGFzeW5jIHN0YXJ0c1dpdGhJRDN2MkhlYWRlcih0b2tlbml6ZXIpIHtcbiAgICAgICAgcmV0dXJuIChhd2FpdCB0b2tlbml6ZXIucGVla1Rva2VuKElEM3YySGVhZGVyKSkuZmlsZUlkZW50aWZpZXIgPT09ICdJRDMnO1xuICAgIH1cbiAgICBhc3luYyBwYXJzZSgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGFyc2VJRDN2MigpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFbmRPZlN0cmVhbUVycm9yKSB7XG4gICAgICAgICAgICAgICAgZGVidWcoXCJFbmQtb2Ytc3RyZWFtXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZpbmFsaXplKCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlSUQzdjIoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMudHJ5UmVhZElkM3YySGVhZGVycygpO1xuICAgICAgICBkZWJ1ZygnRW5kIG9mIElEM3YyIGhlYWRlciwgZ28gdG8gTVBFRy1wYXJzZXI6IHBvcz0lcycsIHRoaXMudG9rZW5pemVyLnBvc2l0aW9uKTtcbiAgICAgICAgYXdhaXQgdGhpcy5wb3N0SWQzdjJQYXJzZSgpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNraXBQb3N0SGVhZGVycyAmJiB0aGlzLm1ldGFkYXRhLmhhc0FueSgpKSB7XG4gICAgICAgICAgICB0aGlzLmZpbmFsaXplKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBpZDN2MXBhcnNlciA9IG5ldyBJRDN2MVBhcnNlcih0aGlzLm1ldGFkYXRhLCB0aGlzLnRva2VuaXplciwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIGF3YWl0IGlkM3YxcGFyc2VyLnBhcnNlKCk7XG4gICAgICAgICAgICB0aGlzLmZpbmFsaXplKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgdHJ5UmVhZElkM3YySGVhZGVycygpIHtcbiAgICAgICAgY29uc3QgaWQzSGVhZGVyID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucGVla1Rva2VuKElEM3YySGVhZGVyKTtcbiAgICAgICAgaWYgKGlkM0hlYWRlci5maWxlSWRlbnRpZmllciA9PT0gJ0lEMycpIHtcbiAgICAgICAgICAgIGRlYnVnKCdGb3VuZCBJRDN2MiBoZWFkZXIsIHBvcz0lcycsIHRoaXMudG9rZW5pemVyLnBvc2l0aW9uKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuaWQzcGFyc2VyLnBhcnNlKHRoaXMubWV0YWRhdGEsIHRoaXMudG9rZW5pemVyLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJ5UmVhZElkM3YySGVhZGVycygpO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWJzdHJhY3RJRDNQYXJzZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/id3v2/FrameParser.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/id3v2/FrameParser.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FrameParser: () => (/* binding */ FrameParser),\n/* harmony export */   Id3v2ContentError: () => (/* binding */ Id3v2ContentError),\n/* harmony export */   parseGenre: () => (/* binding */ parseGenre)\n/* harmony export */ });\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! debug */ \"(app-pages-browser)/./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/browser.js\");\n/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! token-types */ \"(app-pages-browser)/./node_modules/.pnpm/token-types@6.0.0/node_modules/token-types/lib/index.js\");\n/* harmony import */ var _common_Util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/Util.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/common/Util.js\");\n/* harmony import */ var _ID3v2Token_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ID3v2Token.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/id3v2/ID3v2Token.js\");\n/* harmony import */ var _id3v1_ID3v1Parser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../id3v1/ID3v1Parser.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/id3v1/ID3v1Parser.js\");\n/* harmony import */ var _ParseError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ParseError.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/ParseError.js\");\n\n\n\n\n\n\nconst debug = debug__WEBPACK_IMPORTED_MODULE_0__('music-metadata:id3v2:frame-parser');\nconst defaultEnc = 'latin1'; // latin1 == iso-8859-1;\nfunction parseGenre(origVal) {\n    // match everything inside parentheses\n    const genres = [];\n    let code;\n    let word = '';\n    for (const c of origVal) {\n        if (typeof code === 'string') {\n            if (c === '(' && code === '') {\n                word += '(';\n                code = undefined;\n            }\n            else if (c === ')') {\n                if (word !== '') {\n                    genres.push(word);\n                    word = '';\n                }\n                const genre = parseGenreCode(code);\n                if (genre) {\n                    genres.push(genre);\n                }\n                code = undefined;\n            }\n            else\n                code += c;\n        }\n        else if (c === '(') {\n            code = '';\n        }\n        else {\n            word += c;\n        }\n    }\n    if (word) {\n        if (genres.length === 0 && word.match(/^\\d*$/)) {\n            word = parseGenreCode(word);\n        }\n        if (word) {\n            genres.push(word);\n        }\n    }\n    return genres;\n}\nfunction parseGenreCode(code) {\n    if (code === 'RX')\n        return 'Remix';\n    if (code === 'CR')\n        return 'Cover';\n    if (code.match(/^\\d*$/)) {\n        return _id3v1_ID3v1Parser_js__WEBPACK_IMPORTED_MODULE_4__.Genres[Number.parseInt(code)];\n    }\n}\nclass FrameParser {\n    /**\n     * Create id3v2 frame parser\n     * @param major - Major version, e.g. (4) for  id3v2.4\n     * @param warningCollector - Used to collect decode issue\n     */\n    constructor(major, warningCollector) {\n        this.major = major;\n        this.warningCollector = warningCollector;\n    }\n    readData(uint8Array, type, includeCovers) {\n        if (uint8Array.length === 0) {\n            this.warningCollector.addWarning(`id3v2.${this.major} header has empty tag type=${type}`);\n            return;\n        }\n        const { encoding, bom } = _ID3v2Token_js__WEBPACK_IMPORTED_MODULE_3__.TextEncodingToken.get(uint8Array, 0);\n        const length = uint8Array.length;\n        let offset = 0;\n        let output = []; // ToDo\n        const nullTerminatorLength = FrameParser.getNullTerminatorLength(encoding);\n        let fzero;\n        debug(`Parsing tag type=${type}, encoding=${encoding}, bom=${bom}`);\n        switch (type !== 'TXXX' && type[0] === 'T' ? 'T*' : type) {\n            case 'T*': // 4.2.1. Text information frames - details\n            case 'GRP1': // iTunes-specific ID3v2 grouping field\n            case 'IPLS': // v2.3: Involved people list\n            case 'MVIN':\n            case 'MVNM':\n            case 'PCS':\n            case 'PCST': {\n                let text;\n                try {\n                    text = _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.decodeString(uint8Array.slice(1), encoding).replace(/\\x00+$/, '');\n                }\n                catch (error) {\n                    if (error instanceof Error) {\n                        this.warningCollector.addWarning(`id3v2.${this.major} type=${type} header has invalid string value: ${error.message}`);\n                        break;\n                    }\n                    throw error;\n                }\n                switch (type) {\n                    case 'TMCL': // Musician credits list\n                    case 'TIPL': // Involved people list\n                    case 'IPLS': // Involved people list\n                        output = FrameParser.functionList(this.splitValue(type, text));\n                        break;\n                    case 'TRK':\n                    case 'TRCK':\n                    case 'TPOS':\n                        output = text;\n                        break;\n                    case 'TCOM':\n                    case 'TEXT':\n                    case 'TOLY':\n                    case 'TOPE':\n                    case 'TPE1':\n                    case 'TSRC':\n                        // id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n                        output = this.splitValue(type, text);\n                        break;\n                    case 'TCO':\n                    case 'TCON':\n                        output = this.splitValue(type, text).map(v => parseGenre(v)).reduce((acc, val) => acc.concat(val), []);\n                        break;\n                    case 'PCS':\n                    case 'PCST':\n                        // TODO: Why `default` not results `1` but `''`?\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\n                        output = (Array.isArray(output) && output[0] === '') ? 1 : 0;\n                        break;\n                    default:\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\n                }\n                break;\n            }\n            case 'TXXX': {\n                const idAndData = FrameParser.readIdentifierAndData(uint8Array, offset + 1, length, encoding);\n                const textTag = {\n                    description: idAndData.id,\n                    text: this.splitValue(type, _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.decodeString(idAndData.data, encoding).replace(/\\x00+$/, ''))\n                };\n                output = textTag;\n                break;\n            }\n            case 'PIC':\n            case 'APIC':\n                if (includeCovers) {\n                    const pic = {};\n                    offset += 1;\n                    switch (this.major) {\n                        case 2:\n                            pic.format = _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.decodeString(uint8Array.slice(offset, offset + 3), 'latin1'); // 'latin1'; // latin1 == iso-8859-1;\n                            offset += 3;\n                            break;\n                        case 3:\n                        case 4:\n                            fzero = _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.findZero(uint8Array, offset, length, defaultEnc);\n                            pic.format = _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                            offset = fzero + 1;\n                            break;\n                        default:\n                            throw makeUnexpectedMajorVersionError(this.major);\n                    }\n                    pic.format = FrameParser.fixPictureMimeType(pic.format);\n                    pic.type = _ID3v2Token_js__WEBPACK_IMPORTED_MODULE_3__.AttachedPictureType[uint8Array[offset]];\n                    offset += 1;\n                    fzero = _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.findZero(uint8Array, offset, length, encoding);\n                    pic.description = _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.decodeString(uint8Array.slice(offset, fzero), encoding);\n                    offset = fzero + nullTerminatorLength;\n                    pic.data = uint8Array.slice(offset, length);\n                    output = pic;\n                }\n                break;\n            case 'CNT':\n            case 'PCNT':\n                output = token_types__WEBPACK_IMPORTED_MODULE_1__.UINT32_BE.get(uint8Array, 0);\n                break;\n            case 'SYLT': {\n                const syltHeader = _ID3v2Token_js__WEBPACK_IMPORTED_MODULE_3__.SyncTextHeader.get(uint8Array, 0);\n                offset += _ID3v2Token_js__WEBPACK_IMPORTED_MODULE_3__.SyncTextHeader.len;\n                const result = {\n                    descriptor: '',\n                    language: syltHeader.language,\n                    contentType: syltHeader.contentType,\n                    timeStampFormat: syltHeader.timeStampFormat,\n                    syncText: []\n                };\n                let readSyllables = false;\n                while (offset < length) {\n                    const nullStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), syltHeader.encoding);\n                    offset += nullStr.len;\n                    if (readSyllables) {\n                        const timestamp = token_types__WEBPACK_IMPORTED_MODULE_1__.UINT32_BE.get(uint8Array, offset);\n                        offset += token_types__WEBPACK_IMPORTED_MODULE_1__.UINT32_BE.len;\n                        result.syncText.push({\n                            text: nullStr.text,\n                            timestamp\n                        });\n                    }\n                    else {\n                        result.descriptor = nullStr.text;\n                        readSyllables = true;\n                    }\n                }\n                output = result;\n                break;\n            }\n            case 'ULT':\n            case 'USLT':\n            case 'COM':\n            case 'COMM': {\n                const textHeader = _ID3v2Token_js__WEBPACK_IMPORTED_MODULE_3__.TextHeader.get(uint8Array, offset);\n                offset += _ID3v2Token_js__WEBPACK_IMPORTED_MODULE_3__.TextHeader.len;\n                const descriptorStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), textHeader.encoding);\n                offset += descriptorStr.len;\n                const textStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), textHeader.encoding);\n                const comment = {\n                    language: textHeader.language,\n                    descriptor: descriptorStr.text,\n                    text: textStr.text\n                };\n                output = comment;\n                break;\n            }\n            case 'UFID': {\n                const ufid = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);\n                output = { owner_identifier: ufid.id, identifier: ufid.data };\n                break;\n            }\n            case 'PRIV': { // private frame\n                const priv = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);\n                output = { owner_identifier: priv.id, data: priv.data };\n                break;\n            }\n            case 'POPM': { // Popularimeter\n                fzero = _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.findZero(uint8Array, offset, length, defaultEnc);\n                const email = _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                const dataLen = length - offset;\n                output = {\n                    email,\n                    rating: token_types__WEBPACK_IMPORTED_MODULE_1__.UINT8.get(uint8Array, offset),\n                    counter: dataLen >= 5 ? token_types__WEBPACK_IMPORTED_MODULE_1__.UINT32_BE.get(uint8Array, offset + 1) : undefined\n                };\n                break;\n            }\n            case 'GEOB': { // General encapsulated object\n                fzero = _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.findZero(uint8Array, offset + 1, length, encoding);\n                const mimeType = _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.decodeString(uint8Array.slice(offset + 1, fzero), defaultEnc);\n                offset = fzero + 1;\n                fzero = _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.findZero(uint8Array, offset, length, encoding);\n                const filename = _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                fzero = _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.findZero(uint8Array, offset, length, encoding);\n                const description = _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                const geob = {\n                    type: mimeType,\n                    filename,\n                    description,\n                    data: uint8Array.slice(offset, length)\n                };\n                output = geob;\n                break;\n            }\n            // W-Frames:\n            case 'WCOM':\n            case 'WCOP':\n            case 'WOAF':\n            case 'WOAR':\n            case 'WOAS':\n            case 'WORS':\n            case 'WPAY':\n            case 'WPUB':\n                // Decode URL\n                fzero = _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.findZero(uint8Array, offset + 1, length, encoding);\n                output = _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.decodeString(uint8Array.slice(offset, fzero), defaultEnc);\n                break;\n            case 'WXXX': {\n                // Decode URL\n                fzero = _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.findZero(uint8Array, offset + 1, length, encoding);\n                const description = _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.decodeString(uint8Array.slice(offset + 1, fzero), encoding);\n                offset = fzero + (encoding === 'utf-16le' ? 2 : 1);\n                output = { description, url: _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.decodeString(uint8Array.slice(offset, length), defaultEnc) };\n                break;\n            }\n            case 'WFD':\n            case 'WFED':\n                output = _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.decodeString(uint8Array.slice(offset + 1, _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.findZero(uint8Array, offset + 1, length, encoding)), encoding);\n                break;\n            case 'MCDI': {\n                // Music CD identifier\n                output = uint8Array.slice(0, length);\n                break;\n            }\n            default:\n                debug(`Warning: unsupported id3v2-tag-type: ${type}`);\n                break;\n        }\n        return output;\n    }\n    static readNullTerminatedString(uint8Array, encoding) {\n        let offset = encoding.bom ? 2 : 0;\n        const zeroIndex = _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.findZero(uint8Array, offset, uint8Array.length, encoding.encoding);\n        const txt = uint8Array.slice(offset, zeroIndex);\n        if (encoding.encoding === 'utf-16le') {\n            offset = zeroIndex + 2;\n        }\n        else {\n            offset = zeroIndex + 1;\n        }\n        return {\n            text: _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.decodeString(txt, encoding.encoding),\n            len: offset\n        };\n    }\n    static fixPictureMimeType(pictureType) {\n        pictureType = pictureType.toLocaleLowerCase();\n        switch (pictureType) {\n            case 'jpg':\n                return 'image/jpeg';\n            case 'png':\n                return 'image/png';\n        }\n        return pictureType;\n    }\n    /**\n     * Converts TMCL (Musician credits list) or TIPL (Involved people list)\n     * @param entries\n     */\n    static functionList(entries) {\n        const res = {};\n        for (let i = 0; i + 1 < entries.length; i += 2) {\n            const names = entries[i + 1].split(',');\n            res[entries[i]] = res[entries[i]] ? res[entries[i]].concat(names) : names;\n        }\n        return res;\n    }\n    /**\n     * id3v2.4 defines that multiple T* values are separated by 0x00\n     * id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n     * @param tag - Tag name\n     * @param text - Concatenated tag value\n     * @returns Split tag value\n     */\n    splitValue(tag, text) {\n        let values;\n        if (this.major < 4) {\n            values = text.split(/\\x00/g);\n            if (values.length > 1) {\n                this.warningCollector.addWarning(`ID3v2.${this.major} ${tag} uses non standard null-separator.`);\n            }\n            else {\n                values = text.split(/\\//g);\n            }\n        }\n        else {\n            values = text.split(/\\x00/g);\n        }\n        return FrameParser.trimArray(values);\n    }\n    static trimArray(values) {\n        return values.map(value => value.replace(/\\x00+$/, '').trim());\n    }\n    static readIdentifierAndData(uint8Array, offset, length, encoding) {\n        const fzero = _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.findZero(uint8Array, offset, length, encoding);\n        const id = _common_Util_js__WEBPACK_IMPORTED_MODULE_2__.decodeString(uint8Array.slice(offset, fzero), encoding);\n        offset = fzero + FrameParser.getNullTerminatorLength(encoding);\n        return { id, data: uint8Array.slice(offset, length) };\n    }\n    static getNullTerminatorLength(enc) {\n        return enc === 'utf-16le' ? 2 : 1;\n    }\n}\nclass Id3v2ContentError extends (0,_ParseError_js__WEBPACK_IMPORTED_MODULE_5__.makeUnexpectedFileContentError)('id3v2') {\n}\nfunction makeUnexpectedMajorVersionError(majorVer) {\n    throw new Id3v2ContentError(`Unexpected majorVer: ${majorVer}`);\n}\n//# sourceMappingURL=FrameParser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/id3v2/FrameParser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/id3v2/ID3v2Parser.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/id3v2/ID3v2Parser.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ID3v2Parser: () => (/* binding */ ID3v2Parser)\n/* harmony export */ });\n/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! token-types */ \"(app-pages-browser)/./node_modules/.pnpm/token-types@6.0.0/node_modules/token-types/lib/index.js\");\n/* harmony import */ var _common_Util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/Util.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/common/Util.js\");\n/* harmony import */ var _FrameParser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FrameParser.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/id3v2/FrameParser.js\");\n/* harmony import */ var _ID3v2Token_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ID3v2Token.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/id3v2/ID3v2Token.js\");\n\n\n\n\nconst asciiDecoder = new TextDecoder('ascii');\nclass ID3v2Parser {\n    constructor() {\n        this.tokenizer = undefined;\n        this.id3Header = undefined;\n        this.metadata = undefined;\n        this.headerType = undefined;\n        this.options = undefined;\n    }\n    static removeUnsyncBytes(buffer) {\n        let readI = 0;\n        let writeI = 0;\n        while (readI < buffer.length - 1) {\n            if (readI !== writeI) {\n                buffer[writeI] = buffer[readI];\n            }\n            readI += (buffer[readI] === 0xFF && buffer[readI + 1] === 0) ? 2 : 1;\n            writeI++;\n        }\n        if (readI < buffer.length) {\n            buffer[writeI++] = buffer[readI];\n        }\n        return buffer.slice(0, writeI);\n    }\n    static getFrameHeaderLength(majorVer) {\n        switch (majorVer) {\n            case 2:\n                return 6;\n            case 3:\n            case 4:\n                return 10;\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n    }\n    static readFrameFlags(b) {\n        return {\n            status: {\n                tag_alter_preservation: _common_Util_js__WEBPACK_IMPORTED_MODULE_1__.getBit(b, 0, 6),\n                file_alter_preservation: _common_Util_js__WEBPACK_IMPORTED_MODULE_1__.getBit(b, 0, 5),\n                read_only: _common_Util_js__WEBPACK_IMPORTED_MODULE_1__.getBit(b, 0, 4)\n            },\n            format: {\n                grouping_identity: _common_Util_js__WEBPACK_IMPORTED_MODULE_1__.getBit(b, 1, 7),\n                compression: _common_Util_js__WEBPACK_IMPORTED_MODULE_1__.getBit(b, 1, 3),\n                encryption: _common_Util_js__WEBPACK_IMPORTED_MODULE_1__.getBit(b, 1, 2),\n                unsynchronisation: _common_Util_js__WEBPACK_IMPORTED_MODULE_1__.getBit(b, 1, 1),\n                data_length_indicator: _common_Util_js__WEBPACK_IMPORTED_MODULE_1__.getBit(b, 1, 0)\n            }\n        };\n    }\n    static readFrameData(uint8Array, frameHeader, majorVer, includeCovers, warningCollector) {\n        const frameParser = new _FrameParser_js__WEBPACK_IMPORTED_MODULE_2__.FrameParser(majorVer, warningCollector);\n        switch (majorVer) {\n            case 2:\n                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n            case 3:\n            case 4:\n                if (frameHeader.flags?.format.unsynchronisation) {\n                    uint8Array = ID3v2Parser.removeUnsyncBytes(uint8Array);\n                }\n                if (frameHeader.flags?.format.data_length_indicator) {\n                    uint8Array = uint8Array.slice(4, uint8Array.length);\n                }\n                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n    }\n    /**\n     * Create a combined tag key, of tag & description\n     * @param tag e.g.: COM\n     * @param description e.g. iTunPGAP\n     * @returns string e.g. COM:iTunPGAP\n     */\n    static makeDescriptionTagName(tag, description) {\n        return tag + (description ? `:${description}` : '');\n    }\n    async parse(metadata, tokenizer, options) {\n        this.tokenizer = tokenizer;\n        this.metadata = metadata;\n        this.options = options;\n        const id3Header = await this.tokenizer.readToken(_ID3v2Token_js__WEBPACK_IMPORTED_MODULE_3__.ID3v2Header);\n        if (id3Header.fileIdentifier !== 'ID3') {\n            throw new _FrameParser_js__WEBPACK_IMPORTED_MODULE_2__.Id3v2ContentError('expected ID3-header file-identifier \\'ID3\\' was not found');\n        }\n        this.id3Header = id3Header;\n        this.headerType = (`ID3v2.${id3Header.version.major}`);\n        return id3Header.flags.isExtendedHeader ? this.parseExtendedHeader() : this.parseId3Data(id3Header.size);\n    }\n    async parseExtendedHeader() {\n        const extendedHeader = await this.tokenizer.readToken(_ID3v2Token_js__WEBPACK_IMPORTED_MODULE_3__.ExtendedHeader);\n        const dataRemaining = extendedHeader.size - _ID3v2Token_js__WEBPACK_IMPORTED_MODULE_3__.ExtendedHeader.len;\n        return dataRemaining > 0 ? this.parseExtendedHeaderData(dataRemaining, extendedHeader.size) : this.parseId3Data(this.id3Header.size - extendedHeader.size);\n    }\n    async parseExtendedHeaderData(dataRemaining, extendedHeaderSize) {\n        await this.tokenizer.ignore(dataRemaining);\n        return this.parseId3Data(this.id3Header.size - extendedHeaderSize);\n    }\n    async parseId3Data(dataLen) {\n        const uint8Array = await this.tokenizer.readToken(new token_types__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayType(dataLen));\n        for (const tag of this.parseMetadata(uint8Array)) {\n            switch (tag.id) {\n                case 'TXXX':\n                    if (tag.value) {\n                        await this.handleTag(tag, tag.value.text, () => tag.value.description);\n                    }\n                    break;\n                default:\n                    await (Array.isArray(tag.value) ? Promise.all(tag.value.map(value => this.addTag(tag.id, value))) : this.addTag(tag.id, tag.value));\n            }\n        }\n    }\n    async handleTag(tag, values, descriptor, resolveValue = value => value) {\n        await Promise.all(values.map(value => this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, descriptor(value)), resolveValue(value))));\n    }\n    async addTag(id, value) {\n        await this.metadata.addTag(this.headerType, id, value);\n    }\n    parseMetadata(data) {\n        let offset = 0;\n        const tags = [];\n        while (true) {\n            if (offset === data.length)\n                break;\n            const frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);\n            if (offset + frameHeaderLength > data.length) {\n                this.metadata.addWarning('Illegal ID3v2 tag length');\n                break;\n            }\n            const frameHeaderBytes = data.slice(offset, offset + frameHeaderLength);\n            offset += frameHeaderLength;\n            const frameHeader = this.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);\n            const frameDataBytes = data.slice(offset, offset + frameHeader.length);\n            offset += frameHeader.length;\n            const values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers, this.metadata);\n            if (values) {\n                tags.push({ id: frameHeader.id, value: values });\n            }\n        }\n        return tags;\n    }\n    readFrameHeader(uint8Array, majorVer) {\n        let header;\n        switch (majorVer) {\n            case 2:\n                header = {\n                    id: asciiDecoder.decode(uint8Array.slice(0, 3)),\n                    length: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT24_BE.get(uint8Array, 3)\n                };\n                if (!header.id.match(/[A-Z0-9]{3}/g)) {\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n                }\n                break;\n            case 3:\n            case 4:\n                header = {\n                    id: asciiDecoder.decode(uint8Array.slice(0, 4)),\n                    length: (majorVer === 4 ? _ID3v2Token_js__WEBPACK_IMPORTED_MODULE_3__.UINT32SYNCSAFE : token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE).get(uint8Array, 4),\n                    flags: ID3v2Parser.readFrameFlags(uint8Array.slice(8, 10))\n                };\n                if (!header.id.match(/[A-Z0-9]{4}/g)) {\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n                }\n                break;\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n        return header;\n    }\n}\nfunction makeUnexpectedMajorVersionError(majorVer) {\n    throw new _FrameParser_js__WEBPACK_IMPORTED_MODULE_2__.Id3v2ContentError(`Unexpected majorVer: ${majorVer}`);\n}\n//# sourceMappingURL=ID3v2Parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tdXNpYy1tZXRhZGF0YUAxMC43LjAvbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9pZDN2Mi9JRDN2MlBhcnNlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFxQztBQUNLO0FBQ3dCO0FBQ1k7QUFDOUU7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxtREFBVztBQUNuRCx5Q0FBeUMsbURBQVc7QUFDcEQsMkJBQTJCLG1EQUFXO0FBQ3RDLGFBQWE7QUFDYjtBQUNBLG1DQUFtQyxtREFBVztBQUM5Qyw2QkFBNkIsbURBQVc7QUFDeEMsNEJBQTRCLG1EQUFXO0FBQ3ZDLG1DQUFtQyxtREFBVztBQUM5Qyx1Q0FBdUMsbURBQVc7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0Msd0RBQVc7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxZQUFZO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsdURBQVc7QUFDcEU7QUFDQSxzQkFBc0IsOERBQWlCO0FBQ3ZDO0FBQ0E7QUFDQSxvQ0FBb0Msd0JBQXdCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCwwREFBYztBQUM1RSxvREFBb0QsMERBQWM7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsdURBQW9CO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixtQ0FBbUM7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsa0RBQWU7QUFDM0M7QUFDQSwrQ0FBK0MsRUFBRTtBQUNqRCw4REFBOEQsOEJBQThCLG1CQUFtQixVQUFVO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QywwREFBYyxHQUFHLGtEQUFlO0FBQzlFO0FBQ0E7QUFDQSwrQ0FBK0MsRUFBRTtBQUNqRCw4REFBOEQsOEJBQThCLG1CQUFtQixVQUFVO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOERBQWlCLHlCQUF5QixTQUFTO0FBQ2pFO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2xpbGFzL0J1cmVhdS9EZXYvTE1QL25vZGVfbW9kdWxlcy8ucG5wbS9tdXNpYy1tZXRhZGF0YUAxMC43LjAvbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9pZDN2Mi9JRDN2MlBhcnNlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBUb2tlbiBmcm9tICd0b2tlbi10eXBlcyc7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uL2NvbW1vbi9VdGlsLmpzJztcbmltcG9ydCB7IEZyYW1lUGFyc2VyLCBJZDN2MkNvbnRlbnRFcnJvciB9IGZyb20gJy4vRnJhbWVQYXJzZXIuanMnO1xuaW1wb3J0IHsgRXh0ZW5kZWRIZWFkZXIsIElEM3YySGVhZGVyLCBVSU5UMzJTWU5DU0FGRSB9IGZyb20gJy4vSUQzdjJUb2tlbi5qcyc7XG5jb25zdCBhc2NpaURlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoJ2FzY2lpJyk7XG5leHBvcnQgY2xhc3MgSUQzdjJQYXJzZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnRva2VuaXplciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5pZDNIZWFkZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaGVhZGVyVHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBzdGF0aWMgcmVtb3ZlVW5zeW5jQnl0ZXMoYnVmZmVyKSB7XG4gICAgICAgIGxldCByZWFkSSA9IDA7XG4gICAgICAgIGxldCB3cml0ZUkgPSAwO1xuICAgICAgICB3aGlsZSAocmVhZEkgPCBidWZmZXIubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgaWYgKHJlYWRJICE9PSB3cml0ZUkpIHtcbiAgICAgICAgICAgICAgICBidWZmZXJbd3JpdGVJXSA9IGJ1ZmZlcltyZWFkSV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWFkSSArPSAoYnVmZmVyW3JlYWRJXSA9PT0gMHhGRiAmJiBidWZmZXJbcmVhZEkgKyAxXSA9PT0gMCkgPyAyIDogMTtcbiAgICAgICAgICAgIHdyaXRlSSsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZWFkSSA8IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICAgIGJ1ZmZlclt3cml0ZUkrK10gPSBidWZmZXJbcmVhZEldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWZmZXIuc2xpY2UoMCwgd3JpdGVJKTtcbiAgICB9XG4gICAgc3RhdGljIGdldEZyYW1lSGVhZGVyTGVuZ3RoKG1ham9yVmVyKSB7XG4gICAgICAgIHN3aXRjaCAobWFqb3JWZXIpIHtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gNjtcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICByZXR1cm4gMTA7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG1ha2VVbmV4cGVjdGVkTWFqb3JWZXJzaW9uRXJyb3IobWFqb3JWZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyByZWFkRnJhbWVGbGFncyhiKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0dXM6IHtcbiAgICAgICAgICAgICAgICB0YWdfYWx0ZXJfcHJlc2VydmF0aW9uOiB1dGlsLmdldEJpdChiLCAwLCA2KSxcbiAgICAgICAgICAgICAgICBmaWxlX2FsdGVyX3ByZXNlcnZhdGlvbjogdXRpbC5nZXRCaXQoYiwgMCwgNSksXG4gICAgICAgICAgICAgICAgcmVhZF9vbmx5OiB1dGlsLmdldEJpdChiLCAwLCA0KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZvcm1hdDoge1xuICAgICAgICAgICAgICAgIGdyb3VwaW5nX2lkZW50aXR5OiB1dGlsLmdldEJpdChiLCAxLCA3KSxcbiAgICAgICAgICAgICAgICBjb21wcmVzc2lvbjogdXRpbC5nZXRCaXQoYiwgMSwgMyksXG4gICAgICAgICAgICAgICAgZW5jcnlwdGlvbjogdXRpbC5nZXRCaXQoYiwgMSwgMiksXG4gICAgICAgICAgICAgICAgdW5zeW5jaHJvbmlzYXRpb246IHV0aWwuZ2V0Qml0KGIsIDEsIDEpLFxuICAgICAgICAgICAgICAgIGRhdGFfbGVuZ3RoX2luZGljYXRvcjogdXRpbC5nZXRCaXQoYiwgMSwgMClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgc3RhdGljIHJlYWRGcmFtZURhdGEodWludDhBcnJheSwgZnJhbWVIZWFkZXIsIG1ham9yVmVyLCBpbmNsdWRlQ292ZXJzLCB3YXJuaW5nQ29sbGVjdG9yKSB7XG4gICAgICAgIGNvbnN0IGZyYW1lUGFyc2VyID0gbmV3IEZyYW1lUGFyc2VyKG1ham9yVmVyLCB3YXJuaW5nQ29sbGVjdG9yKTtcbiAgICAgICAgc3dpdGNoIChtYWpvclZlcikge1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHJldHVybiBmcmFtZVBhcnNlci5yZWFkRGF0YSh1aW50OEFycmF5LCBmcmFtZUhlYWRlci5pZCwgaW5jbHVkZUNvdmVycyk7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgaWYgKGZyYW1lSGVhZGVyLmZsYWdzPy5mb3JtYXQudW5zeW5jaHJvbmlzYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdWludDhBcnJheSA9IElEM3YyUGFyc2VyLnJlbW92ZVVuc3luY0J5dGVzKHVpbnQ4QXJyYXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZnJhbWVIZWFkZXIuZmxhZ3M/LmZvcm1hdC5kYXRhX2xlbmd0aF9pbmRpY2F0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdWludDhBcnJheSA9IHVpbnQ4QXJyYXkuc2xpY2UoNCwgdWludDhBcnJheS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZnJhbWVQYXJzZXIucmVhZERhdGEodWludDhBcnJheSwgZnJhbWVIZWFkZXIuaWQsIGluY2x1ZGVDb3ZlcnMpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBtYWtlVW5leHBlY3RlZE1ham9yVmVyc2lvbkVycm9yKG1ham9yVmVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBjb21iaW5lZCB0YWcga2V5LCBvZiB0YWcgJiBkZXNjcmlwdGlvblxuICAgICAqIEBwYXJhbSB0YWcgZS5nLjogQ09NXG4gICAgICogQHBhcmFtIGRlc2NyaXB0aW9uIGUuZy4gaVR1blBHQVBcbiAgICAgKiBAcmV0dXJucyBzdHJpbmcgZS5nLiBDT006aVR1blBHQVBcbiAgICAgKi9cbiAgICBzdGF0aWMgbWFrZURlc2NyaXB0aW9uVGFnTmFtZSh0YWcsIGRlc2NyaXB0aW9uKSB7XG4gICAgICAgIHJldHVybiB0YWcgKyAoZGVzY3JpcHRpb24gPyBgOiR7ZGVzY3JpcHRpb259YCA6ICcnKTtcbiAgICB9XG4gICAgYXN5bmMgcGFyc2UobWV0YWRhdGEsIHRva2VuaXplciwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLnRva2VuaXplciA9IHRva2VuaXplcjtcbiAgICAgICAgdGhpcy5tZXRhZGF0YSA9IG1ldGFkYXRhO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBpZDNIZWFkZXIgPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4oSUQzdjJIZWFkZXIpO1xuICAgICAgICBpZiAoaWQzSGVhZGVyLmZpbGVJZGVudGlmaWVyICE9PSAnSUQzJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IElkM3YyQ29udGVudEVycm9yKCdleHBlY3RlZCBJRDMtaGVhZGVyIGZpbGUtaWRlbnRpZmllciBcXCdJRDNcXCcgd2FzIG5vdCBmb3VuZCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaWQzSGVhZGVyID0gaWQzSGVhZGVyO1xuICAgICAgICB0aGlzLmhlYWRlclR5cGUgPSAoYElEM3YyLiR7aWQzSGVhZGVyLnZlcnNpb24ubWFqb3J9YCk7XG4gICAgICAgIHJldHVybiBpZDNIZWFkZXIuZmxhZ3MuaXNFeHRlbmRlZEhlYWRlciA/IHRoaXMucGFyc2VFeHRlbmRlZEhlYWRlcigpIDogdGhpcy5wYXJzZUlkM0RhdGEoaWQzSGVhZGVyLnNpemUpO1xuICAgIH1cbiAgICBhc3luYyBwYXJzZUV4dGVuZGVkSGVhZGVyKCkge1xuICAgICAgICBjb25zdCBleHRlbmRlZEhlYWRlciA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihFeHRlbmRlZEhlYWRlcik7XG4gICAgICAgIGNvbnN0IGRhdGFSZW1haW5pbmcgPSBleHRlbmRlZEhlYWRlci5zaXplIC0gRXh0ZW5kZWRIZWFkZXIubGVuO1xuICAgICAgICByZXR1cm4gZGF0YVJlbWFpbmluZyA+IDAgPyB0aGlzLnBhcnNlRXh0ZW5kZWRIZWFkZXJEYXRhKGRhdGFSZW1haW5pbmcsIGV4dGVuZGVkSGVhZGVyLnNpemUpIDogdGhpcy5wYXJzZUlkM0RhdGEodGhpcy5pZDNIZWFkZXIuc2l6ZSAtIGV4dGVuZGVkSGVhZGVyLnNpemUpO1xuICAgIH1cbiAgICBhc3luYyBwYXJzZUV4dGVuZGVkSGVhZGVyRGF0YShkYXRhUmVtYWluaW5nLCBleHRlbmRlZEhlYWRlclNpemUpIHtcbiAgICAgICAgYXdhaXQgdGhpcy50b2tlbml6ZXIuaWdub3JlKGRhdGFSZW1haW5pbmcpO1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUlkM0RhdGEodGhpcy5pZDNIZWFkZXIuc2l6ZSAtIGV4dGVuZGVkSGVhZGVyU2l6ZSk7XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlSWQzRGF0YShkYXRhTGVuKSB7XG4gICAgICAgIGNvbnN0IHVpbnQ4QXJyYXkgPSBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkVG9rZW4obmV3IFRva2VuLlVpbnQ4QXJyYXlUeXBlKGRhdGFMZW4pKTtcbiAgICAgICAgZm9yIChjb25zdCB0YWcgb2YgdGhpcy5wYXJzZU1ldGFkYXRhKHVpbnQ4QXJyYXkpKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZy5pZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ1RYWFgnOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFnLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmhhbmRsZVRhZyh0YWcsIHRhZy52YWx1ZS50ZXh0LCAoKSA9PiB0YWcudmFsdWUuZGVzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IChBcnJheS5pc0FycmF5KHRhZy52YWx1ZSkgPyBQcm9taXNlLmFsbCh0YWcudmFsdWUubWFwKHZhbHVlID0+IHRoaXMuYWRkVGFnKHRhZy5pZCwgdmFsdWUpKSkgOiB0aGlzLmFkZFRhZyh0YWcuaWQsIHRhZy52YWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGhhbmRsZVRhZyh0YWcsIHZhbHVlcywgZGVzY3JpcHRvciwgcmVzb2x2ZVZhbHVlID0gdmFsdWUgPT4gdmFsdWUpIHtcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwodmFsdWVzLm1hcCh2YWx1ZSA9PiB0aGlzLmFkZFRhZyhJRDN2MlBhcnNlci5tYWtlRGVzY3JpcHRpb25UYWdOYW1lKHRhZy5pZCwgZGVzY3JpcHRvcih2YWx1ZSkpLCByZXNvbHZlVmFsdWUodmFsdWUpKSkpO1xuICAgIH1cbiAgICBhc3luYyBhZGRUYWcoaWQsIHZhbHVlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubWV0YWRhdGEuYWRkVGFnKHRoaXMuaGVhZGVyVHlwZSwgaWQsIHZhbHVlKTtcbiAgICB9XG4gICAgcGFyc2VNZXRhZGF0YShkYXRhKSB7XG4gICAgICAgIGxldCBvZmZzZXQgPSAwO1xuICAgICAgICBjb25zdCB0YWdzID0gW107XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBpZiAob2Zmc2V0ID09PSBkYXRhLmxlbmd0aClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNvbnN0IGZyYW1lSGVhZGVyTGVuZ3RoID0gSUQzdjJQYXJzZXIuZ2V0RnJhbWVIZWFkZXJMZW5ndGgodGhpcy5pZDNIZWFkZXIudmVyc2lvbi5tYWpvcik7XG4gICAgICAgICAgICBpZiAob2Zmc2V0ICsgZnJhbWVIZWFkZXJMZW5ndGggPiBkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuYWRkV2FybmluZygnSWxsZWdhbCBJRDN2MiB0YWcgbGVuZ3RoJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBmcmFtZUhlYWRlckJ5dGVzID0gZGF0YS5zbGljZShvZmZzZXQsIG9mZnNldCArIGZyYW1lSGVhZGVyTGVuZ3RoKTtcbiAgICAgICAgICAgIG9mZnNldCArPSBmcmFtZUhlYWRlckxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IGZyYW1lSGVhZGVyID0gdGhpcy5yZWFkRnJhbWVIZWFkZXIoZnJhbWVIZWFkZXJCeXRlcywgdGhpcy5pZDNIZWFkZXIudmVyc2lvbi5tYWpvcik7XG4gICAgICAgICAgICBjb25zdCBmcmFtZURhdGFCeXRlcyA9IGRhdGEuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBmcmFtZUhlYWRlci5sZW5ndGgpO1xuICAgICAgICAgICAgb2Zmc2V0ICs9IGZyYW1lSGVhZGVyLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IElEM3YyUGFyc2VyLnJlYWRGcmFtZURhdGEoZnJhbWVEYXRhQnl0ZXMsIGZyYW1lSGVhZGVyLCB0aGlzLmlkM0hlYWRlci52ZXJzaW9uLm1ham9yLCAhdGhpcy5vcHRpb25zLnNraXBDb3ZlcnMsIHRoaXMubWV0YWRhdGEpO1xuICAgICAgICAgICAgaWYgKHZhbHVlcykge1xuICAgICAgICAgICAgICAgIHRhZ3MucHVzaCh7IGlkOiBmcmFtZUhlYWRlci5pZCwgdmFsdWU6IHZhbHVlcyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFncztcbiAgICB9XG4gICAgcmVhZEZyYW1lSGVhZGVyKHVpbnQ4QXJyYXksIG1ham9yVmVyKSB7XG4gICAgICAgIGxldCBoZWFkZXI7XG4gICAgICAgIHN3aXRjaCAobWFqb3JWZXIpIHtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBoZWFkZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBhc2NpaURlY29kZXIuZGVjb2RlKHVpbnQ4QXJyYXkuc2xpY2UoMCwgMykpLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IFRva2VuLlVJTlQyNF9CRS5nZXQodWludDhBcnJheSwgMylcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmICghaGVhZGVyLmlkLm1hdGNoKC9bQS1aMC05XXszfS9nKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLmFkZFdhcm5pbmcoYEludmFsaWQgSUQzdjIuJHt0aGlzLmlkM0hlYWRlci52ZXJzaW9uLm1ham9yfSBmcmFtZS1oZWFkZXItSUQ6ICR7aGVhZGVyLmlkfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBoZWFkZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBhc2NpaURlY29kZXIuZGVjb2RlKHVpbnQ4QXJyYXkuc2xpY2UoMCwgNCkpLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IChtYWpvclZlciA9PT0gNCA/IFVJTlQzMlNZTkNTQUZFIDogVG9rZW4uVUlOVDMyX0JFKS5nZXQodWludDhBcnJheSwgNCksXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzOiBJRDN2MlBhcnNlci5yZWFkRnJhbWVGbGFncyh1aW50OEFycmF5LnNsaWNlKDgsIDEwKSlcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmICghaGVhZGVyLmlkLm1hdGNoKC9bQS1aMC05XXs0fS9nKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLmFkZFdhcm5pbmcoYEludmFsaWQgSUQzdjIuJHt0aGlzLmlkM0hlYWRlci52ZXJzaW9uLm1ham9yfSBmcmFtZS1oZWFkZXItSUQ6ICR7aGVhZGVyLmlkfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbWFrZVVuZXhwZWN0ZWRNYWpvclZlcnNpb25FcnJvcihtYWpvclZlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhlYWRlcjtcbiAgICB9XG59XG5mdW5jdGlvbiBtYWtlVW5leHBlY3RlZE1ham9yVmVyc2lvbkVycm9yKG1ham9yVmVyKSB7XG4gICAgdGhyb3cgbmV3IElkM3YyQ29udGVudEVycm9yKGBVbmV4cGVjdGVkIG1ham9yVmVyOiAke21ham9yVmVyfWApO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SUQzdjJQYXJzZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/id3v2/ID3v2Parser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mpeg/ExtendedLameHeader.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mpeg/ExtendedLameHeader.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExtendedLameHeader: () => (/* binding */ ExtendedLameHeader)\n/* harmony export */ });\n/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! token-types */ \"(app-pages-browser)/./node_modules/.pnpm/token-types@6.0.0/node_modules/token-types/lib/index.js\");\n/* harmony import */ var _common_Util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/Util.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/common/Util.js\");\n/* harmony import */ var _ReplayGainDataFormat_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ReplayGainDataFormat.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mpeg/ReplayGainDataFormat.js\");\n/**\n * Extended Lame Header\n */\n\n\n\n/**\n * Info Tag\n * @link http://gabriel.mp3-tech.org/mp3infotag.html\n * @link https://github.com/quodlibet/mutagen/blob/abd58ee58772224334a18817c3fb31103572f70e/mutagen/mp3/_util.py#L112\n */\nconst ExtendedLameHeader = {\n    len: 27,\n    get: (buf, off) => {\n        const track_peak = token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buf, off + 2);\n        return {\n            revision: _common_Util_js__WEBPACK_IMPORTED_MODULE_1__.getBitAllignedNumber(buf, off, 0, 4),\n            vbr_method: _common_Util_js__WEBPACK_IMPORTED_MODULE_1__.getBitAllignedNumber(buf, off, 4, 4),\n            lowpass_filter: 100 * token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8.get(buf, off + 1),\n            track_peak: track_peak === 0 ? null : track_peak / 2 ** 23,\n            track_gain: _ReplayGainDataFormat_js__WEBPACK_IMPORTED_MODULE_2__.ReplayGain.get(buf, 6),\n            album_gain: _ReplayGainDataFormat_js__WEBPACK_IMPORTED_MODULE_2__.ReplayGain.get(buf, 8),\n            music_length: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE.get(buf, off + 20),\n            music_crc: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT8.get(buf, off + 24),\n            header_crc: token_types__WEBPACK_IMPORTED_MODULE_0__.UINT16_BE.get(buf, off + 24)\n        };\n    }\n};\n//# sourceMappingURL=ExtendedLameHeader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tdXNpYy1tZXRhZGF0YUAxMC43LjAvbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9tcGVnL0V4dGVuZGVkTGFtZUhlYWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ3FDO0FBQ087QUFDVztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsMkJBQTJCLGtEQUFlO0FBQzFDO0FBQ0Esc0JBQXNCLGlFQUEyQjtBQUNqRCx3QkFBd0IsaUVBQTJCO0FBQ25ELGtDQUFrQyw4Q0FBVztBQUM3QztBQUNBLHdCQUF3QixnRUFBVTtBQUNsQyx3QkFBd0IsZ0VBQVU7QUFDbEMsMEJBQTBCLGtEQUFlO0FBQ3pDLHVCQUF1Qiw4Q0FBVztBQUNsQyx3QkFBd0Isa0RBQWU7QUFDdkM7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2xpbGFzL0J1cmVhdS9EZXYvTE1QL25vZGVfbW9kdWxlcy8ucG5wbS9tdXNpYy1tZXRhZGF0YUAxMC43LjAvbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9tcGVnL0V4dGVuZGVkTGFtZUhlYWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVuZGVkIExhbWUgSGVhZGVyXG4gKi9cbmltcG9ydCAqIGFzIFRva2VuIGZyb20gJ3Rva2VuLXR5cGVzJztcbmltcG9ydCAqIGFzIGNvbW1vbiBmcm9tICcuLi9jb21tb24vVXRpbC5qcyc7XG5pbXBvcnQgeyBSZXBsYXlHYWluIH0gZnJvbSAnLi9SZXBsYXlHYWluRGF0YUZvcm1hdC5qcyc7XG4vKipcbiAqIEluZm8gVGFnXG4gKiBAbGluayBodHRwOi8vZ2FicmllbC5tcDMtdGVjaC5vcmcvbXAzaW5mb3RhZy5odG1sXG4gKiBAbGluayBodHRwczovL2dpdGh1Yi5jb20vcXVvZGxpYmV0L211dGFnZW4vYmxvYi9hYmQ1OGVlNTg3NzIyMjQzMzRhMTg4MTdjM2ZiMzExMDM1NzJmNzBlL211dGFnZW4vbXAzL191dGlsLnB5I0wxMTJcbiAqL1xuZXhwb3J0IGNvbnN0IEV4dGVuZGVkTGFtZUhlYWRlciA9IHtcbiAgICBsZW46IDI3LFxuICAgIGdldDogKGJ1Ziwgb2ZmKSA9PiB7XG4gICAgICAgIGNvbnN0IHRyYWNrX3BlYWsgPSBUb2tlbi5VSU5UMzJfQkUuZ2V0KGJ1Ziwgb2ZmICsgMik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXZpc2lvbjogY29tbW9uLmdldEJpdEFsbGlnbmVkTnVtYmVyKGJ1Ziwgb2ZmLCAwLCA0KSxcbiAgICAgICAgICAgIHZicl9tZXRob2Q6IGNvbW1vbi5nZXRCaXRBbGxpZ25lZE51bWJlcihidWYsIG9mZiwgNCwgNCksXG4gICAgICAgICAgICBsb3dwYXNzX2ZpbHRlcjogMTAwICogVG9rZW4uVUlOVDguZ2V0KGJ1Ziwgb2ZmICsgMSksXG4gICAgICAgICAgICB0cmFja19wZWFrOiB0cmFja19wZWFrID09PSAwID8gbnVsbCA6IHRyYWNrX3BlYWsgLyAyICoqIDIzLFxuICAgICAgICAgICAgdHJhY2tfZ2FpbjogUmVwbGF5R2Fpbi5nZXQoYnVmLCA2KSxcbiAgICAgICAgICAgIGFsYnVtX2dhaW46IFJlcGxheUdhaW4uZ2V0KGJ1ZiwgOCksXG4gICAgICAgICAgICBtdXNpY19sZW5ndGg6IFRva2VuLlVJTlQzMl9CRS5nZXQoYnVmLCBvZmYgKyAyMCksXG4gICAgICAgICAgICBtdXNpY19jcmM6IFRva2VuLlVJTlQ4LmdldChidWYsIG9mZiArIDI0KSxcbiAgICAgICAgICAgIGhlYWRlcl9jcmM6IFRva2VuLlVJTlQxNl9CRS5nZXQoYnVmLCBvZmYgKyAyNClcbiAgICAgICAgfTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RXh0ZW5kZWRMYW1lSGVhZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mpeg/ExtendedLameHeader.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mpeg/MpegParser.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mpeg/MpegParser.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MpegContentError: () => (/* binding */ MpegContentError),\n/* harmony export */   MpegParser: () => (/* binding */ MpegParser)\n/* harmony export */ });\n/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! token-types */ \"(app-pages-browser)/./node_modules/.pnpm/token-types@6.0.0/node_modules/token-types/lib/index.js\");\n/* harmony import */ var strtok3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! strtok3 */ \"(app-pages-browser)/./node_modules/.pnpm/strtok3@10.0.1/node_modules/strtok3/lib/core.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! debug */ \"(app-pages-browser)/./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/browser.js\");\n/* harmony import */ var _common_Util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/Util.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/common/Util.js\");\n/* harmony import */ var _id3v2_AbstractID3Parser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../id3v2/AbstractID3Parser.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js\");\n/* harmony import */ var _XingTag_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./XingTag.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mpeg/XingTag.js\");\n/* harmony import */ var _ParseError_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ParseError.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/ParseError.js\");\n\n\n\n\n\n\n\nconst debug = debug__WEBPACK_IMPORTED_MODULE_2__('music-metadata:parser:mpeg');\nclass MpegContentError extends (0,_ParseError_js__WEBPACK_IMPORTED_MODULE_6__.makeUnexpectedFileContentError)('MPEG') {\n}\n/**\n * Cache buffer size used for searching synchronization preabmle\n */\nconst maxPeekLen = 1024;\n/**\n * MPEG-4 Audio definitions\n * Ref:  https://wiki.multimedia.cx/index.php/MPEG-4_Audio\n */\nconst MPEG4 = {\n    /**\n     * Audio Object Types\n     */\n    AudioObjectTypes: [\n        'AAC Main',\n        'AAC LC', // Low Complexity\n        'AAC SSR', // Scalable Sample Rate\n        'AAC LTP' // Long Term Prediction\n    ],\n    /**\n     * Sampling Frequencies\n     * https://wiki.multimedia.cx/index.php/MPEG-4_Audio#Sampling_Frequencies\n     */\n    SamplingFrequencies: [\n        96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350, null, null, -1\n    ]\n    /**\n     * Channel Configurations\n     */\n};\nconst MPEG4_ChannelConfigurations = [\n    undefined,\n    ['front-center'],\n    ['front-left', 'front-right'],\n    ['front-center', 'front-left', 'front-right'],\n    ['front-center', 'front-left', 'front-right', 'back-center'],\n    ['front-center', 'front-left', 'front-right', 'back-left', 'back-right'],\n    ['front-center', 'front-left', 'front-right', 'back-left', 'back-right', 'LFE-channel'],\n    ['front-center', 'front-left', 'front-right', 'side-left', 'side-right', 'back-left', 'back-right', 'LFE-channel']\n];\n/**\n * MPEG Audio Layer I/II/III frame header\n * Ref: https://www.mp3-tech.org/programmer/frame_header.html\n * Bit layout: AAAAAAAA AAABBCCD EEEEFFGH IIJJKLMM\n * Ref: https://wiki.multimedia.cx/index.php/ADTS\n */\nclass MpegFrameHeader {\n    constructor(buf, off) {\n        // E(15,12): Bitrate index\n        this.bitrateIndex = null;\n        // F(11,10): Sampling rate frequency index\n        this.sampRateFreqIndex = null;\n        // G(9): Padding bit\n        this.padding = null;\n        // H(8): Private bit\n        this.privateBit = null;\n        // I(7,6): Channel Mode\n        this.channelModeIndex = null;\n        // J(5,4): Mode extension (Only used in Joint stereo)\n        this.modeExtension = null;\n        // L(2): Original\n        this.isOriginalMedia = null;\n        this.version = null;\n        this.bitrate = null;\n        this.samplingRate = null;\n        this.frameLength = 0;\n        // B(20,19): MPEG Audio versionIndex ID\n        this.versionIndex = _common_Util_js__WEBPACK_IMPORTED_MODULE_3__.getBitAllignedNumber(buf, off + 1, 3, 2);\n        // C(18,17): Layer description\n        this.layer = MpegFrameHeader.LayerDescription[_common_Util_js__WEBPACK_IMPORTED_MODULE_3__.getBitAllignedNumber(buf, off + 1, 5, 2)];\n        if (this.versionIndex > 1 && this.layer === 0) {\n            this.parseAdtsHeader(buf, off); // Audio Data Transport Stream (ADTS)\n        }\n        else {\n            this.parseMpegHeader(buf, off); // Conventional MPEG header\n        }\n        // D(16): Protection bit (if true 16-bit CRC follows header)\n        this.isProtectedByCRC = !_common_Util_js__WEBPACK_IMPORTED_MODULE_3__.isBitSet(buf, off + 1, 7);\n    }\n    calcDuration(numFrames) {\n        return this.samplingRate == null ? null : (numFrames * this.calcSamplesPerFrame() / this.samplingRate);\n    }\n    calcSamplesPerFrame() {\n        return MpegFrameHeader.samplesInFrameTable[this.version === 1 ? 0 : 1][this.layer];\n    }\n    calculateSideInfoLength() {\n        if (this.layer !== 3)\n            return 2;\n        if (this.channelModeIndex === 3) {\n            // mono\n            if (this.version === 1) {\n                return 17;\n            }\n            if (this.version === 2 || this.version === 2.5) {\n                return 9;\n            }\n        }\n        else {\n            if (this.version === 1) {\n                return 32;\n            }\n            if (this.version === 2 || this.version === 2.5) {\n                return 17;\n            }\n        }\n        return null;\n    }\n    calcSlotSize() {\n        return [null, 4, 1, 1][this.layer];\n    }\n    parseMpegHeader(buf, off) {\n        this.container = 'MPEG';\n        // E(15,12): Bitrate index\n        this.bitrateIndex = _common_Util_js__WEBPACK_IMPORTED_MODULE_3__.getBitAllignedNumber(buf, off + 2, 0, 4);\n        // F(11,10): Sampling rate frequency index\n        this.sampRateFreqIndex = _common_Util_js__WEBPACK_IMPORTED_MODULE_3__.getBitAllignedNumber(buf, off + 2, 4, 2);\n        // G(9): Padding bit\n        this.padding = _common_Util_js__WEBPACK_IMPORTED_MODULE_3__.isBitSet(buf, off + 2, 6);\n        // H(8): Private bit\n        this.privateBit = _common_Util_js__WEBPACK_IMPORTED_MODULE_3__.isBitSet(buf, off + 2, 7);\n        // I(7,6): Channel Mode\n        this.channelModeIndex = _common_Util_js__WEBPACK_IMPORTED_MODULE_3__.getBitAllignedNumber(buf, off + 3, 0, 2);\n        // J(5,4): Mode extension (Only used in Joint stereo)\n        this.modeExtension = _common_Util_js__WEBPACK_IMPORTED_MODULE_3__.getBitAllignedNumber(buf, off + 3, 2, 2);\n        // K(3): Copyright\n        this.isCopyrighted = _common_Util_js__WEBPACK_IMPORTED_MODULE_3__.isBitSet(buf, off + 3, 4);\n        // L(2): Original\n        this.isOriginalMedia = _common_Util_js__WEBPACK_IMPORTED_MODULE_3__.isBitSet(buf, off + 3, 5);\n        // M(3): The original bit indicates, if it is set, that the frame is located on its original media.\n        this.emphasis = _common_Util_js__WEBPACK_IMPORTED_MODULE_3__.getBitAllignedNumber(buf, off + 3, 7, 2);\n        this.version = MpegFrameHeader.VersionID[this.versionIndex];\n        this.channelMode = MpegFrameHeader.ChannelMode[this.channelModeIndex];\n        this.codec = `MPEG ${this.version} Layer ${this.layer}`;\n        // Calculate bitrate\n        const bitrateInKbps = this.calcBitrate();\n        if (!bitrateInKbps) {\n            throw new MpegContentError('Cannot determine bit-rate');\n        }\n        this.bitrate = bitrateInKbps * 1000;\n        // Calculate sampling rate\n        this.samplingRate = this.calcSamplingRate();\n        if (this.samplingRate == null) {\n            throw new MpegContentError('Cannot determine sampling-rate');\n        }\n    }\n    parseAdtsHeader(buf, off) {\n        debug(\"layer=0 => ADTS\");\n        this.version = this.versionIndex === 2 ? 4 : 2;\n        this.container = `ADTS/MPEG-${this.version}`;\n        const profileIndex = _common_Util_js__WEBPACK_IMPORTED_MODULE_3__.getBitAllignedNumber(buf, off + 2, 0, 2);\n        this.codec = 'AAC';\n        this.codecProfile = MPEG4.AudioObjectTypes[profileIndex];\n        debug(`MPEG-4 audio-codec=${this.codec}`);\n        const samplingFrequencyIndex = _common_Util_js__WEBPACK_IMPORTED_MODULE_3__.getBitAllignedNumber(buf, off + 2, 2, 4);\n        this.samplingRate = MPEG4.SamplingFrequencies[samplingFrequencyIndex];\n        debug(`sampling-rate=${this.samplingRate}`);\n        const channelIndex = _common_Util_js__WEBPACK_IMPORTED_MODULE_3__.getBitAllignedNumber(buf, off + 2, 7, 3);\n        this.mp4ChannelConfig = MPEG4_ChannelConfigurations[channelIndex];\n        debug(`channel-config=${this.mp4ChannelConfig ? this.mp4ChannelConfig.join('+') : '?'}`);\n        this.frameLength = _common_Util_js__WEBPACK_IMPORTED_MODULE_3__.getBitAllignedNumber(buf, off + 3, 6, 2) << 11;\n    }\n    calcBitrate() {\n        if (this.bitrateIndex === 0x00 || // free\n            this.bitrateIndex === 0x0F) { // reserved\n            return null;\n        }\n        if (this.version && this.bitrateIndex) {\n            const codecIndex = 10 * Math.floor(this.version) + this.layer;\n            return MpegFrameHeader.bitrate_index[this.bitrateIndex][codecIndex];\n        }\n        return null;\n    }\n    calcSamplingRate() {\n        if (this.sampRateFreqIndex === 0x03 || this.version === null || this.sampRateFreqIndex == null)\n            return null; // 'reserved'\n        return MpegFrameHeader.sampling_rate_freq_index[this.version][this.sampRateFreqIndex];\n    }\n}\nMpegFrameHeader.SyncByte1 = 0xFF;\nMpegFrameHeader.SyncByte2 = 0xE0;\nMpegFrameHeader.VersionID = [2.5, null, 2, 1];\nMpegFrameHeader.LayerDescription = [0, 3, 2, 1];\nMpegFrameHeader.ChannelMode = ['stereo', 'joint_stereo', 'dual_channel', 'mono'];\nMpegFrameHeader.bitrate_index = {\n    1: { 11: 32, 12: 32, 13: 32, 21: 32, 22: 8, 23: 8 },\n    2: { 11: 64, 12: 48, 13: 40, 21: 48, 22: 16, 23: 16 },\n    3: { 11: 96, 12: 56, 13: 48, 21: 56, 22: 24, 23: 24 },\n    4: { 11: 128, 12: 64, 13: 56, 21: 64, 22: 32, 23: 32 },\n    5: { 11: 160, 12: 80, 13: 64, 21: 80, 22: 40, 23: 40 },\n    6: { 11: 192, 12: 96, 13: 80, 21: 96, 22: 48, 23: 48 },\n    7: { 11: 224, 12: 112, 13: 96, 21: 112, 22: 56, 23: 56 },\n    8: { 11: 256, 12: 128, 13: 112, 21: 128, 22: 64, 23: 64 },\n    9: { 11: 288, 12: 160, 13: 128, 21: 144, 22: 80, 23: 80 },\n    10: { 11: 320, 12: 192, 13: 160, 21: 160, 22: 96, 23: 96 },\n    11: { 11: 352, 12: 224, 13: 192, 21: 176, 22: 112, 23: 112 },\n    12: { 11: 384, 12: 256, 13: 224, 21: 192, 22: 128, 23: 128 },\n    13: { 11: 416, 12: 320, 13: 256, 21: 224, 22: 144, 23: 144 },\n    14: { 11: 448, 12: 384, 13: 320, 21: 256, 22: 160, 23: 160 }\n};\nMpegFrameHeader.sampling_rate_freq_index = {\n    1: { 0: 44100, 1: 48000, 2: 32000 },\n    2: { 0: 22050, 1: 24000, 2: 16000 },\n    2.5: { 0: 11025, 1: 12000, 2: 8000 }\n};\nMpegFrameHeader.samplesInFrameTable = [\n    /* Layer   I    II   III */\n    [0, 384, 1152, 1152], // MPEG-1\n    [0, 384, 1152, 576] // MPEG-2(.5\n];\n/**\n * MPEG Audio Layer I/II/III\n */\nconst FrameHeader = {\n    len: 4,\n    get: (buf, off) => {\n        return new MpegFrameHeader(buf, off);\n    }\n};\nfunction getVbrCodecProfile(vbrScale) {\n    return `V${Math.floor((100 - vbrScale) / 10)}`;\n}\nclass MpegParser extends _id3v2_AbstractID3Parser_js__WEBPACK_IMPORTED_MODULE_4__.AbstractID3Parser {\n    constructor() {\n        super(...arguments);\n        this.frameCount = 0;\n        this.syncFrameCount = -1;\n        this.countSkipFrameData = 0;\n        this.totalDataLength = 0;\n        this.bitrates = [];\n        this.offset = 0;\n        this.frame_size = 0;\n        this.crc = null;\n        this.calculateEofDuration = false;\n        this.samplesPerFrame = null;\n        this.buf_frame_header = new Uint8Array(4);\n        /**\n         * Number of bytes already parsed since beginning of stream / file\n         */\n        this.mpegOffset = null;\n        this.syncPeek = {\n            buf: new Uint8Array(maxPeekLen),\n            len: 0\n        };\n    }\n    /**\n     * Called after ID3 headers have been parsed\n     */\n    async postId3v2Parse() {\n        this.metadata.setFormat('lossless', false);\n        try {\n            let quit = false;\n            while (!quit) {\n                await this.sync();\n                quit = await this.parseCommonMpegHeader();\n            }\n        }\n        catch (err) {\n            if (err instanceof strtok3__WEBPACK_IMPORTED_MODULE_1__.EndOfStreamError) {\n                debug(\"End-of-stream\");\n                if (this.calculateEofDuration) {\n                    if (this.samplesPerFrame !== null) {\n                        const numberOfSamples = this.frameCount * this.samplesPerFrame;\n                        this.metadata.setFormat('numberOfSamples', numberOfSamples);\n                        if (this.metadata.format.sampleRate) {\n                            const duration = numberOfSamples / this.metadata.format.sampleRate;\n                            debug(`Calculate duration at EOF: ${duration} sec.`, duration);\n                            this.metadata.setFormat('duration', duration);\n                        }\n                    }\n                }\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    /**\n     * Called after file has been fully parsed, this allows, if present, to exclude the ID3v1.1 header length\n     */\n    finalize() {\n        const format = this.metadata.format;\n        const hasID3v1 = !!this.metadata.native.ID3v1;\n        if (this.mpegOffset !== null) {\n            if (format.duration && this.tokenizer.fileInfo.size) {\n                const mpegSize = this.tokenizer.fileInfo.size - this.mpegOffset - (hasID3v1 ? 128 : 0);\n                if (format.codecProfile && format.codecProfile[0] === 'V') {\n                    this.metadata.setFormat('bitrate', mpegSize * 8 / format.duration);\n                }\n            }\n            if (this.tokenizer.fileInfo.size && format.codecProfile === 'CBR') {\n                const mpegSize = this.tokenizer.fileInfo.size - this.mpegOffset - (hasID3v1 ? 128 : 0);\n                if (this.frame_size !== null && this.samplesPerFrame !== null) {\n                    const numberOfSamples = Math.round(mpegSize / this.frame_size) * this.samplesPerFrame;\n                    this.metadata.setFormat('numberOfSamples', numberOfSamples);\n                    if (format.sampleRate && !format.duration) {\n                        const duration = numberOfSamples / format.sampleRate;\n                        debug(\"Calculate CBR duration based on file size: %s\", duration);\n                        this.metadata.setFormat('duration', duration);\n                    }\n                }\n            }\n        }\n    }\n    async sync() {\n        let gotFirstSync = false;\n        while (true) {\n            let bo = 0;\n            this.syncPeek.len = await this.tokenizer.peekBuffer(this.syncPeek.buf, { length: maxPeekLen, mayBeLess: true });\n            if (this.syncPeek.len <= 163) {\n                throw new strtok3__WEBPACK_IMPORTED_MODULE_1__.EndOfStreamError();\n            }\n            while (true) {\n                if (gotFirstSync && (this.syncPeek.buf[bo] & 0xE0) === 0xE0) {\n                    this.buf_frame_header[0] = MpegFrameHeader.SyncByte1;\n                    this.buf_frame_header[1] = this.syncPeek.buf[bo];\n                    await this.tokenizer.ignore(bo);\n                    debug(`Sync at offset=${this.tokenizer.position - 1}, frameCount=${this.frameCount}`);\n                    if (this.syncFrameCount === this.frameCount) {\n                        debug(`Re-synced MPEG stream, frameCount=${this.frameCount}`);\n                        this.frameCount = 0;\n                        this.frame_size = 0;\n                    }\n                    this.syncFrameCount = this.frameCount;\n                    return; // sync\n                }\n                gotFirstSync = false;\n                bo = this.syncPeek.buf.indexOf(MpegFrameHeader.SyncByte1, bo);\n                if (bo === -1) {\n                    if (this.syncPeek.len < this.syncPeek.buf.length) {\n                        throw new strtok3__WEBPACK_IMPORTED_MODULE_1__.EndOfStreamError();\n                    }\n                    await this.tokenizer.ignore(this.syncPeek.len);\n                    break; // continue with next buffer\n                }\n                ++bo;\n                gotFirstSync = true;\n            }\n        }\n    }\n    /**\n     * Combined ADTS & MPEG (MP2 & MP3) header handling\n     * @return {Promise<boolean>} true if parser should quit\n     */\n    async parseCommonMpegHeader() {\n        if (this.frameCount === 0) {\n            this.mpegOffset = this.tokenizer.position - 1;\n        }\n        await this.tokenizer.peekBuffer(this.buf_frame_header.subarray(1), { length: 3 });\n        let header;\n        try {\n            header = FrameHeader.get(this.buf_frame_header, 0);\n        }\n        catch (err) {\n            await this.tokenizer.ignore(1);\n            if (err instanceof Error) {\n                this.metadata.addWarning(`Parse error: ${err.message}`);\n                return false; // sync\n            }\n            throw err;\n        }\n        await this.tokenizer.ignore(3);\n        this.metadata.setFormat('container', header.container);\n        this.metadata.setFormat('codec', header.codec);\n        this.metadata.setFormat('lossless', false);\n        this.metadata.setFormat('sampleRate', header.samplingRate);\n        this.frameCount++;\n        return header.version !== null && header.version >= 2 && header.layer === 0 ? this.parseAdts(header) : this.parseAudioFrameHeader(header);\n    }\n    /**\n     * @return {Promise<boolean>} true if parser should quit\n     */\n    async parseAudioFrameHeader(header) {\n        this.metadata.setFormat('numberOfChannels', header.channelMode === 'mono' ? 1 : 2);\n        this.metadata.setFormat('bitrate', header.bitrate);\n        if (this.frameCount < 20 * 10000) {\n            debug('offset=%s MP%s bitrate=%s sample-rate=%s', this.tokenizer.position - 4, header.layer, header.bitrate, header.samplingRate);\n        }\n        const slot_size = header.calcSlotSize();\n        if (slot_size === null) {\n            throw new MpegContentError('invalid slot_size');\n        }\n        const samples_per_frame = header.calcSamplesPerFrame();\n        debug(`samples_per_frame=${samples_per_frame}`);\n        const bps = samples_per_frame / 8.0;\n        if (header.bitrate !== null && header.samplingRate != null) {\n            const fsize = (bps * header.bitrate / header.samplingRate) + ((header.padding) ? slot_size : 0);\n            this.frame_size = Math.floor(fsize);\n        }\n        this.audioFrameHeader = header;\n        if (header.bitrate !== null) {\n            this.bitrates.push(header.bitrate);\n        }\n        // xtra header only exists in first frame\n        if (this.frameCount === 1) {\n            this.offset = FrameHeader.len;\n            await this.skipSideInformation();\n            return false;\n        }\n        if (this.frameCount === 3) {\n            // the stream is CBR if the first 3 frame bitrates are the same\n            if (this.areAllSame(this.bitrates)) {\n                // Actual calculation will be done in finalize\n                this.samplesPerFrame = samples_per_frame;\n                this.metadata.setFormat('codecProfile', 'CBR');\n                if (this.tokenizer.fileInfo.size)\n                    return true; // Will calculate duration based on the file size\n            }\n            else if (this.metadata.format.duration) {\n                return true; // We already got the duration, stop processing MPEG stream any further\n            }\n            if (!this.options.duration) {\n                return true; // Enforce duration not enabled, stop processing entire stream\n            }\n        }\n        // once we know the file is VBR attach listener to end of\n        // stream so we can do the duration calculation when we\n        // have counted all the frames\n        if (this.options.duration && this.frameCount === 4) {\n            this.samplesPerFrame = samples_per_frame;\n            this.calculateEofDuration = true;\n        }\n        this.offset = 4;\n        if (header.isProtectedByCRC) {\n            await this.parseCrc();\n            return false;\n        }\n        await this.skipSideInformation();\n        return false;\n    }\n    async parseAdts(header) {\n        const buf = new Uint8Array(3);\n        await this.tokenizer.readBuffer(buf);\n        header.frameLength += _common_Util_js__WEBPACK_IMPORTED_MODULE_3__.getBitAllignedNumber(buf, 0, 0, 11);\n        this.totalDataLength += header.frameLength;\n        this.samplesPerFrame = 1024;\n        if (header.samplingRate !== null) {\n            const framesPerSec = header.samplingRate / this.samplesPerFrame;\n            const bytesPerFrame = this.frameCount === 0 ? 0 : this.totalDataLength / this.frameCount;\n            const bitrate = 8 * bytesPerFrame * framesPerSec + 0.5;\n            this.metadata.setFormat('bitrate', bitrate);\n            debug(`frame-count=${this.frameCount}, size=${header.frameLength} bytes, bit-rate=${bitrate}`);\n        }\n        await this.tokenizer.ignore(header.frameLength > 7 ? header.frameLength - 7 : 1);\n        // Consume remaining header and frame data\n        if (this.frameCount === 3) {\n            this.metadata.setFormat('codecProfile', header.codecProfile);\n            if (header.mp4ChannelConfig) {\n                this.metadata.setFormat('numberOfChannels', header.mp4ChannelConfig.length);\n            }\n            if (this.options.duration) {\n                this.calculateEofDuration = true;\n            }\n            else {\n                return true; // Stop parsing after the third frame\n            }\n        }\n        return false;\n    }\n    async parseCrc() {\n        this.crc = await this.tokenizer.readNumber(token_types__WEBPACK_IMPORTED_MODULE_0__.INT16_BE);\n        this.offset += 2;\n        return this.skipSideInformation();\n    }\n    async skipSideInformation() {\n        if (this.audioFrameHeader) {\n            const sideinfo_length = this.audioFrameHeader.calculateSideInfoLength();\n            if (sideinfo_length !== null) {\n                await this.tokenizer.readToken(new token_types__WEBPACK_IMPORTED_MODULE_0__.Uint8ArrayType(sideinfo_length));\n                // side information\n                this.offset += sideinfo_length;\n                await this.readXtraInfoHeader();\n                return;\n            }\n        }\n    }\n    async readXtraInfoHeader() {\n        const headerTag = await this.tokenizer.readToken(_XingTag_js__WEBPACK_IMPORTED_MODULE_5__.InfoTagHeaderTag);\n        this.offset += _XingTag_js__WEBPACK_IMPORTED_MODULE_5__.InfoTagHeaderTag.len; // 12\n        switch (headerTag) {\n            case 'Info':\n                this.metadata.setFormat('codecProfile', 'CBR');\n                return this.readXingInfoHeader();\n            case 'Xing': {\n                const infoTag = await this.readXingInfoHeader();\n                if (infoTag.vbrScale !== null) {\n                    const codecProfile = getVbrCodecProfile(infoTag.vbrScale);\n                    this.metadata.setFormat('codecProfile', codecProfile);\n                }\n                return null;\n            }\n            case 'Xtra':\n                // ToDo: ???\n                break;\n            case 'LAME': {\n                const version = await this.tokenizer.readToken(_XingTag_js__WEBPACK_IMPORTED_MODULE_5__.LameEncoderVersion);\n                if (this.frame_size !== null && this.frame_size >= this.offset + _XingTag_js__WEBPACK_IMPORTED_MODULE_5__.LameEncoderVersion.len) {\n                    this.offset += _XingTag_js__WEBPACK_IMPORTED_MODULE_5__.LameEncoderVersion.len;\n                    this.metadata.setFormat('tool', `LAME ${version}`);\n                    await this.skipFrameData(this.frame_size - this.offset);\n                    return null;\n                }\n                this.metadata.addWarning('Corrupt LAME header');\n                break;\n            }\n            // ToDo: ???\n        }\n        // ToDo: promise duration???\n        const frameDataLeft = this.frame_size - this.offset;\n        if (frameDataLeft < 0) {\n            this.metadata.addWarning(`Frame ${this.frameCount}corrupt: negative frameDataLeft`);\n        }\n        else {\n            await this.skipFrameData(frameDataLeft);\n        }\n        return null;\n    }\n    /**\n     * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n     * @returns {Promise<string>}\n     */\n    async readXingInfoHeader() {\n        const offset = this.tokenizer.position;\n        const infoTag = await (0,_XingTag_js__WEBPACK_IMPORTED_MODULE_5__.readXingHeader)(this.tokenizer);\n        this.offset += this.tokenizer.position - offset;\n        if (infoTag.lame) {\n            this.metadata.setFormat('tool', `LAME ${_common_Util_js__WEBPACK_IMPORTED_MODULE_3__.stripNulls(infoTag.lame.version)}`);\n            if (infoTag.lame.extended) {\n                // this.metadata.setFormat('trackGain', infoTag.lame.extended.track_gain);\n                this.metadata.setFormat('trackPeakLevel', infoTag.lame.extended.track_peak);\n                if (infoTag.lame.extended.track_gain) {\n                    this.metadata.setFormat('trackGain', infoTag.lame.extended.track_gain.adjustment);\n                }\n                if (infoTag.lame.extended.album_gain) {\n                    this.metadata.setFormat('albumGain', infoTag.lame.extended.album_gain.adjustment);\n                }\n                this.metadata.setFormat('duration', infoTag.lame.extended.music_length / 1000);\n            }\n        }\n        if (infoTag.streamSize && this.audioFrameHeader && infoTag.numFrames !== null) {\n            const duration = this.audioFrameHeader.calcDuration(infoTag.numFrames);\n            this.metadata.setFormat('duration', duration);\n            debug('Get duration from Xing header: %s', this.metadata.format.duration);\n            return infoTag;\n        }\n        // frames field is not present\n        const frameDataLeft = this.frame_size - this.offset;\n        await this.skipFrameData(frameDataLeft);\n        return infoTag;\n    }\n    async skipFrameData(frameDataLeft) {\n        if (frameDataLeft < 0)\n            throw new MpegContentError('frame-data-left cannot be negative');\n        await this.tokenizer.ignore(frameDataLeft);\n        this.countSkipFrameData += frameDataLeft;\n    }\n    areAllSame(array) {\n        const first = array[0];\n        return array.every(element => {\n            return element === first;\n        });\n    }\n}\n//# sourceMappingURL=MpegParser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tdXNpYy1tZXRhZGF0YUAxMC43LjAvbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9tcGVnL01wZWdQYXJzZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQXFDO0FBQ007QUFDYjtBQUNjO0FBQ3NCO0FBQ2tCO0FBQ2xCO0FBQ2xFLGNBQWMsa0NBQVM7QUFDaEIsK0JBQStCLDhFQUE4QjtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixpRUFBMkI7QUFDdkQ7QUFDQSxzREFBc0QsaUVBQTJCO0FBQ2pGO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBLGlDQUFpQyxxREFBZTtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGlFQUEyQjtBQUN2RDtBQUNBLGlDQUFpQyxpRUFBMkI7QUFDNUQ7QUFDQSx1QkFBdUIscURBQWU7QUFDdEM7QUFDQSwwQkFBMEIscURBQWU7QUFDekM7QUFDQSxnQ0FBZ0MsaUVBQTJCO0FBQzNEO0FBQ0EsNkJBQTZCLGlFQUEyQjtBQUN4RDtBQUNBLDZCQUE2QixxREFBZTtBQUM1QztBQUNBLCtCQUErQixxREFBZTtBQUM5QztBQUNBLHdCQUF3QixpRUFBMkI7QUFDbkQ7QUFDQTtBQUNBLDZCQUE2QixjQUFjLFFBQVEsV0FBVztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsYUFBYTtBQUNuRCw2QkFBNkIsaUVBQTJCO0FBQ3hEO0FBQ0E7QUFDQSxvQ0FBb0MsV0FBVztBQUMvQyx1Q0FBdUMsaUVBQTJCO0FBQ2xFO0FBQ0EsK0JBQStCLGtCQUFrQjtBQUNqRCw2QkFBNkIsaUVBQTJCO0FBQ3hEO0FBQ0EsZ0NBQWdDLDhEQUE4RDtBQUM5RiwyQkFBMkIsaUVBQTJCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDhDQUE4QztBQUN2RCxTQUFTLGdEQUFnRDtBQUN6RCxTQUFTLGdEQUFnRDtBQUN6RCxTQUFTLGlEQUFpRDtBQUMxRCxTQUFTLGlEQUFpRDtBQUMxRCxTQUFTLGlEQUFpRDtBQUMxRCxTQUFTLG1EQUFtRDtBQUM1RCxTQUFTLG9EQUFvRDtBQUM3RCxTQUFTLG9EQUFvRDtBQUM3RCxVQUFVLG9EQUFvRDtBQUM5RCxVQUFVLHNEQUFzRDtBQUNoRSxVQUFVLHNEQUFzRDtBQUNoRSxVQUFVLHNEQUFzRDtBQUNoRSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFNBQVMsOEJBQThCO0FBQ3ZDLFNBQVMsOEJBQThCO0FBQ3ZDLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsa0NBQWtDO0FBQ2pEO0FBQ08seUJBQXlCLDBFQUFpQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLHFEQUFnQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxVQUFVO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRkFBcUYscUNBQXFDO0FBQzFIO0FBQ0EsMEJBQTBCLHFEQUFnQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsNEJBQTRCLGVBQWUsZ0JBQWdCO0FBQ3ZHO0FBQ0EsbUVBQW1FLGdCQUFnQjtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLHFEQUFnQjtBQUNsRDtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isa0JBQWtCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RUFBNkUsV0FBVztBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxZQUFZO0FBQ3JFLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isa0JBQWtCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxrQkFBa0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsaUVBQTJCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGdCQUFnQixTQUFTLG9CQUFvQixrQkFBa0IsUUFBUTtBQUN4RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxpREFBYztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCx1REFBb0I7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCx5REFBZ0I7QUFDekUsdUJBQXVCLHlEQUFnQixNQUFNO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStELDJEQUFrQjtBQUNqRixpRkFBaUYsMkRBQWtCO0FBQ25HLG1DQUFtQywyREFBa0I7QUFDckQsNERBQTRELFFBQVE7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxnQkFBZ0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsMkRBQWM7QUFDNUM7QUFDQTtBQUNBLG9EQUFvRCx1REFBaUIsdUJBQXVCO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2xpbGFzL0J1cmVhdS9EZXYvTE1QL25vZGVfbW9kdWxlcy8ucG5wbS9tdXNpYy1tZXRhZGF0YUAxMC43LjAvbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9tcGVnL01wZWdQYXJzZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVG9rZW4gZnJvbSAndG9rZW4tdHlwZXMnO1xuaW1wb3J0IHsgRW5kT2ZTdHJlYW1FcnJvciB9IGZyb20gJ3N0cnRvazMnO1xuaW1wb3J0IGluaXREZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgKiBhcyBjb21tb24gZnJvbSAnLi4vY29tbW9uL1V0aWwuanMnO1xuaW1wb3J0IHsgQWJzdHJhY3RJRDNQYXJzZXIgfSBmcm9tICcuLi9pZDN2Mi9BYnN0cmFjdElEM1BhcnNlci5qcyc7XG5pbXBvcnQgeyBJbmZvVGFnSGVhZGVyVGFnLCBMYW1lRW5jb2RlclZlcnNpb24sIHJlYWRYaW5nSGVhZGVyIH0gZnJvbSAnLi9YaW5nVGFnLmpzJztcbmltcG9ydCB7IG1ha2VVbmV4cGVjdGVkRmlsZUNvbnRlbnRFcnJvciB9IGZyb20gJy4uL1BhcnNlRXJyb3IuanMnO1xuY29uc3QgZGVidWcgPSBpbml0RGVidWcoJ211c2ljLW1ldGFkYXRhOnBhcnNlcjptcGVnJyk7XG5leHBvcnQgY2xhc3MgTXBlZ0NvbnRlbnRFcnJvciBleHRlbmRzIG1ha2VVbmV4cGVjdGVkRmlsZUNvbnRlbnRFcnJvcignTVBFRycpIHtcbn1cbi8qKlxuICogQ2FjaGUgYnVmZmVyIHNpemUgdXNlZCBmb3Igc2VhcmNoaW5nIHN5bmNocm9uaXphdGlvbiBwcmVhYm1sZVxuICovXG5jb25zdCBtYXhQZWVrTGVuID0gMTAyNDtcbi8qKlxuICogTVBFRy00IEF1ZGlvIGRlZmluaXRpb25zXG4gKiBSZWY6ICBodHRwczovL3dpa2kubXVsdGltZWRpYS5jeC9pbmRleC5waHAvTVBFRy00X0F1ZGlvXG4gKi9cbmNvbnN0IE1QRUc0ID0ge1xuICAgIC8qKlxuICAgICAqIEF1ZGlvIE9iamVjdCBUeXBlc1xuICAgICAqL1xuICAgIEF1ZGlvT2JqZWN0VHlwZXM6IFtcbiAgICAgICAgJ0FBQyBNYWluJyxcbiAgICAgICAgJ0FBQyBMQycsIC8vIExvdyBDb21wbGV4aXR5XG4gICAgICAgICdBQUMgU1NSJywgLy8gU2NhbGFibGUgU2FtcGxlIFJhdGVcbiAgICAgICAgJ0FBQyBMVFAnIC8vIExvbmcgVGVybSBQcmVkaWN0aW9uXG4gICAgXSxcbiAgICAvKipcbiAgICAgKiBTYW1wbGluZyBGcmVxdWVuY2llc1xuICAgICAqIGh0dHBzOi8vd2lraS5tdWx0aW1lZGlhLmN4L2luZGV4LnBocC9NUEVHLTRfQXVkaW8jU2FtcGxpbmdfRnJlcXVlbmNpZXNcbiAgICAgKi9cbiAgICBTYW1wbGluZ0ZyZXF1ZW5jaWVzOiBbXG4gICAgICAgIDk2MDAwLCA4ODIwMCwgNjQwMDAsIDQ4MDAwLCA0NDEwMCwgMzIwMDAsIDI0MDAwLCAyMjA1MCwgMTYwMDAsIDEyMDAwLCAxMTAyNSwgODAwMCwgNzM1MCwgbnVsbCwgbnVsbCwgLTFcbiAgICBdXG4gICAgLyoqXG4gICAgICogQ2hhbm5lbCBDb25maWd1cmF0aW9uc1xuICAgICAqL1xufTtcbmNvbnN0IE1QRUc0X0NoYW5uZWxDb25maWd1cmF0aW9ucyA9IFtcbiAgICB1bmRlZmluZWQsXG4gICAgWydmcm9udC1jZW50ZXInXSxcbiAgICBbJ2Zyb250LWxlZnQnLCAnZnJvbnQtcmlnaHQnXSxcbiAgICBbJ2Zyb250LWNlbnRlcicsICdmcm9udC1sZWZ0JywgJ2Zyb250LXJpZ2h0J10sXG4gICAgWydmcm9udC1jZW50ZXInLCAnZnJvbnQtbGVmdCcsICdmcm9udC1yaWdodCcsICdiYWNrLWNlbnRlciddLFxuICAgIFsnZnJvbnQtY2VudGVyJywgJ2Zyb250LWxlZnQnLCAnZnJvbnQtcmlnaHQnLCAnYmFjay1sZWZ0JywgJ2JhY2stcmlnaHQnXSxcbiAgICBbJ2Zyb250LWNlbnRlcicsICdmcm9udC1sZWZ0JywgJ2Zyb250LXJpZ2h0JywgJ2JhY2stbGVmdCcsICdiYWNrLXJpZ2h0JywgJ0xGRS1jaGFubmVsJ10sXG4gICAgWydmcm9udC1jZW50ZXInLCAnZnJvbnQtbGVmdCcsICdmcm9udC1yaWdodCcsICdzaWRlLWxlZnQnLCAnc2lkZS1yaWdodCcsICdiYWNrLWxlZnQnLCAnYmFjay1yaWdodCcsICdMRkUtY2hhbm5lbCddXG5dO1xuLyoqXG4gKiBNUEVHIEF1ZGlvIExheWVyIEkvSUkvSUlJIGZyYW1lIGhlYWRlclxuICogUmVmOiBodHRwczovL3d3dy5tcDMtdGVjaC5vcmcvcHJvZ3JhbW1lci9mcmFtZV9oZWFkZXIuaHRtbFxuICogQml0IGxheW91dDogQUFBQUFBQUEgQUFBQkJDQ0QgRUVFRUZGR0ggSUlKSktMTU1cbiAqIFJlZjogaHR0cHM6Ly93aWtpLm11bHRpbWVkaWEuY3gvaW5kZXgucGhwL0FEVFNcbiAqL1xuY2xhc3MgTXBlZ0ZyYW1lSGVhZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihidWYsIG9mZikge1xuICAgICAgICAvLyBFKDE1LDEyKTogQml0cmF0ZSBpbmRleFxuICAgICAgICB0aGlzLmJpdHJhdGVJbmRleCA9IG51bGw7XG4gICAgICAgIC8vIEYoMTEsMTApOiBTYW1wbGluZyByYXRlIGZyZXF1ZW5jeSBpbmRleFxuICAgICAgICB0aGlzLnNhbXBSYXRlRnJlcUluZGV4ID0gbnVsbDtcbiAgICAgICAgLy8gRyg5KTogUGFkZGluZyBiaXRcbiAgICAgICAgdGhpcy5wYWRkaW5nID0gbnVsbDtcbiAgICAgICAgLy8gSCg4KTogUHJpdmF0ZSBiaXRcbiAgICAgICAgdGhpcy5wcml2YXRlQml0ID0gbnVsbDtcbiAgICAgICAgLy8gSSg3LDYpOiBDaGFubmVsIE1vZGVcbiAgICAgICAgdGhpcy5jaGFubmVsTW9kZUluZGV4ID0gbnVsbDtcbiAgICAgICAgLy8gSig1LDQpOiBNb2RlIGV4dGVuc2lvbiAoT25seSB1c2VkIGluIEpvaW50IHN0ZXJlbylcbiAgICAgICAgdGhpcy5tb2RlRXh0ZW5zaW9uID0gbnVsbDtcbiAgICAgICAgLy8gTCgyKTogT3JpZ2luYWxcbiAgICAgICAgdGhpcy5pc09yaWdpbmFsTWVkaWEgPSBudWxsO1xuICAgICAgICB0aGlzLnZlcnNpb24gPSBudWxsO1xuICAgICAgICB0aGlzLmJpdHJhdGUgPSBudWxsO1xuICAgICAgICB0aGlzLnNhbXBsaW5nUmF0ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZnJhbWVMZW5ndGggPSAwO1xuICAgICAgICAvLyBCKDIwLDE5KTogTVBFRyBBdWRpbyB2ZXJzaW9uSW5kZXggSURcbiAgICAgICAgdGhpcy52ZXJzaW9uSW5kZXggPSBjb21tb24uZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmLCBvZmYgKyAxLCAzLCAyKTtcbiAgICAgICAgLy8gQygxOCwxNyk6IExheWVyIGRlc2NyaXB0aW9uXG4gICAgICAgIHRoaXMubGF5ZXIgPSBNcGVnRnJhbWVIZWFkZXIuTGF5ZXJEZXNjcmlwdGlvbltjb21tb24uZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmLCBvZmYgKyAxLCA1LCAyKV07XG4gICAgICAgIGlmICh0aGlzLnZlcnNpb25JbmRleCA+IDEgJiYgdGhpcy5sYXllciA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5wYXJzZUFkdHNIZWFkZXIoYnVmLCBvZmYpOyAvLyBBdWRpbyBEYXRhIFRyYW5zcG9ydCBTdHJlYW0gKEFEVFMpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBhcnNlTXBlZ0hlYWRlcihidWYsIG9mZik7IC8vIENvbnZlbnRpb25hbCBNUEVHIGhlYWRlclxuICAgICAgICB9XG4gICAgICAgIC8vIEQoMTYpOiBQcm90ZWN0aW9uIGJpdCAoaWYgdHJ1ZSAxNi1iaXQgQ1JDIGZvbGxvd3MgaGVhZGVyKVxuICAgICAgICB0aGlzLmlzUHJvdGVjdGVkQnlDUkMgPSAhY29tbW9uLmlzQml0U2V0KGJ1Ziwgb2ZmICsgMSwgNyk7XG4gICAgfVxuICAgIGNhbGNEdXJhdGlvbihudW1GcmFtZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2FtcGxpbmdSYXRlID09IG51bGwgPyBudWxsIDogKG51bUZyYW1lcyAqIHRoaXMuY2FsY1NhbXBsZXNQZXJGcmFtZSgpIC8gdGhpcy5zYW1wbGluZ1JhdGUpO1xuICAgIH1cbiAgICBjYWxjU2FtcGxlc1BlckZyYW1lKCkge1xuICAgICAgICByZXR1cm4gTXBlZ0ZyYW1lSGVhZGVyLnNhbXBsZXNJbkZyYW1lVGFibGVbdGhpcy52ZXJzaW9uID09PSAxID8gMCA6IDFdW3RoaXMubGF5ZXJdO1xuICAgIH1cbiAgICBjYWxjdWxhdGVTaWRlSW5mb0xlbmd0aCgpIHtcbiAgICAgICAgaWYgKHRoaXMubGF5ZXIgIT09IDMpXG4gICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgaWYgKHRoaXMuY2hhbm5lbE1vZGVJbmRleCA9PT0gMykge1xuICAgICAgICAgICAgLy8gbW9ub1xuICAgICAgICAgICAgaWYgKHRoaXMudmVyc2lvbiA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAxNztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnZlcnNpb24gPT09IDIgfHwgdGhpcy52ZXJzaW9uID09PSAyLjUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gOTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnZlcnNpb24gPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMzI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy52ZXJzaW9uID09PSAyIHx8IHRoaXMudmVyc2lvbiA9PT0gMi41KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE3O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjYWxjU2xvdFNpemUoKSB7XG4gICAgICAgIHJldHVybiBbbnVsbCwgNCwgMSwgMV1bdGhpcy5sYXllcl07XG4gICAgfVxuICAgIHBhcnNlTXBlZ0hlYWRlcihidWYsIG9mZikge1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9ICdNUEVHJztcbiAgICAgICAgLy8gRSgxNSwxMik6IEJpdHJhdGUgaW5kZXhcbiAgICAgICAgdGhpcy5iaXRyYXRlSW5kZXggPSBjb21tb24uZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmLCBvZmYgKyAyLCAwLCA0KTtcbiAgICAgICAgLy8gRigxMSwxMCk6IFNhbXBsaW5nIHJhdGUgZnJlcXVlbmN5IGluZGV4XG4gICAgICAgIHRoaXMuc2FtcFJhdGVGcmVxSW5kZXggPSBjb21tb24uZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmLCBvZmYgKyAyLCA0LCAyKTtcbiAgICAgICAgLy8gRyg5KTogUGFkZGluZyBiaXRcbiAgICAgICAgdGhpcy5wYWRkaW5nID0gY29tbW9uLmlzQml0U2V0KGJ1Ziwgb2ZmICsgMiwgNik7XG4gICAgICAgIC8vIEgoOCk6IFByaXZhdGUgYml0XG4gICAgICAgIHRoaXMucHJpdmF0ZUJpdCA9IGNvbW1vbi5pc0JpdFNldChidWYsIG9mZiArIDIsIDcpO1xuICAgICAgICAvLyBJKDcsNik6IENoYW5uZWwgTW9kZVxuICAgICAgICB0aGlzLmNoYW5uZWxNb2RlSW5kZXggPSBjb21tb24uZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmLCBvZmYgKyAzLCAwLCAyKTtcbiAgICAgICAgLy8gSig1LDQpOiBNb2RlIGV4dGVuc2lvbiAoT25seSB1c2VkIGluIEpvaW50IHN0ZXJlbylcbiAgICAgICAgdGhpcy5tb2RlRXh0ZW5zaW9uID0gY29tbW9uLmdldEJpdEFsbGlnbmVkTnVtYmVyKGJ1Ziwgb2ZmICsgMywgMiwgMik7XG4gICAgICAgIC8vIEsoMyk6IENvcHlyaWdodFxuICAgICAgICB0aGlzLmlzQ29weXJpZ2h0ZWQgPSBjb21tb24uaXNCaXRTZXQoYnVmLCBvZmYgKyAzLCA0KTtcbiAgICAgICAgLy8gTCgyKTogT3JpZ2luYWxcbiAgICAgICAgdGhpcy5pc09yaWdpbmFsTWVkaWEgPSBjb21tb24uaXNCaXRTZXQoYnVmLCBvZmYgKyAzLCA1KTtcbiAgICAgICAgLy8gTSgzKTogVGhlIG9yaWdpbmFsIGJpdCBpbmRpY2F0ZXMsIGlmIGl0IGlzIHNldCwgdGhhdCB0aGUgZnJhbWUgaXMgbG9jYXRlZCBvbiBpdHMgb3JpZ2luYWwgbWVkaWEuXG4gICAgICAgIHRoaXMuZW1waGFzaXMgPSBjb21tb24uZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmLCBvZmYgKyAzLCA3LCAyKTtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gTXBlZ0ZyYW1lSGVhZGVyLlZlcnNpb25JRFt0aGlzLnZlcnNpb25JbmRleF07XG4gICAgICAgIHRoaXMuY2hhbm5lbE1vZGUgPSBNcGVnRnJhbWVIZWFkZXIuQ2hhbm5lbE1vZGVbdGhpcy5jaGFubmVsTW9kZUluZGV4XTtcbiAgICAgICAgdGhpcy5jb2RlYyA9IGBNUEVHICR7dGhpcy52ZXJzaW9ufSBMYXllciAke3RoaXMubGF5ZXJ9YDtcbiAgICAgICAgLy8gQ2FsY3VsYXRlIGJpdHJhdGVcbiAgICAgICAgY29uc3QgYml0cmF0ZUluS2JwcyA9IHRoaXMuY2FsY0JpdHJhdGUoKTtcbiAgICAgICAgaWYgKCFiaXRyYXRlSW5LYnBzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTXBlZ0NvbnRlbnRFcnJvcignQ2Fubm90IGRldGVybWluZSBiaXQtcmF0ZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYml0cmF0ZSA9IGJpdHJhdGVJbkticHMgKiAxMDAwO1xuICAgICAgICAvLyBDYWxjdWxhdGUgc2FtcGxpbmcgcmF0ZVxuICAgICAgICB0aGlzLnNhbXBsaW5nUmF0ZSA9IHRoaXMuY2FsY1NhbXBsaW5nUmF0ZSgpO1xuICAgICAgICBpZiAodGhpcy5zYW1wbGluZ1JhdGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1wZWdDb250ZW50RXJyb3IoJ0Nhbm5vdCBkZXRlcm1pbmUgc2FtcGxpbmctcmF0ZScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHBhcnNlQWR0c0hlYWRlcihidWYsIG9mZikge1xuICAgICAgICBkZWJ1ZyhcImxheWVyPTAgPT4gQURUU1wiKTtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdGhpcy52ZXJzaW9uSW5kZXggPT09IDIgPyA0IDogMjtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBgQURUUy9NUEVHLSR7dGhpcy52ZXJzaW9ufWA7XG4gICAgICAgIGNvbnN0IHByb2ZpbGVJbmRleCA9IGNvbW1vbi5nZXRCaXRBbGxpZ25lZE51bWJlcihidWYsIG9mZiArIDIsIDAsIDIpO1xuICAgICAgICB0aGlzLmNvZGVjID0gJ0FBQyc7XG4gICAgICAgIHRoaXMuY29kZWNQcm9maWxlID0gTVBFRzQuQXVkaW9PYmplY3RUeXBlc1twcm9maWxlSW5kZXhdO1xuICAgICAgICBkZWJ1ZyhgTVBFRy00IGF1ZGlvLWNvZGVjPSR7dGhpcy5jb2RlY31gKTtcbiAgICAgICAgY29uc3Qgc2FtcGxpbmdGcmVxdWVuY3lJbmRleCA9IGNvbW1vbi5nZXRCaXRBbGxpZ25lZE51bWJlcihidWYsIG9mZiArIDIsIDIsIDQpO1xuICAgICAgICB0aGlzLnNhbXBsaW5nUmF0ZSA9IE1QRUc0LlNhbXBsaW5nRnJlcXVlbmNpZXNbc2FtcGxpbmdGcmVxdWVuY3lJbmRleF07XG4gICAgICAgIGRlYnVnKGBzYW1wbGluZy1yYXRlPSR7dGhpcy5zYW1wbGluZ1JhdGV9YCk7XG4gICAgICAgIGNvbnN0IGNoYW5uZWxJbmRleCA9IGNvbW1vbi5nZXRCaXRBbGxpZ25lZE51bWJlcihidWYsIG9mZiArIDIsIDcsIDMpO1xuICAgICAgICB0aGlzLm1wNENoYW5uZWxDb25maWcgPSBNUEVHNF9DaGFubmVsQ29uZmlndXJhdGlvbnNbY2hhbm5lbEluZGV4XTtcbiAgICAgICAgZGVidWcoYGNoYW5uZWwtY29uZmlnPSR7dGhpcy5tcDRDaGFubmVsQ29uZmlnID8gdGhpcy5tcDRDaGFubmVsQ29uZmlnLmpvaW4oJysnKSA6ICc/J31gKTtcbiAgICAgICAgdGhpcy5mcmFtZUxlbmd0aCA9IGNvbW1vbi5nZXRCaXRBbGxpZ25lZE51bWJlcihidWYsIG9mZiArIDMsIDYsIDIpIDw8IDExO1xuICAgIH1cbiAgICBjYWxjQml0cmF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuYml0cmF0ZUluZGV4ID09PSAweDAwIHx8IC8vIGZyZWVcbiAgICAgICAgICAgIHRoaXMuYml0cmF0ZUluZGV4ID09PSAweDBGKSB7IC8vIHJlc2VydmVkXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy52ZXJzaW9uICYmIHRoaXMuYml0cmF0ZUluZGV4KSB7XG4gICAgICAgICAgICBjb25zdCBjb2RlY0luZGV4ID0gMTAgKiBNYXRoLmZsb29yKHRoaXMudmVyc2lvbikgKyB0aGlzLmxheWVyO1xuICAgICAgICAgICAgcmV0dXJuIE1wZWdGcmFtZUhlYWRlci5iaXRyYXRlX2luZGV4W3RoaXMuYml0cmF0ZUluZGV4XVtjb2RlY0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY2FsY1NhbXBsaW5nUmF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2FtcFJhdGVGcmVxSW5kZXggPT09IDB4MDMgfHwgdGhpcy52ZXJzaW9uID09PSBudWxsIHx8IHRoaXMuc2FtcFJhdGVGcmVxSW5kZXggPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBudWxsOyAvLyAncmVzZXJ2ZWQnXG4gICAgICAgIHJldHVybiBNcGVnRnJhbWVIZWFkZXIuc2FtcGxpbmdfcmF0ZV9mcmVxX2luZGV4W3RoaXMudmVyc2lvbl1bdGhpcy5zYW1wUmF0ZUZyZXFJbmRleF07XG4gICAgfVxufVxuTXBlZ0ZyYW1lSGVhZGVyLlN5bmNCeXRlMSA9IDB4RkY7XG5NcGVnRnJhbWVIZWFkZXIuU3luY0J5dGUyID0gMHhFMDtcbk1wZWdGcmFtZUhlYWRlci5WZXJzaW9uSUQgPSBbMi41LCBudWxsLCAyLCAxXTtcbk1wZWdGcmFtZUhlYWRlci5MYXllckRlc2NyaXB0aW9uID0gWzAsIDMsIDIsIDFdO1xuTXBlZ0ZyYW1lSGVhZGVyLkNoYW5uZWxNb2RlID0gWydzdGVyZW8nLCAnam9pbnRfc3RlcmVvJywgJ2R1YWxfY2hhbm5lbCcsICdtb25vJ107XG5NcGVnRnJhbWVIZWFkZXIuYml0cmF0ZV9pbmRleCA9IHtcbiAgICAxOiB7IDExOiAzMiwgMTI6IDMyLCAxMzogMzIsIDIxOiAzMiwgMjI6IDgsIDIzOiA4IH0sXG4gICAgMjogeyAxMTogNjQsIDEyOiA0OCwgMTM6IDQwLCAyMTogNDgsIDIyOiAxNiwgMjM6IDE2IH0sXG4gICAgMzogeyAxMTogOTYsIDEyOiA1NiwgMTM6IDQ4LCAyMTogNTYsIDIyOiAyNCwgMjM6IDI0IH0sXG4gICAgNDogeyAxMTogMTI4LCAxMjogNjQsIDEzOiA1NiwgMjE6IDY0LCAyMjogMzIsIDIzOiAzMiB9LFxuICAgIDU6IHsgMTE6IDE2MCwgMTI6IDgwLCAxMzogNjQsIDIxOiA4MCwgMjI6IDQwLCAyMzogNDAgfSxcbiAgICA2OiB7IDExOiAxOTIsIDEyOiA5NiwgMTM6IDgwLCAyMTogOTYsIDIyOiA0OCwgMjM6IDQ4IH0sXG4gICAgNzogeyAxMTogMjI0LCAxMjogMTEyLCAxMzogOTYsIDIxOiAxMTIsIDIyOiA1NiwgMjM6IDU2IH0sXG4gICAgODogeyAxMTogMjU2LCAxMjogMTI4LCAxMzogMTEyLCAyMTogMTI4LCAyMjogNjQsIDIzOiA2NCB9LFxuICAgIDk6IHsgMTE6IDI4OCwgMTI6IDE2MCwgMTM6IDEyOCwgMjE6IDE0NCwgMjI6IDgwLCAyMzogODAgfSxcbiAgICAxMDogeyAxMTogMzIwLCAxMjogMTkyLCAxMzogMTYwLCAyMTogMTYwLCAyMjogOTYsIDIzOiA5NiB9LFxuICAgIDExOiB7IDExOiAzNTIsIDEyOiAyMjQsIDEzOiAxOTIsIDIxOiAxNzYsIDIyOiAxMTIsIDIzOiAxMTIgfSxcbiAgICAxMjogeyAxMTogMzg0LCAxMjogMjU2LCAxMzogMjI0LCAyMTogMTkyLCAyMjogMTI4LCAyMzogMTI4IH0sXG4gICAgMTM6IHsgMTE6IDQxNiwgMTI6IDMyMCwgMTM6IDI1NiwgMjE6IDIyNCwgMjI6IDE0NCwgMjM6IDE0NCB9LFxuICAgIDE0OiB7IDExOiA0NDgsIDEyOiAzODQsIDEzOiAzMjAsIDIxOiAyNTYsIDIyOiAxNjAsIDIzOiAxNjAgfVxufTtcbk1wZWdGcmFtZUhlYWRlci5zYW1wbGluZ19yYXRlX2ZyZXFfaW5kZXggPSB7XG4gICAgMTogeyAwOiA0NDEwMCwgMTogNDgwMDAsIDI6IDMyMDAwIH0sXG4gICAgMjogeyAwOiAyMjA1MCwgMTogMjQwMDAsIDI6IDE2MDAwIH0sXG4gICAgMi41OiB7IDA6IDExMDI1LCAxOiAxMjAwMCwgMjogODAwMCB9XG59O1xuTXBlZ0ZyYW1lSGVhZGVyLnNhbXBsZXNJbkZyYW1lVGFibGUgPSBbXG4gICAgLyogTGF5ZXIgICBJICAgIElJICAgSUlJICovXG4gICAgWzAsIDM4NCwgMTE1MiwgMTE1Ml0sIC8vIE1QRUctMVxuICAgIFswLCAzODQsIDExNTIsIDU3Nl0gLy8gTVBFRy0yKC41XG5dO1xuLyoqXG4gKiBNUEVHIEF1ZGlvIExheWVyIEkvSUkvSUlJXG4gKi9cbmNvbnN0IEZyYW1lSGVhZGVyID0ge1xuICAgIGxlbjogNCxcbiAgICBnZXQ6IChidWYsIG9mZikgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IE1wZWdGcmFtZUhlYWRlcihidWYsIG9mZik7XG4gICAgfVxufTtcbmZ1bmN0aW9uIGdldFZickNvZGVjUHJvZmlsZSh2YnJTY2FsZSkge1xuICAgIHJldHVybiBgViR7TWF0aC5mbG9vcigoMTAwIC0gdmJyU2NhbGUpIC8gMTApfWA7XG59XG5leHBvcnQgY2xhc3MgTXBlZ1BhcnNlciBleHRlbmRzIEFic3RyYWN0SUQzUGFyc2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5mcmFtZUNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5zeW5jRnJhbWVDb3VudCA9IC0xO1xuICAgICAgICB0aGlzLmNvdW50U2tpcEZyYW1lRGF0YSA9IDA7XG4gICAgICAgIHRoaXMudG90YWxEYXRhTGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5iaXRyYXRlcyA9IFtdO1xuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMuZnJhbWVfc2l6ZSA9IDA7XG4gICAgICAgIHRoaXMuY3JjID0gbnVsbDtcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVFb2ZEdXJhdGlvbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNhbXBsZXNQZXJGcmFtZSA9IG51bGw7XG4gICAgICAgIHRoaXMuYnVmX2ZyYW1lX2hlYWRlciA9IG5ldyBVaW50OEFycmF5KDQpO1xuICAgICAgICAvKipcbiAgICAgICAgICogTnVtYmVyIG9mIGJ5dGVzIGFscmVhZHkgcGFyc2VkIHNpbmNlIGJlZ2lubmluZyBvZiBzdHJlYW0gLyBmaWxlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1wZWdPZmZzZXQgPSBudWxsO1xuICAgICAgICB0aGlzLnN5bmNQZWVrID0ge1xuICAgICAgICAgICAgYnVmOiBuZXcgVWludDhBcnJheShtYXhQZWVrTGVuKSxcbiAgICAgICAgICAgIGxlbjogMFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgYWZ0ZXIgSUQzIGhlYWRlcnMgaGF2ZSBiZWVuIHBhcnNlZFxuICAgICAqL1xuICAgIGFzeW5jIHBvc3RJZDN2MlBhcnNlKCkge1xuICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnbG9zc2xlc3MnLCBmYWxzZSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgcXVpdCA9IGZhbHNlO1xuICAgICAgICAgICAgd2hpbGUgKCFxdWl0KSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zeW5jKCk7XG4gICAgICAgICAgICAgICAgcXVpdCA9IGF3YWl0IHRoaXMucGFyc2VDb21tb25NcGVnSGVhZGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVuZE9mU3RyZWFtRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhcIkVuZC1vZi1zdHJlYW1cIik7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FsY3VsYXRlRW9mRHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2FtcGxlc1BlckZyYW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBudW1iZXJPZlNhbXBsZXMgPSB0aGlzLmZyYW1lQ291bnQgKiB0aGlzLnNhbXBsZXNQZXJGcmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdudW1iZXJPZlNhbXBsZXMnLCBudW1iZXJPZlNhbXBsZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWV0YWRhdGEuZm9ybWF0LnNhbXBsZVJhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkdXJhdGlvbiA9IG51bWJlck9mU2FtcGxlcyAvIHRoaXMubWV0YWRhdGEuZm9ybWF0LnNhbXBsZVJhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVidWcoYENhbGN1bGF0ZSBkdXJhdGlvbiBhdCBFT0Y6ICR7ZHVyYXRpb259IHNlYy5gLCBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2R1cmF0aW9uJywgZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCBhZnRlciBmaWxlIGhhcyBiZWVuIGZ1bGx5IHBhcnNlZCwgdGhpcyBhbGxvd3MsIGlmIHByZXNlbnQsIHRvIGV4Y2x1ZGUgdGhlIElEM3YxLjEgaGVhZGVyIGxlbmd0aFxuICAgICAqL1xuICAgIGZpbmFsaXplKCkge1xuICAgICAgICBjb25zdCBmb3JtYXQgPSB0aGlzLm1ldGFkYXRhLmZvcm1hdDtcbiAgICAgICAgY29uc3QgaGFzSUQzdjEgPSAhIXRoaXMubWV0YWRhdGEubmF0aXZlLklEM3YxO1xuICAgICAgICBpZiAodGhpcy5tcGVnT2Zmc2V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0LmR1cmF0aW9uICYmIHRoaXMudG9rZW5pemVyLmZpbGVJbmZvLnNpemUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtcGVnU2l6ZSA9IHRoaXMudG9rZW5pemVyLmZpbGVJbmZvLnNpemUgLSB0aGlzLm1wZWdPZmZzZXQgLSAoaGFzSUQzdjEgPyAxMjggOiAwKTtcbiAgICAgICAgICAgICAgICBpZiAoZm9ybWF0LmNvZGVjUHJvZmlsZSAmJiBmb3JtYXQuY29kZWNQcm9maWxlWzBdID09PSAnVicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2JpdHJhdGUnLCBtcGVnU2l6ZSAqIDggLyBmb3JtYXQuZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnRva2VuaXplci5maWxlSW5mby5zaXplICYmIGZvcm1hdC5jb2RlY1Byb2ZpbGUgPT09ICdDQlInKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbXBlZ1NpemUgPSB0aGlzLnRva2VuaXplci5maWxlSW5mby5zaXplIC0gdGhpcy5tcGVnT2Zmc2V0IC0gKGhhc0lEM3YxID8gMTI4IDogMCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZnJhbWVfc2l6ZSAhPT0gbnVsbCAmJiB0aGlzLnNhbXBsZXNQZXJGcmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBudW1iZXJPZlNhbXBsZXMgPSBNYXRoLnJvdW5kKG1wZWdTaXplIC8gdGhpcy5mcmFtZV9zaXplKSAqIHRoaXMuc2FtcGxlc1BlckZyYW1lO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnbnVtYmVyT2ZTYW1wbGVzJywgbnVtYmVyT2ZTYW1wbGVzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1hdC5zYW1wbGVSYXRlICYmICFmb3JtYXQuZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGR1cmF0aW9uID0gbnVtYmVyT2ZTYW1wbGVzIC8gZm9ybWF0LnNhbXBsZVJhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhcIkNhbGN1bGF0ZSBDQlIgZHVyYXRpb24gYmFzZWQgb24gZmlsZSBzaXplOiAlc1wiLCBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnZHVyYXRpb24nLCBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgc3luYygpIHtcbiAgICAgICAgbGV0IGdvdEZpcnN0U3luYyA9IGZhbHNlO1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgbGV0IGJvID0gMDtcbiAgICAgICAgICAgIHRoaXMuc3luY1BlZWsubGVuID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucGVla0J1ZmZlcih0aGlzLnN5bmNQZWVrLmJ1ZiwgeyBsZW5ndGg6IG1heFBlZWtMZW4sIG1heUJlTGVzczogdHJ1ZSB9KTtcbiAgICAgICAgICAgIGlmICh0aGlzLnN5bmNQZWVrLmxlbiA8PSAxNjMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRW5kT2ZTdHJlYW1FcnJvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZ290Rmlyc3RTeW5jICYmICh0aGlzLnN5bmNQZWVrLmJ1Zltib10gJiAweEUwKSA9PT0gMHhFMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1Zl9mcmFtZV9oZWFkZXJbMF0gPSBNcGVnRnJhbWVIZWFkZXIuU3luY0J5dGUxO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1Zl9mcmFtZV9oZWFkZXJbMV0gPSB0aGlzLnN5bmNQZWVrLmJ1Zltib107XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudG9rZW5pemVyLmlnbm9yZShibyk7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnKGBTeW5jIGF0IG9mZnNldD0ke3RoaXMudG9rZW5pemVyLnBvc2l0aW9uIC0gMX0sIGZyYW1lQ291bnQ9JHt0aGlzLmZyYW1lQ291bnR9YCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN5bmNGcmFtZUNvdW50ID09PSB0aGlzLmZyYW1lQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKGBSZS1zeW5jZWQgTVBFRyBzdHJlYW0sIGZyYW1lQ291bnQ9JHt0aGlzLmZyYW1lQ291bnR9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZyYW1lQ291bnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mcmFtZV9zaXplID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN5bmNGcmFtZUNvdW50ID0gdGhpcy5mcmFtZUNvdW50O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47IC8vIHN5bmNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZ290Rmlyc3RTeW5jID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYm8gPSB0aGlzLnN5bmNQZWVrLmJ1Zi5pbmRleE9mKE1wZWdGcmFtZUhlYWRlci5TeW5jQnl0ZTEsIGJvKTtcbiAgICAgICAgICAgICAgICBpZiAoYm8gPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN5bmNQZWVrLmxlbiA8IHRoaXMuc3luY1BlZWsuYnVmLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVuZE9mU3RyZWFtRXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnRva2VuaXplci5pZ25vcmUodGhpcy5zeW5jUGVlay5sZW4pO1xuICAgICAgICAgICAgICAgICAgICBicmVhazsgLy8gY29udGludWUgd2l0aCBuZXh0IGJ1ZmZlclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICArK2JvO1xuICAgICAgICAgICAgICAgIGdvdEZpcnN0U3luYyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tYmluZWQgQURUUyAmIE1QRUcgKE1QMiAmIE1QMykgaGVhZGVyIGhhbmRsaW5nXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gdHJ1ZSBpZiBwYXJzZXIgc2hvdWxkIHF1aXRcbiAgICAgKi9cbiAgICBhc3luYyBwYXJzZUNvbW1vbk1wZWdIZWFkZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLmZyYW1lQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMubXBlZ09mZnNldCA9IHRoaXMudG9rZW5pemVyLnBvc2l0aW9uIC0gMTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aGlzLnRva2VuaXplci5wZWVrQnVmZmVyKHRoaXMuYnVmX2ZyYW1lX2hlYWRlci5zdWJhcnJheSgxKSwgeyBsZW5ndGg6IDMgfSk7XG4gICAgICAgIGxldCBoZWFkZXI7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBoZWFkZXIgPSBGcmFtZUhlYWRlci5nZXQodGhpcy5idWZfZnJhbWVfaGVhZGVyLCAwKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnRva2VuaXplci5pZ25vcmUoMSk7XG4gICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLmFkZFdhcm5pbmcoYFBhcnNlIGVycm9yOiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gc3luY1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMudG9rZW5pemVyLmlnbm9yZSgzKTtcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2NvbnRhaW5lcicsIGhlYWRlci5jb250YWluZXIpO1xuICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnY29kZWMnLCBoZWFkZXIuY29kZWMpO1xuICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnbG9zc2xlc3MnLCBmYWxzZSk7XG4gICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdzYW1wbGVSYXRlJywgaGVhZGVyLnNhbXBsaW5nUmF0ZSk7XG4gICAgICAgIHRoaXMuZnJhbWVDb3VudCsrO1xuICAgICAgICByZXR1cm4gaGVhZGVyLnZlcnNpb24gIT09IG51bGwgJiYgaGVhZGVyLnZlcnNpb24gPj0gMiAmJiBoZWFkZXIubGF5ZXIgPT09IDAgPyB0aGlzLnBhcnNlQWR0cyhoZWFkZXIpIDogdGhpcy5wYXJzZUF1ZGlvRnJhbWVIZWFkZXIoaGVhZGVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gdHJ1ZSBpZiBwYXJzZXIgc2hvdWxkIHF1aXRcbiAgICAgKi9cbiAgICBhc3luYyBwYXJzZUF1ZGlvRnJhbWVIZWFkZXIoaGVhZGVyKSB7XG4gICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdudW1iZXJPZkNoYW5uZWxzJywgaGVhZGVyLmNoYW5uZWxNb2RlID09PSAnbW9ubycgPyAxIDogMik7XG4gICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdiaXRyYXRlJywgaGVhZGVyLmJpdHJhdGUpO1xuICAgICAgICBpZiAodGhpcy5mcmFtZUNvdW50IDwgMjAgKiAxMDAwMCkge1xuICAgICAgICAgICAgZGVidWcoJ29mZnNldD0lcyBNUCVzIGJpdHJhdGU9JXMgc2FtcGxlLXJhdGU9JXMnLCB0aGlzLnRva2VuaXplci5wb3NpdGlvbiAtIDQsIGhlYWRlci5sYXllciwgaGVhZGVyLmJpdHJhdGUsIGhlYWRlci5zYW1wbGluZ1JhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNsb3Rfc2l6ZSA9IGhlYWRlci5jYWxjU2xvdFNpemUoKTtcbiAgICAgICAgaWYgKHNsb3Rfc2l6ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1wZWdDb250ZW50RXJyb3IoJ2ludmFsaWQgc2xvdF9zaXplJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2FtcGxlc19wZXJfZnJhbWUgPSBoZWFkZXIuY2FsY1NhbXBsZXNQZXJGcmFtZSgpO1xuICAgICAgICBkZWJ1Zyhgc2FtcGxlc19wZXJfZnJhbWU9JHtzYW1wbGVzX3Blcl9mcmFtZX1gKTtcbiAgICAgICAgY29uc3QgYnBzID0gc2FtcGxlc19wZXJfZnJhbWUgLyA4LjA7XG4gICAgICAgIGlmIChoZWFkZXIuYml0cmF0ZSAhPT0gbnVsbCAmJiBoZWFkZXIuc2FtcGxpbmdSYXRlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGZzaXplID0gKGJwcyAqIGhlYWRlci5iaXRyYXRlIC8gaGVhZGVyLnNhbXBsaW5nUmF0ZSkgKyAoKGhlYWRlci5wYWRkaW5nKSA/IHNsb3Rfc2l6ZSA6IDApO1xuICAgICAgICAgICAgdGhpcy5mcmFtZV9zaXplID0gTWF0aC5mbG9vcihmc2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdWRpb0ZyYW1lSGVhZGVyID0gaGVhZGVyO1xuICAgICAgICBpZiAoaGVhZGVyLmJpdHJhdGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuYml0cmF0ZXMucHVzaChoZWFkZXIuYml0cmF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8geHRyYSBoZWFkZXIgb25seSBleGlzdHMgaW4gZmlyc3QgZnJhbWVcbiAgICAgICAgaWYgKHRoaXMuZnJhbWVDb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBGcmFtZUhlYWRlci5sZW47XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNraXBTaWRlSW5mb3JtYXRpb24oKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5mcmFtZUNvdW50ID09PSAzKSB7XG4gICAgICAgICAgICAvLyB0aGUgc3RyZWFtIGlzIENCUiBpZiB0aGUgZmlyc3QgMyBmcmFtZSBiaXRyYXRlcyBhcmUgdGhlIHNhbWVcbiAgICAgICAgICAgIGlmICh0aGlzLmFyZUFsbFNhbWUodGhpcy5iaXRyYXRlcykpIHtcbiAgICAgICAgICAgICAgICAvLyBBY3R1YWwgY2FsY3VsYXRpb24gd2lsbCBiZSBkb25lIGluIGZpbmFsaXplXG4gICAgICAgICAgICAgICAgdGhpcy5zYW1wbGVzUGVyRnJhbWUgPSBzYW1wbGVzX3Blcl9mcmFtZTtcbiAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnY29kZWNQcm9maWxlJywgJ0NCUicpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRva2VuaXplci5maWxlSW5mby5zaXplKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gV2lsbCBjYWxjdWxhdGUgZHVyYXRpb24gYmFzZWQgb24gdGhlIGZpbGUgc2l6ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5tZXRhZGF0YS5mb3JtYXQuZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gV2UgYWxyZWFkeSBnb3QgdGhlIGR1cmF0aW9uLCBzdG9wIHByb2Nlc3NpbmcgTVBFRyBzdHJlYW0gYW55IGZ1cnRoZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5vcHRpb25zLmR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIEVuZm9yY2UgZHVyYXRpb24gbm90IGVuYWJsZWQsIHN0b3AgcHJvY2Vzc2luZyBlbnRpcmUgc3RyZWFtXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gb25jZSB3ZSBrbm93IHRoZSBmaWxlIGlzIFZCUiBhdHRhY2ggbGlzdGVuZXIgdG8gZW5kIG9mXG4gICAgICAgIC8vIHN0cmVhbSBzbyB3ZSBjYW4gZG8gdGhlIGR1cmF0aW9uIGNhbGN1bGF0aW9uIHdoZW4gd2VcbiAgICAgICAgLy8gaGF2ZSBjb3VudGVkIGFsbCB0aGUgZnJhbWVzXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZHVyYXRpb24gJiYgdGhpcy5mcmFtZUNvdW50ID09PSA0KSB7XG4gICAgICAgICAgICB0aGlzLnNhbXBsZXNQZXJGcmFtZSA9IHNhbXBsZXNfcGVyX2ZyYW1lO1xuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVFb2ZEdXJhdGlvbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vZmZzZXQgPSA0O1xuICAgICAgICBpZiAoaGVhZGVyLmlzUHJvdGVjdGVkQnlDUkMpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGFyc2VDcmMoKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCB0aGlzLnNraXBTaWRlSW5mb3JtYXRpb24oKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBhc3luYyBwYXJzZUFkdHMoaGVhZGVyKSB7XG4gICAgICAgIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KDMpO1xuICAgICAgICBhd2FpdCB0aGlzLnRva2VuaXplci5yZWFkQnVmZmVyKGJ1Zik7XG4gICAgICAgIGhlYWRlci5mcmFtZUxlbmd0aCArPSBjb21tb24uZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmLCAwLCAwLCAxMSk7XG4gICAgICAgIHRoaXMudG90YWxEYXRhTGVuZ3RoICs9IGhlYWRlci5mcmFtZUxlbmd0aDtcbiAgICAgICAgdGhpcy5zYW1wbGVzUGVyRnJhbWUgPSAxMDI0O1xuICAgICAgICBpZiAoaGVhZGVyLnNhbXBsaW5nUmF0ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgZnJhbWVzUGVyU2VjID0gaGVhZGVyLnNhbXBsaW5nUmF0ZSAvIHRoaXMuc2FtcGxlc1BlckZyYW1lO1xuICAgICAgICAgICAgY29uc3QgYnl0ZXNQZXJGcmFtZSA9IHRoaXMuZnJhbWVDb3VudCA9PT0gMCA/IDAgOiB0aGlzLnRvdGFsRGF0YUxlbmd0aCAvIHRoaXMuZnJhbWVDb3VudDtcbiAgICAgICAgICAgIGNvbnN0IGJpdHJhdGUgPSA4ICogYnl0ZXNQZXJGcmFtZSAqIGZyYW1lc1BlclNlYyArIDAuNTtcbiAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdiaXRyYXRlJywgYml0cmF0ZSk7XG4gICAgICAgICAgICBkZWJ1ZyhgZnJhbWUtY291bnQ9JHt0aGlzLmZyYW1lQ291bnR9LCBzaXplPSR7aGVhZGVyLmZyYW1lTGVuZ3RofSBieXRlcywgYml0LXJhdGU9JHtiaXRyYXRlfWApO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMudG9rZW5pemVyLmlnbm9yZShoZWFkZXIuZnJhbWVMZW5ndGggPiA3ID8gaGVhZGVyLmZyYW1lTGVuZ3RoIC0gNyA6IDEpO1xuICAgICAgICAvLyBDb25zdW1lIHJlbWFpbmluZyBoZWFkZXIgYW5kIGZyYW1lIGRhdGFcbiAgICAgICAgaWYgKHRoaXMuZnJhbWVDb3VudCA9PT0gMykge1xuICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2NvZGVjUHJvZmlsZScsIGhlYWRlci5jb2RlY1Byb2ZpbGUpO1xuICAgICAgICAgICAgaWYgKGhlYWRlci5tcDRDaGFubmVsQ29uZmlnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ251bWJlck9mQ2hhbm5lbHMnLCBoZWFkZXIubXA0Q2hhbm5lbENvbmZpZy5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kdXJhdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlRW9mRHVyYXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIFN0b3AgcGFyc2luZyBhZnRlciB0aGUgdGhpcmQgZnJhbWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlQ3JjKCkge1xuICAgICAgICB0aGlzLmNyYyA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWROdW1iZXIoVG9rZW4uSU5UMTZfQkUpO1xuICAgICAgICB0aGlzLm9mZnNldCArPSAyO1xuICAgICAgICByZXR1cm4gdGhpcy5za2lwU2lkZUluZm9ybWF0aW9uKCk7XG4gICAgfVxuICAgIGFzeW5jIHNraXBTaWRlSW5mb3JtYXRpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmF1ZGlvRnJhbWVIZWFkZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHNpZGVpbmZvX2xlbmd0aCA9IHRoaXMuYXVkaW9GcmFtZUhlYWRlci5jYWxjdWxhdGVTaWRlSW5mb0xlbmd0aCgpO1xuICAgICAgICAgICAgaWYgKHNpZGVpbmZvX2xlbmd0aCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihuZXcgVG9rZW4uVWludDhBcnJheVR5cGUoc2lkZWluZm9fbGVuZ3RoKSk7XG4gICAgICAgICAgICAgICAgLy8gc2lkZSBpbmZvcm1hdGlvblxuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IHNpZGVpbmZvX2xlbmd0aDtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnJlYWRYdHJhSW5mb0hlYWRlcigpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyByZWFkWHRyYUluZm9IZWFkZXIoKSB7XG4gICAgICAgIGNvbnN0IGhlYWRlclRhZyA9IGF3YWl0IHRoaXMudG9rZW5pemVyLnJlYWRUb2tlbihJbmZvVGFnSGVhZGVyVGFnKTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gSW5mb1RhZ0hlYWRlclRhZy5sZW47IC8vIDEyXG4gICAgICAgIHN3aXRjaCAoaGVhZGVyVGFnKSB7XG4gICAgICAgICAgICBjYXNlICdJbmZvJzpcbiAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnY29kZWNQcm9maWxlJywgJ0NCUicpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlYWRYaW5nSW5mb0hlYWRlcigpO1xuICAgICAgICAgICAgY2FzZSAnWGluZyc6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmZvVGFnID0gYXdhaXQgdGhpcy5yZWFkWGluZ0luZm9IZWFkZXIoKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5mb1RhZy52YnJTY2FsZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2RlY1Byb2ZpbGUgPSBnZXRWYnJDb2RlY1Byb2ZpbGUoaW5mb1RhZy52YnJTY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCdjb2RlY1Byb2ZpbGUnLCBjb2RlY1Byb2ZpbGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ1h0cmEnOlxuICAgICAgICAgICAgICAgIC8vIFRvRG86ID8/P1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnTEFNRSc6IHtcbiAgICAgICAgICAgICAgICBjb25zdCB2ZXJzaW9uID0gYXdhaXQgdGhpcy50b2tlbml6ZXIucmVhZFRva2VuKExhbWVFbmNvZGVyVmVyc2lvbik7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZnJhbWVfc2l6ZSAhPT0gbnVsbCAmJiB0aGlzLmZyYW1lX3NpemUgPj0gdGhpcy5vZmZzZXQgKyBMYW1lRW5jb2RlclZlcnNpb24ubGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IExhbWVFbmNvZGVyVmVyc2lvbi5sZW47XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCd0b29sJywgYExBTUUgJHt2ZXJzaW9ufWApO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNraXBGcmFtZURhdGEodGhpcy5mcmFtZV9zaXplIC0gdGhpcy5vZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5hZGRXYXJuaW5nKCdDb3JydXB0IExBTUUgaGVhZGVyJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUb0RvOiA/Pz9cbiAgICAgICAgfVxuICAgICAgICAvLyBUb0RvOiBwcm9taXNlIGR1cmF0aW9uPz8/XG4gICAgICAgIGNvbnN0IGZyYW1lRGF0YUxlZnQgPSB0aGlzLmZyYW1lX3NpemUgLSB0aGlzLm9mZnNldDtcbiAgICAgICAgaWYgKGZyYW1lRGF0YUxlZnQgPCAwKSB7XG4gICAgICAgICAgICB0aGlzLm1ldGFkYXRhLmFkZFdhcm5pbmcoYEZyYW1lICR7dGhpcy5mcmFtZUNvdW50fWNvcnJ1cHQ6IG5lZ2F0aXZlIGZyYW1lRGF0YUxlZnRgKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc2tpcEZyYW1lRGF0YShmcmFtZURhdGFMZWZ0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVmOiBodHRwOi8vZ2FicmllbC5tcDMtdGVjaC5vcmcvbXAzaW5mb3RhZy5odG1sXG4gICAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn1cbiAgICAgKi9cbiAgICBhc3luYyByZWFkWGluZ0luZm9IZWFkZXIoKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHRoaXMudG9rZW5pemVyLnBvc2l0aW9uO1xuICAgICAgICBjb25zdCBpbmZvVGFnID0gYXdhaXQgcmVhZFhpbmdIZWFkZXIodGhpcy50b2tlbml6ZXIpO1xuICAgICAgICB0aGlzLm9mZnNldCArPSB0aGlzLnRva2VuaXplci5wb3NpdGlvbiAtIG9mZnNldDtcbiAgICAgICAgaWYgKGluZm9UYWcubGFtZSkge1xuICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ3Rvb2wnLCBgTEFNRSAke2NvbW1vbi5zdHJpcE51bGxzKGluZm9UYWcubGFtZS52ZXJzaW9uKX1gKTtcbiAgICAgICAgICAgIGlmIChpbmZvVGFnLmxhbWUuZXh0ZW5kZWQpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgndHJhY2tHYWluJywgaW5mb1RhZy5sYW1lLmV4dGVuZGVkLnRyYWNrX2dhaW4pO1xuICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEuc2V0Rm9ybWF0KCd0cmFja1BlYWtMZXZlbCcsIGluZm9UYWcubGFtZS5leHRlbmRlZC50cmFja19wZWFrKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5mb1RhZy5sYW1lLmV4dGVuZGVkLnRyYWNrX2dhaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ3RyYWNrR2FpbicsIGluZm9UYWcubGFtZS5leHRlbmRlZC50cmFja19nYWluLmFkanVzdG1lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaW5mb1RhZy5sYW1lLmV4dGVuZGVkLmFsYnVtX2dhaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXRGb3JtYXQoJ2FsYnVtR2FpbicsIGluZm9UYWcubGFtZS5leHRlbmRlZC5hbGJ1bV9nYWluLmFkanVzdG1lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnZHVyYXRpb24nLCBpbmZvVGFnLmxhbWUuZXh0ZW5kZWQubXVzaWNfbGVuZ3RoIC8gMTAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZm9UYWcuc3RyZWFtU2l6ZSAmJiB0aGlzLmF1ZGlvRnJhbWVIZWFkZXIgJiYgaW5mb1RhZy5udW1GcmFtZXMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGR1cmF0aW9uID0gdGhpcy5hdWRpb0ZyYW1lSGVhZGVyLmNhbGNEdXJhdGlvbihpbmZvVGFnLm51bUZyYW1lcyk7XG4gICAgICAgICAgICB0aGlzLm1ldGFkYXRhLnNldEZvcm1hdCgnZHVyYXRpb24nLCBkdXJhdGlvbik7XG4gICAgICAgICAgICBkZWJ1ZygnR2V0IGR1cmF0aW9uIGZyb20gWGluZyBoZWFkZXI6ICVzJywgdGhpcy5tZXRhZGF0YS5mb3JtYXQuZHVyYXRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIGluZm9UYWc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZnJhbWVzIGZpZWxkIGlzIG5vdCBwcmVzZW50XG4gICAgICAgIGNvbnN0IGZyYW1lRGF0YUxlZnQgPSB0aGlzLmZyYW1lX3NpemUgLSB0aGlzLm9mZnNldDtcbiAgICAgICAgYXdhaXQgdGhpcy5za2lwRnJhbWVEYXRhKGZyYW1lRGF0YUxlZnQpO1xuICAgICAgICByZXR1cm4gaW5mb1RhZztcbiAgICB9XG4gICAgYXN5bmMgc2tpcEZyYW1lRGF0YShmcmFtZURhdGFMZWZ0KSB7XG4gICAgICAgIGlmIChmcmFtZURhdGFMZWZ0IDwgMClcbiAgICAgICAgICAgIHRocm93IG5ldyBNcGVnQ29udGVudEVycm9yKCdmcmFtZS1kYXRhLWxlZnQgY2Fubm90IGJlIG5lZ2F0aXZlJyk7XG4gICAgICAgIGF3YWl0IHRoaXMudG9rZW5pemVyLmlnbm9yZShmcmFtZURhdGFMZWZ0KTtcbiAgICAgICAgdGhpcy5jb3VudFNraXBGcmFtZURhdGEgKz0gZnJhbWVEYXRhTGVmdDtcbiAgICB9XG4gICAgYXJlQWxsU2FtZShhcnJheSkge1xuICAgICAgICBjb25zdCBmaXJzdCA9IGFycmF5WzBdO1xuICAgICAgICByZXR1cm4gYXJyYXkuZXZlcnkoZWxlbWVudCA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudCA9PT0gZmlyc3Q7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1wZWdQYXJzZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mpeg/MpegParser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mpeg/ReplayGainDataFormat.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mpeg/ReplayGainDataFormat.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReplayGain: () => (/* binding */ ReplayGain)\n/* harmony export */ });\n/* harmony import */ var _common_Util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Util.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/common/Util.js\");\n\n/**\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format#name-code\n */\nvar NameCode;\n(function (NameCode) {\n    /**\n     * not set\n     */\n    NameCode[NameCode[\"not_set\"] = 0] = \"not_set\";\n    /**\n     * Radio Gain Adjustment\n     */\n    NameCode[NameCode[\"radio\"] = 1] = \"radio\";\n    /**\n     * Audiophile Gain Adjustment\n     */\n    NameCode[NameCode[\"audiophile\"] = 2] = \"audiophile\";\n})(NameCode || (NameCode = {}));\n/**\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format#originator-code\n */\nvar ReplayGainOriginator;\n(function (ReplayGainOriginator) {\n    /**\n     * Replay Gain unspecified\n     */\n    ReplayGainOriginator[ReplayGainOriginator[\"unspecified\"] = 0] = \"unspecified\";\n    /**\n     * Replay Gain pre-set by artist/producer/mastering engineer\n     */\n    ReplayGainOriginator[ReplayGainOriginator[\"engineer\"] = 1] = \"engineer\";\n    /**\n     * Replay Gain set by user\n     */\n    ReplayGainOriginator[ReplayGainOriginator[\"user\"] = 2] = \"user\";\n    /**\n     * Replay Gain determined automatically, as described on this site\n     */\n    ReplayGainOriginator[ReplayGainOriginator[\"automatic\"] = 3] = \"automatic\";\n    /**\n     * Set by simple RMS average\n     */\n    ReplayGainOriginator[ReplayGainOriginator[\"rms_average\"] = 4] = \"rms_average\";\n})(ReplayGainOriginator || (ReplayGainOriginator = {}));\n/**\n * Replay Gain Data Format\n *\n * https://github.com/Borewit/music-metadata/wiki/Replay-Gain-Data-Format\n */\nconst ReplayGain = {\n    len: 2,\n    get: (buf, off) => {\n        const gain_type = _common_Util_js__WEBPACK_IMPORTED_MODULE_0__.getBitAllignedNumber(buf, off, 0, 3);\n        const sign = _common_Util_js__WEBPACK_IMPORTED_MODULE_0__.getBitAllignedNumber(buf, off, 6, 1);\n        const gain_adj = _common_Util_js__WEBPACK_IMPORTED_MODULE_0__.getBitAllignedNumber(buf, off, 7, 9) / 10.0;\n        if (gain_type > 0) {\n            return {\n                type: _common_Util_js__WEBPACK_IMPORTED_MODULE_0__.getBitAllignedNumber(buf, off, 0, 3),\n                origin: _common_Util_js__WEBPACK_IMPORTED_MODULE_0__.getBitAllignedNumber(buf, off, 3, 3),\n                adjustment: (sign ? -gain_adj : gain_adj)\n            };\n        }\n        return undefined;\n    }\n};\n//# sourceMappingURL=ReplayGainDataFormat.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tdXNpYy1tZXRhZGF0YUAxMC43LjAvbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9tcGVnL1JlcGxheUdhaW5EYXRhRm9ybWF0LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDRCQUE0QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsb0RBQW9EO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSwwQkFBMEIsaUVBQTJCO0FBQ3JELHFCQUFxQixpRUFBMkI7QUFDaEQseUJBQXlCLGlFQUEyQjtBQUNwRDtBQUNBO0FBQ0Esc0JBQXNCLGlFQUEyQjtBQUNqRCx3QkFBd0IsaUVBQTJCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9saWxhcy9CdXJlYXUvRGV2L0xNUC9ub2RlX21vZHVsZXMvLnBucG0vbXVzaWMtbWV0YWRhdGFAMTAuNy4wL25vZGVfbW9kdWxlcy9tdXNpYy1tZXRhZGF0YS9saWIvbXBlZy9SZXBsYXlHYWluRGF0YUZvcm1hdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjb21tb24gZnJvbSAnLi4vY29tbW9uL1V0aWwuanMnO1xuLyoqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vQm9yZXdpdC9tdXNpYy1tZXRhZGF0YS93aWtpL1JlcGxheS1HYWluLURhdGEtRm9ybWF0I25hbWUtY29kZVxuICovXG52YXIgTmFtZUNvZGU7XG4oZnVuY3Rpb24gKE5hbWVDb2RlKSB7XG4gICAgLyoqXG4gICAgICogbm90IHNldFxuICAgICAqL1xuICAgIE5hbWVDb2RlW05hbWVDb2RlW1wibm90X3NldFwiXSA9IDBdID0gXCJub3Rfc2V0XCI7XG4gICAgLyoqXG4gICAgICogUmFkaW8gR2FpbiBBZGp1c3RtZW50XG4gICAgICovXG4gICAgTmFtZUNvZGVbTmFtZUNvZGVbXCJyYWRpb1wiXSA9IDFdID0gXCJyYWRpb1wiO1xuICAgIC8qKlxuICAgICAqIEF1ZGlvcGhpbGUgR2FpbiBBZGp1c3RtZW50XG4gICAgICovXG4gICAgTmFtZUNvZGVbTmFtZUNvZGVbXCJhdWRpb3BoaWxlXCJdID0gMl0gPSBcImF1ZGlvcGhpbGVcIjtcbn0pKE5hbWVDb2RlIHx8IChOYW1lQ29kZSA9IHt9KSk7XG4vKipcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Cb3Jld2l0L211c2ljLW1ldGFkYXRhL3dpa2kvUmVwbGF5LUdhaW4tRGF0YS1Gb3JtYXQjb3JpZ2luYXRvci1jb2RlXG4gKi9cbnZhciBSZXBsYXlHYWluT3JpZ2luYXRvcjtcbihmdW5jdGlvbiAoUmVwbGF5R2Fpbk9yaWdpbmF0b3IpIHtcbiAgICAvKipcbiAgICAgKiBSZXBsYXkgR2FpbiB1bnNwZWNpZmllZFxuICAgICAqL1xuICAgIFJlcGxheUdhaW5PcmlnaW5hdG9yW1JlcGxheUdhaW5PcmlnaW5hdG9yW1widW5zcGVjaWZpZWRcIl0gPSAwXSA9IFwidW5zcGVjaWZpZWRcIjtcbiAgICAvKipcbiAgICAgKiBSZXBsYXkgR2FpbiBwcmUtc2V0IGJ5IGFydGlzdC9wcm9kdWNlci9tYXN0ZXJpbmcgZW5naW5lZXJcbiAgICAgKi9cbiAgICBSZXBsYXlHYWluT3JpZ2luYXRvcltSZXBsYXlHYWluT3JpZ2luYXRvcltcImVuZ2luZWVyXCJdID0gMV0gPSBcImVuZ2luZWVyXCI7XG4gICAgLyoqXG4gICAgICogUmVwbGF5IEdhaW4gc2V0IGJ5IHVzZXJcbiAgICAgKi9cbiAgICBSZXBsYXlHYWluT3JpZ2luYXRvcltSZXBsYXlHYWluT3JpZ2luYXRvcltcInVzZXJcIl0gPSAyXSA9IFwidXNlclwiO1xuICAgIC8qKlxuICAgICAqIFJlcGxheSBHYWluIGRldGVybWluZWQgYXV0b21hdGljYWxseSwgYXMgZGVzY3JpYmVkIG9uIHRoaXMgc2l0ZVxuICAgICAqL1xuICAgIFJlcGxheUdhaW5PcmlnaW5hdG9yW1JlcGxheUdhaW5PcmlnaW5hdG9yW1wiYXV0b21hdGljXCJdID0gM10gPSBcImF1dG9tYXRpY1wiO1xuICAgIC8qKlxuICAgICAqIFNldCBieSBzaW1wbGUgUk1TIGF2ZXJhZ2VcbiAgICAgKi9cbiAgICBSZXBsYXlHYWluT3JpZ2luYXRvcltSZXBsYXlHYWluT3JpZ2luYXRvcltcInJtc19hdmVyYWdlXCJdID0gNF0gPSBcInJtc19hdmVyYWdlXCI7XG59KShSZXBsYXlHYWluT3JpZ2luYXRvciB8fCAoUmVwbGF5R2Fpbk9yaWdpbmF0b3IgPSB7fSkpO1xuLyoqXG4gKiBSZXBsYXkgR2FpbiBEYXRhIEZvcm1hdFxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Cb3Jld2l0L211c2ljLW1ldGFkYXRhL3dpa2kvUmVwbGF5LUdhaW4tRGF0YS1Gb3JtYXRcbiAqL1xuZXhwb3J0IGNvbnN0IFJlcGxheUdhaW4gPSB7XG4gICAgbGVuOiAyLFxuICAgIGdldDogKGJ1Ziwgb2ZmKSA9PiB7XG4gICAgICAgIGNvbnN0IGdhaW5fdHlwZSA9IGNvbW1vbi5nZXRCaXRBbGxpZ25lZE51bWJlcihidWYsIG9mZiwgMCwgMyk7XG4gICAgICAgIGNvbnN0IHNpZ24gPSBjb21tb24uZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmLCBvZmYsIDYsIDEpO1xuICAgICAgICBjb25zdCBnYWluX2FkaiA9IGNvbW1vbi5nZXRCaXRBbGxpZ25lZE51bWJlcihidWYsIG9mZiwgNywgOSkgLyAxMC4wO1xuICAgICAgICBpZiAoZ2Fpbl90eXBlID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBjb21tb24uZ2V0Qml0QWxsaWduZWROdW1iZXIoYnVmLCBvZmYsIDAsIDMpLFxuICAgICAgICAgICAgICAgIG9yaWdpbjogY29tbW9uLmdldEJpdEFsbGlnbmVkTnVtYmVyKGJ1Ziwgb2ZmLCAzLCAzKSxcbiAgICAgICAgICAgICAgICBhZGp1c3RtZW50OiAoc2lnbiA/IC1nYWluX2FkaiA6IGdhaW5fYWRqKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZXBsYXlHYWluRGF0YUZvcm1hdC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mpeg/ReplayGainDataFormat.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mpeg/XingTag.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mpeg/XingTag.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InfoTagHeaderTag: () => (/* binding */ InfoTagHeaderTag),\n/* harmony export */   LameEncoderVersion: () => (/* binding */ LameEncoderVersion),\n/* harmony export */   XingHeaderFlags: () => (/* binding */ XingHeaderFlags),\n/* harmony export */   readXingHeader: () => (/* binding */ readXingHeader)\n/* harmony export */ });\n/* harmony import */ var token_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! token-types */ \"(app-pages-browser)/./node_modules/.pnpm/token-types@6.0.0/node_modules/token-types/lib/index.js\");\n/* harmony import */ var _common_Util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/Util.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/common/Util.js\");\n/* harmony import */ var _ExtendedLameHeader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ExtendedLameHeader.js */ \"(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mpeg/ExtendedLameHeader.js\");\n\n\n\n/**\n * Info Tag: Xing, LAME\n */\nconst InfoTagHeaderTag = new token_types__WEBPACK_IMPORTED_MODULE_0__.StringType(4, 'ascii');\n/**\n * LAME TAG value\n * Did not find any official documentation for this\n * Value e.g.: \"3.98.4\"\n */\nconst LameEncoderVersion = new token_types__WEBPACK_IMPORTED_MODULE_0__.StringType(6, 'ascii');\n/**\n * Info Tag\n * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n */\nconst XingHeaderFlags = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            frames: _common_Util_js__WEBPACK_IMPORTED_MODULE_1__.isBitSet(buf, off, 31),\n            bytes: _common_Util_js__WEBPACK_IMPORTED_MODULE_1__.isBitSet(buf, off, 30),\n            toc: _common_Util_js__WEBPACK_IMPORTED_MODULE_1__.isBitSet(buf, off, 29),\n            vbrScale: _common_Util_js__WEBPACK_IMPORTED_MODULE_1__.isBitSet(buf, off, 28)\n        };\n    }\n};\n// /**\n//  * XING Header Tag\n//  * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n//  */\nasync function readXingHeader(tokenizer) {\n    const flags = await tokenizer.readToken(XingHeaderFlags);\n    const xingInfoTag = { numFrames: null, streamSize: null, vbrScale: null };\n    if (flags.frames) {\n        xingInfoTag.numFrames = await tokenizer.readToken(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE);\n    }\n    if (flags.bytes) {\n        xingInfoTag.streamSize = await tokenizer.readToken(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE);\n    }\n    if (flags.toc) {\n        xingInfoTag.toc = new Uint8Array(100);\n        await tokenizer.readBuffer(xingInfoTag.toc);\n    }\n    if (flags.vbrScale) {\n        xingInfoTag.vbrScale = await tokenizer.readToken(token_types__WEBPACK_IMPORTED_MODULE_0__.UINT32_BE);\n    }\n    const lameTag = await tokenizer.peekToken(new token_types__WEBPACK_IMPORTED_MODULE_0__.StringType(4, 'ascii'));\n    if (lameTag === 'LAME') {\n        await tokenizer.ignore(4);\n        xingInfoTag.lame = {\n            version: await tokenizer.readToken(new token_types__WEBPACK_IMPORTED_MODULE_0__.StringType(5, 'ascii'))\n        };\n        const match = xingInfoTag.lame.version.match(/\\d+.\\d+/g);\n        if (match !== null) {\n            const majorMinorVersion = match[0]; // e.g. 3.97\n            const version = majorMinorVersion.split('.').map(n => Number.parseInt(n, 10));\n            if (version[0] >= 3 && version[1] >= 90) {\n                xingInfoTag.lame.extended = await tokenizer.readToken(_ExtendedLameHeader_js__WEBPACK_IMPORTED_MODULE_2__.ExtendedLameHeader);\n            }\n        }\n    }\n    return xingInfoTag;\n}\n//# sourceMappingURL=XingTag.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9tdXNpYy1tZXRhZGF0YUAxMC43LjAvbm9kZV9tb2R1bGVzL211c2ljLW1ldGFkYXRhL2xpYi9tcGVnL1hpbmdUYWcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFxQztBQUNLO0FBQ21CO0FBQzdEO0FBQ0E7QUFDQTtBQUNPLDZCQUE2QixtREFBZ0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLCtCQUErQixtREFBZ0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxREFBYTtBQUNqQyxtQkFBbUIscURBQWE7QUFDaEMsaUJBQWlCLHFEQUFhO0FBQzlCLHNCQUFzQixxREFBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQSwwREFBMEQsa0RBQWU7QUFDekU7QUFDQTtBQUNBLDJEQUEyRCxrREFBZTtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsa0RBQWU7QUFDeEU7QUFDQSxrREFBa0QsbURBQWdCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxtREFBZ0I7QUFDbkU7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQSxzRUFBc0Usc0VBQWtCO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvbGlsYXMvQnVyZWF1L0Rldi9MTVAvbm9kZV9tb2R1bGVzLy5wbnBtL211c2ljLW1ldGFkYXRhQDEwLjcuMC9ub2RlX21vZHVsZXMvbXVzaWMtbWV0YWRhdGEvbGliL21wZWcvWGluZ1RhZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBUb2tlbiBmcm9tICd0b2tlbi10eXBlcyc7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uL2NvbW1vbi9VdGlsLmpzJztcbmltcG9ydCB7IEV4dGVuZGVkTGFtZUhlYWRlciB9IGZyb20gJy4vRXh0ZW5kZWRMYW1lSGVhZGVyLmpzJztcbi8qKlxuICogSW5mbyBUYWc6IFhpbmcsIExBTUVcbiAqL1xuZXhwb3J0IGNvbnN0IEluZm9UYWdIZWFkZXJUYWcgPSBuZXcgVG9rZW4uU3RyaW5nVHlwZSg0LCAnYXNjaWknKTtcbi8qKlxuICogTEFNRSBUQUcgdmFsdWVcbiAqIERpZCBub3QgZmluZCBhbnkgb2ZmaWNpYWwgZG9jdW1lbnRhdGlvbiBmb3IgdGhpc1xuICogVmFsdWUgZS5nLjogXCIzLjk4LjRcIlxuICovXG5leHBvcnQgY29uc3QgTGFtZUVuY29kZXJWZXJzaW9uID0gbmV3IFRva2VuLlN0cmluZ1R5cGUoNiwgJ2FzY2lpJyk7XG4vKipcbiAqIEluZm8gVGFnXG4gKiBSZWY6IGh0dHA6Ly9nYWJyaWVsLm1wMy10ZWNoLm9yZy9tcDNpbmZvdGFnLmh0bWxcbiAqL1xuZXhwb3J0IGNvbnN0IFhpbmdIZWFkZXJGbGFncyA9IHtcbiAgICBsZW46IDQsXG4gICAgZ2V0OiAoYnVmLCBvZmYpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZyYW1lczogdXRpbC5pc0JpdFNldChidWYsIG9mZiwgMzEpLFxuICAgICAgICAgICAgYnl0ZXM6IHV0aWwuaXNCaXRTZXQoYnVmLCBvZmYsIDMwKSxcbiAgICAgICAgICAgIHRvYzogdXRpbC5pc0JpdFNldChidWYsIG9mZiwgMjkpLFxuICAgICAgICAgICAgdmJyU2NhbGU6IHV0aWwuaXNCaXRTZXQoYnVmLCBvZmYsIDI4KVxuICAgICAgICB9O1xuICAgIH1cbn07XG4vLyAvKipcbi8vICAqIFhJTkcgSGVhZGVyIFRhZ1xuLy8gICogUmVmOiBodHRwOi8vZ2FicmllbC5tcDMtdGVjaC5vcmcvbXAzaW5mb3RhZy5odG1sXG4vLyAgKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWFkWGluZ0hlYWRlcih0b2tlbml6ZXIpIHtcbiAgICBjb25zdCBmbGFncyA9IGF3YWl0IHRva2VuaXplci5yZWFkVG9rZW4oWGluZ0hlYWRlckZsYWdzKTtcbiAgICBjb25zdCB4aW5nSW5mb1RhZyA9IHsgbnVtRnJhbWVzOiBudWxsLCBzdHJlYW1TaXplOiBudWxsLCB2YnJTY2FsZTogbnVsbCB9O1xuICAgIGlmIChmbGFncy5mcmFtZXMpIHtcbiAgICAgICAgeGluZ0luZm9UYWcubnVtRnJhbWVzID0gYXdhaXQgdG9rZW5pemVyLnJlYWRUb2tlbihUb2tlbi5VSU5UMzJfQkUpO1xuICAgIH1cbiAgICBpZiAoZmxhZ3MuYnl0ZXMpIHtcbiAgICAgICAgeGluZ0luZm9UYWcuc3RyZWFtU2l6ZSA9IGF3YWl0IHRva2VuaXplci5yZWFkVG9rZW4oVG9rZW4uVUlOVDMyX0JFKTtcbiAgICB9XG4gICAgaWYgKGZsYWdzLnRvYykge1xuICAgICAgICB4aW5nSW5mb1RhZy50b2MgPSBuZXcgVWludDhBcnJheSgxMDApO1xuICAgICAgICBhd2FpdCB0b2tlbml6ZXIucmVhZEJ1ZmZlcih4aW5nSW5mb1RhZy50b2MpO1xuICAgIH1cbiAgICBpZiAoZmxhZ3MudmJyU2NhbGUpIHtcbiAgICAgICAgeGluZ0luZm9UYWcudmJyU2NhbGUgPSBhd2FpdCB0b2tlbml6ZXIucmVhZFRva2VuKFRva2VuLlVJTlQzMl9CRSk7XG4gICAgfVxuICAgIGNvbnN0IGxhbWVUYWcgPSBhd2FpdCB0b2tlbml6ZXIucGVla1Rva2VuKG5ldyBUb2tlbi5TdHJpbmdUeXBlKDQsICdhc2NpaScpKTtcbiAgICBpZiAobGFtZVRhZyA9PT0gJ0xBTUUnKSB7XG4gICAgICAgIGF3YWl0IHRva2VuaXplci5pZ25vcmUoNCk7XG4gICAgICAgIHhpbmdJbmZvVGFnLmxhbWUgPSB7XG4gICAgICAgICAgICB2ZXJzaW9uOiBhd2FpdCB0b2tlbml6ZXIucmVhZFRva2VuKG5ldyBUb2tlbi5TdHJpbmdUeXBlKDUsICdhc2NpaScpKVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBtYXRjaCA9IHhpbmdJbmZvVGFnLmxhbWUudmVyc2lvbi5tYXRjaCgvXFxkKy5cXGQrL2cpO1xuICAgICAgICBpZiAobWF0Y2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IG1ham9yTWlub3JWZXJzaW9uID0gbWF0Y2hbMF07IC8vIGUuZy4gMy45N1xuICAgICAgICAgICAgY29uc3QgdmVyc2lvbiA9IG1ham9yTWlub3JWZXJzaW9uLnNwbGl0KCcuJykubWFwKG4gPT4gTnVtYmVyLnBhcnNlSW50KG4sIDEwKSk7XG4gICAgICAgICAgICBpZiAodmVyc2lvblswXSA+PSAzICYmIHZlcnNpb25bMV0gPj0gOTApIHtcbiAgICAgICAgICAgICAgICB4aW5nSW5mb1RhZy5sYW1lLmV4dGVuZGVkID0gYXdhaXQgdG9rZW5pemVyLnJlYWRUb2tlbihFeHRlbmRlZExhbWVIZWFkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB4aW5nSW5mb1RhZztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVhpbmdUYWcuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/music-metadata@10.7.0/node_modules/music-metadata/lib/mpeg/XingTag.js\n"));

/***/ })

}]);